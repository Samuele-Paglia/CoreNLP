pipeline {
	agent any
	tools {
		gradle 'gradle:4.10.3'
	}
	stages {
		stage('Build') {
			steps {
				sh 'gradle build'
			}
		}
		stage('SonarQube Analysis') {
			steps {
				withSonarQubeEnv('sonarqube') {
					//sh 'gradle --stacktrace sonarqube'
					sh 'echo "Skipping sonarqube analysis..."'
				}
			}
		}
		stage('Quality Gate') {
			steps {
				sh 'echo "Skipping sonarqube quality gate check..."'/*
				timeout(time: 20, unit: 'MINUTES') {
					waitForQualityGate abortPipeline: true
				}*/
			}
		}
		stage('Delivery'){
			steps {
				sh 'gradle publish -x javadoc'
			}
		}
	}
	post {
		success {
			slackSend (color: 'good', message: "${env.JOB_NAME} - #${env.BUILD_NUMBER} Success after ${currentBuild.durationString.replace(' and counting', '')} (<${env.BUILD_URL}|Details>)")
		}
		unstable {
			slackSend (color: 'warning', message: "${env.JOB_NAME} - #${env.BUILD_NUMBER} Unstable after ${currentBuild.durationString.replace(' and counting', '')} (<${env.BUILD_URL}|Details>)")
		}
		failure {
			slackSend (color: 'danger', message: "${env.JOB_NAME} - #${env.BUILD_NUMBER} Failure after ${currentBuild.durationString.replace(' and counting', '')} (<${env.BUILD_URL}|Details>)")
		}
	}
}
