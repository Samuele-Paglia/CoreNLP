/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 06 09:26:33 GMT 2018
 */

package edu.stanford.nlp.util;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.stanford.nlp.ie.AbstractSequenceClassifier;
import edu.stanford.nlp.ie.NERClassifierCombiner;
import edu.stanford.nlp.ling.BasicDocument;
import edu.stanford.nlp.ling.CategoryWordTag;
import edu.stanford.nlp.ling.CoreAnnotations;
import edu.stanford.nlp.ling.CoreLabel;
import edu.stanford.nlp.ling.HasWord;
import edu.stanford.nlp.ling.IndexedWord;
import edu.stanford.nlp.ling.Label;
import edu.stanford.nlp.ling.LabeledWord;
import edu.stanford.nlp.ling.StringLabel;
import edu.stanford.nlp.ling.TaggedWord;
import edu.stanford.nlp.ling.Word;
import edu.stanford.nlp.ling.WordFactory;
import edu.stanford.nlp.ling.WordLemmaTag;
import edu.stanford.nlp.ling.WordTag;
import edu.stanford.nlp.objectbank.ObjectBank;
import edu.stanford.nlp.process.Morphology;
import edu.stanford.nlp.semgraph.SemanticGraph;
import edu.stanford.nlp.sequences.SeqClassifierFlags;
import edu.stanford.nlp.sequences.TrueCasingForNISTDocumentReaderAndWriter;
import edu.stanford.nlp.trees.LabeledScoredTreeNode;
import edu.stanford.nlp.trees.Tree;
import edu.stanford.nlp.trees.TreeGraphNode;
import edu.stanford.nlp.trees.TypedDependency;
import edu.stanford.nlp.util.ArrayCoreMap;
import edu.stanford.nlp.util.CoreMap;
import edu.stanford.nlp.util.DeltaIndex;
import edu.stanford.nlp.util.HashIndex;
import edu.stanford.nlp.util.HashableCoreMap;
import edu.stanford.nlp.util.MapFactory;
import edu.stanford.nlp.util.RegexStringFilter;
import edu.stanford.nlp.util.StringUtils;
import edu.stanford.nlp.util.TypesafeMap;
import edu.stanford.nlp.util.logging.Redwood;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.Reader;
import java.lang.reflect.Array;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.CharBuffer;
import java.nio.file.Path;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

	@Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        StringUtils.isAlpha((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[][] objectArray0 = new Object[2][0];
      Object[] objectArray1 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray1[0] = object0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[0];
      assertFalse(objectArray2.equals((Object)objectArray1));
      
      objectArray0[1] = objectArray2;
      // Undeclared exception!
      try { 
        StringUtils.makeTextTable(objectArray0, objectArray2, objectArray2, 3777, 0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("edu.stanford.nlp.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TreeSet<StringUtils> treeSet0 = new TreeSet<StringUtils>();
      assertNotNull(treeSet0);
      
      String string0 = StringUtils.join((Iterable<StringUtils>) treeSet0, "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Map<String, String> map0 = StringUtils.decodeMap("");
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      String string1 = StringUtils.expandEnvironmentVariables("", map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.padLeft(0, 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.lookingAt(".3>C", "8KKC@L7YZ   ");
      assertFalse(boolean0);
      
      HashIndex<TypedDependency> hashIndex0 = new HashIndex<TypedDependency>(0);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertNotNull(hashIndex0);
      
      DeltaIndex<TypedDependency> deltaIndex0 = new DeltaIndex<TypedDependency>(hashIndex0);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertFalse(deltaIndex0.isLocked());
      assertEquals(0, deltaIndex0.size());
      assertTrue(deltaIndex0.isEmpty());
      assertNotNull(deltaIndex0);
      
      SemanticGraph semanticGraph0 = new SemanticGraph(deltaIndex0);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertFalse(deltaIndex0.isLocked());
      assertEquals(0, deltaIndex0.size());
      assertTrue(deltaIndex0.isEmpty());
      assertNotNull(semanticGraph0);
      assertFalse(SemanticGraph.addSRLArcs);
      
      IndexedWord indexedWord0 = new IndexedWord("", 1074, 0);
      assertEquals(0, indexedWord0.copyCount());
      assertEquals(3, indexedWord0.size());
      assertNotNull(indexedWord0);
      
      IndexedWord indexedWord1 = semanticGraph0.getCommonAncestor(indexedWord0, indexedWord0);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertFalse(deltaIndex0.isLocked());
      assertEquals(0, deltaIndex0.size());
      assertTrue(deltaIndex0.isEmpty());
      assertEquals(0, indexedWord0.copyCount());
      assertEquals(3, indexedWord0.size());
      assertEquals(0, indexedWord1.copyCount());
      assertEquals(3, indexedWord1.size());
      assertNotNull(indexedWord1);
      assertSame(indexedWord0, indexedWord1);
      assertSame(indexedWord1, indexedWord0);
      assertFalse(SemanticGraph.addSRLArcs);
      
      TypedDependency typedDependency0 = mock(TypedDependency.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = deltaIndex0.add(typedDependency0);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertFalse(deltaIndex0.isLocked());
      assertEquals(1, deltaIndex0.size());
      assertFalse(deltaIndex0.isEmpty());
      assertFalse(boolean1 == boolean0);
      assertFalse(hashIndex0.contains(typedDependency0));
      assertTrue(deltaIndex0.contains(typedDependency0));
      assertTrue(boolean1);
      
      LabeledWord labeledWord0 = new LabeledWord("quickstep", indexedWord1);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertFalse(deltaIndex0.isLocked());
      assertEquals(1, deltaIndex0.size());
      assertFalse(deltaIndex0.isEmpty());
      assertEquals(0, indexedWord0.copyCount());
      assertEquals(3, indexedWord0.size());
      assertEquals(0, indexedWord1.copyCount());
      assertEquals(3, indexedWord1.size());
      assertEquals("quickstep", labeledWord0.value());
      assertEquals("quickstep", labeledWord0.word());
      assertEquals((-1), labeledWord0.endPosition());
      assertEquals((-1), labeledWord0.beginPosition());
      assertNotNull(labeledWord0);
      assertFalse(hashIndex0.contains(typedDependency0));
      assertTrue(deltaIndex0.contains(typedDependency0));
      assertFalse(SemanticGraph.addSRLArcs);
      
      String string3 = StringUtils.trimWithEllipsis((Object) labeledWord0, 1074);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertFalse(deltaIndex0.isLocked());
      assertEquals(1, deltaIndex0.size());
      assertFalse(deltaIndex0.isEmpty());
      assertEquals(0, indexedWord0.copyCount());
      assertEquals(3, indexedWord0.size());
      assertEquals(0, indexedWord1.copyCount());
      assertEquals(3, indexedWord1.size());
      assertEquals("quickstep", labeledWord0.value());
      assertEquals("quickstep", labeledWord0.word());
      assertEquals((-1), labeledWord0.endPosition());
      assertEquals((-1), labeledWord0.beginPosition());
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(hashIndex0.contains(typedDependency0));
      assertTrue(deltaIndex0.contains(typedDependency0));
      assertSame(indexedWord0, indexedWord1);
      assertSame(indexedWord1, indexedWord0);
      assertFalse(SemanticGraph.addSRLArcs);
      
      String string4 = StringUtils.getBaseName("quickstep", ".3>C", "microprogram");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("quickstep", string4);
      
      Set<String> set0 = StringUtils.stringToSet("d-*d$W)z/3E](tY", "5lcG3+\"_LLv7^|e`");
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains(string1));
      assertTrue(set0.contains("d-*d$W)z/3E](tY"));
      
      boolean boolean2 = StringUtils.lookingAt(";Wr+,ml:UT)%%*NVD43", "picket");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = StringUtils.padLeftOrTrim("q\"&f9H_", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[][] stringArray0 = new String[8][6];
      String[] stringArray1 = new String[4];
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[2] = "q\"&f9H_";
      stringArray1[3] = "";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[9];
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "q\"&f9H_";
      stringArray2[1] = "o8N)$U$8&_CY";
      stringArray2[2] = "q\"&f9H_";
      stringArray2[3] = "";
      stringArray2[4] = "q\"&f9H_";
      stringArray2[5] = "";
      stringArray2[6] = "";
      stringArray2[7] = "";
      stringArray2[8] = "q\"&f9H_";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[8];
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      
      stringArray3[0] = "o8N)$U$8&_CY";
      stringArray3[1] = "out-general";
      stringArray3[2] = "q\"&f9H_";
      stringArray3[3] = "o8N)$U$8&_CY";
      stringArray3[4] = "";
      stringArray3[5] = "q\"&f9H_";
      stringArray3[6] = "o8N)$U$8&_CY";
      stringArray3[7] = "o8N)$U$8&_CY";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[9];
      assertFalse(stringArray4.equals((Object)stringArray3));
      assertFalse(stringArray4.equals((Object)stringArray1));
      assertFalse(stringArray4.equals((Object)stringArray2));
      
      stringArray4[0] = "";
      stringArray4[1] = "";
      stringArray4[2] = "q\"&f9H_";
      stringArray4[3] = "";
      stringArray4[4] = "";
      stringArray4[5] = "";
      stringArray4[6] = "";
      stringArray4[7] = "o8N)$U$8&_CY";
      stringArray4[8] = "q\"&f9H_";
      stringArray0[3] = stringArray4;
      String[] stringArray5 = new String[3];
      assertFalse(stringArray5.equals((Object)stringArray4));
      assertFalse(stringArray5.equals((Object)stringArray2));
      assertFalse(stringArray5.equals((Object)stringArray1));
      assertFalse(stringArray5.equals((Object)stringArray3));
      
      stringArray5[0] = "edu.stanford.nlp.ling.CoreAnnotations$SRLInstancesAnnotation";
      stringArray5[1] = "";
      stringArray5[2] = "out-general";
      stringArray0[4] = stringArray5;
      String[] stringArray6 = new String[8];
      assertFalse(stringArray6.equals((Object)stringArray2));
      assertFalse(stringArray6.equals((Object)stringArray4));
      assertFalse(stringArray6.equals((Object)stringArray3));
      assertFalse(stringArray6.equals((Object)stringArray1));
      assertFalse(stringArray6.equals((Object)stringArray5));
      
      stringArray6[0] = "q\"&f9H_";
      stringArray6[1] = "o8N)$U$8&_CY";
      stringArray6[2] = "o8N)$U$8&_CY";
      stringArray6[3] = "q\"&f9H_";
      stringArray6[4] = "o8N)$U$8&_CY";
      stringArray6[5] = "o8N)$U$8&_CY";
      stringArray6[6] = "edu.stanford.nlp.ling.CoreAnnotations$SRLInstancesAnnotation";
      stringArray6[7] = "edu.stanford.nlp.ling.CoreAnnotations$SRLInstancesAnnotation";
      stringArray0[5] = stringArray6;
      String[] stringArray7 = new String[6];
      assertFalse(stringArray7.equals((Object)stringArray1));
      assertFalse(stringArray7.equals((Object)stringArray6));
      assertFalse(stringArray7.equals((Object)stringArray5));
      assertFalse(stringArray7.equals((Object)stringArray3));
      assertFalse(stringArray7.equals((Object)stringArray2));
      assertFalse(stringArray7.equals((Object)stringArray4));
      
      stringArray7[0] = "friday";
      stringArray7[1] = "edu.stanford.nlp.ling.CoreAnnotations$SRLInstancesAnnotation";
      stringArray7[2] = "q\"&f9H_";
      stringArray7[3] = "q\"&f9H_";
      stringArray7[4] = "";
      stringArray7[5] = "edu.stanford.nlp.ling.CoreAnnotations$SRLInstancesAnnotation";
      stringArray0[6] = stringArray7;
      String[] stringArray8 = new String[4];
      assertFalse(stringArray8.equals((Object)stringArray3));
      assertFalse(stringArray8.equals((Object)stringArray7));
      assertFalse(stringArray8.equals((Object)stringArray4));
      assertFalse(stringArray8.equals((Object)stringArray6));
      assertFalse(stringArray8.equals((Object)stringArray5));
      assertFalse(stringArray8.equals((Object)stringArray1));
      assertFalse(stringArray8.equals((Object)stringArray2));
      
      stringArray8[0] = "edu.stanford.nlp.ling.CoreAnnotations$SRLInstancesAnnotation";
      stringArray8[1] = "edu.stanford.nlp.ling.CoreAnnotations$SRLInstancesAnnotation";
      stringArray8[2] = "out-general";
      stringArray8[3] = "";
      stringArray0[7] = stringArray8;
      // Undeclared exception!
      try { 
        StringUtils.makeHTMLTable(stringArray0, stringArray1, stringArray8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("edu.stanford.nlp.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "";
      int int0 = (-2621);
      // Undeclared exception!
      try { 
        StringUtils.padLeftOrTrim("", (-2621));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
  
}