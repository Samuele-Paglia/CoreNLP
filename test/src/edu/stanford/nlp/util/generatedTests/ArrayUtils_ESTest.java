/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 06 09:51:20 GMT 2018
 */

package edu.stanford.nlp.util;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.stanford.nlp.ling.CoreLabel;
import edu.stanford.nlp.ling.Label;
import edu.stanford.nlp.ling.StringLabel;
import edu.stanford.nlp.ling.Word;
import edu.stanford.nlp.ling.WordLemmaTag;
import edu.stanford.nlp.objectbank.ObjectBank;
import edu.stanford.nlp.objectbank.ReaderIteratorFactory;
import edu.stanford.nlp.process.CoreLabelTokenFactory;
import edu.stanford.nlp.process.Morphology;
import edu.stanford.nlp.sequences.SeqClassifierFlags;
import edu.stanford.nlp.stats.IntCounter;
import edu.stanford.nlp.trees.LabeledScoredTreeFactory;
import edu.stanford.nlp.trees.LabeledScoredTreeNode;
import edu.stanford.nlp.trees.SimpleTree;
import edu.stanford.nlp.trees.Tree;
import edu.stanford.nlp.util.ArrayUtils;
import edu.stanford.nlp.util.DeltaIndex;
import edu.stanford.nlp.util.Filters;
import edu.stanford.nlp.util.HashIndex;
import edu.stanford.nlp.util.MapFactory;
import edu.stanford.nlp.util.MutableInteger;
import edu.stanford.nlp.util.Pair;
import java.lang.reflect.Array;
import java.net.Proxy;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Supplier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Short[] shortArray0 = new Short[4];
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      shortArray0[0] = short1;
      Short short2 = Short.valueOf(short0);
      shortArray0[1] = short2;
      Short short3 = new Short((short)0);
      shortArray0[2] = short3;
      Short short4 = new Short(short0);
      ArrayUtils.toPrimitive(shortArray0, (short)0);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) short0;
      ArrayUtils.gapEncode(intArray0);
      Predicate<Pair> predicate0 = (Predicate<Pair>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(predicate0).test(nullable(edu.stanford.nlp.util.Pair.class));
      ArrayUtils.getSubListIndex((Object[]) shortArray0, (Object[]) shortArray0, predicate0);
      Long[] longArray0 = new Long[5];
      Long long0 = new Long(short0);
      longArray0[0] = long0;
      Long.getLong("");
      longArray0[1] = null;
      Long long1 = new Long(short0);
      longArray0[2] = long1;
      Long long2 = new Long((short)0);
      longArray0[3] = long2;
      Long long3 = new Long((-313L));
      Long.compareUnsigned((long) longArray0[3], 754L);
      longArray0[4] = long3;
      ArrayUtils.toPrimitive(longArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.gapDecodeList((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      ArrayUtils.subArray(objectArray0, (-1886), 521);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)117;
      int[] intArray0 = ArrayUtils.gapDecode(byteArray0);
      ArrayUtils.toDouble(intArray0);
      Object[] objectArray1 = new Object[6];
      Object object3 = new Object();
      objectArray1[0] = object3;
      objectArray1[1] = (Object) (byte) (-60);
      objectArray1[2] = (Object) (byte)0;
      objectArray1[3] = (Object) (byte)84;
      objectArray1[4] = object2;
      objectArray1[5] = (Object) (byte)0;
      ArrayUtils.subArray(objectArray1, (byte)0, 49);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      int int0 = 0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer integer0 = new Integer(0);
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[2] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[3] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[4] = integer3;
      ArrayUtils.toPrimitive((Integer[]) null);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      int int0 = (-1886);
      ArrayUtils.subArray(objectArray0, (-1886), 521);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)117;
      ArrayUtils.gapDecode(byteArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.deltaEncodeList((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1589);
      intArray0[1] = (-1354);
      intArray0[2] = (-1354);
      intArray0[3] = 359;
      intArray0[4] = 1595;
      intArray0[6] = (-1354);
      intArray0[7] = 1821;
      int[] intArray1 = ArrayUtils.copy(intArray0);
      ArrayUtils.equalContents(intArray0, intArray1);
      Morphology morphology0 = new Morphology();
      ObjectBank<Double> objectBank0 = ObjectBank.getLineIterator("aNB;VMjV,Y", (Function<String, Double>) morphology0);
      // Undeclared exception!
      try { 
        ArrayUtils.asPrimitiveDoubleArray(objectBank0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.FileNotFoundException
         //
         verifyException("edu.stanford.nlp.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Filters.ConjFilter<String> filters_ConjFilter0 = new Filters.ConjFilter<String>((List<Predicate<String>>) null);
      ArrayUtils.filter(stringArray0, (Predicate<? super String>) filters_ConjFilter0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 160.3896598821;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.1;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 1.0E9;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = 1377.289;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 160.3896598821;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.1;
      doubleArray2[3] = 0.1;
      doubleArray2[4] = 1.0E9;
      doubleArray2[5] = 1377.289;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 160.3896598821;
      doubleArray3[1] = 1.0E9;
      doubleArray3[2] = 570.7986058066;
      doubleArray0[1] = doubleArray3;
      double[][] doubleArray4 = ArrayUtils.copy(doubleArray0);
      ArrayUtils.equals(doubleArray4, doubleArray4);
      ArrayUtils.equalContents((int[][]) null, (int[][]) null);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      int[] intArray0 = new int[8];
      intArray0[0] = 18;
      intArray0[1] = 2380;
      intArray0[2] = 190;
      intArray0[3] = (-886);
      intArray0[4] = 730;
      intArray0[5] = 19;
      intArray0[6] = 424;
      intArray0[7] = 5;
      ArrayUtils.asList(intArray0);
      ArrayUtils.copy((double[]) null);
      double[][] doubleArray0 = new double[2][3];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      ArrayUtils.copy(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      List<Integer>[] listArray0 = (List<Integer>[]) Array.newInstance(List.class, 2);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)0;
      List<Integer> list0 = ArrayUtils.deltaDecodeList(byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(20, list0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)3, (byte)0}, byteArray0);
      
      listArray0[0] = list0;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) list0;
      objectArray0[4] = (Object) list0;
      objectArray0[5] = (Object) (byte)0;
      objectArray0[6] = (Object) (byte)0;
      objectArray0[7] = (Object) (byte)3;
      objectArray0[8] = (Object) list0;
      Predicate<Pair> predicate0 = (Predicate<Pair>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(predicate0).test(nullable(edu.stanford.nlp.util.Pair.class));
      List<Integer> list1 = ArrayUtils.getSubListIndex(objectArray0, objectArray0, predicate0);
      assertEquals(9, objectArray0.length);
      assertNotNull(list1);
      assertNotSame(list1, list0);
      assertFalse(list1.equals((Object)list0));
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      listArray0[1] = list1;
      Set<List<Integer>> set0 = ArrayUtils.asImmutableSet(listArray0);
      assertEquals(2, listArray0.length);
      assertNotNull(set0);
      assertTrue(set0.contains(list0));
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      
      double[][][] doubleArray0 = new double[0][9][3];
      double[][][] doubleArray1 = ArrayUtils.copy(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[][] doubleArray2 = new double[0][7];
      ArrayUtils.equals(doubleArray2, (double[][]) null);
      Random.setNextRandom((byte)0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 313.0108973675;
      doubleArray1[1] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-2667.12);
      doubleArray2[2] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 313.0108973675;
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = (-2667.12);
      doubleArray3[3] = (-1.0);
      doubleArray3[4] = 313.0108973675;
      doubleArray3[5] = (-1.0);
      doubleArray3[6] = (-1.0);
      doubleArray3[7] = 0.0;
      doubleArray0[2] = doubleArray3;
      ArrayUtils.fill(doubleArray0, (-1.0));
      Integer[] integerArray0 = new Integer[4];
      int int0 = 20;
      Integer integer0 = new Integer(20);
      integerArray0[0] = integer0;
      Integer integer1 = Integer.getInteger("", (-1393));
      integerArray0[1] = integer1;
      Integer integer2 = Integer.getInteger("", (-1589));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer[] integerArray1 = new Integer[3];
      integerArray1[0] = integer1;
      integerArray1[1] = integer0;
      integerArray1[2] = integer3;
      ArrayUtils.compareArrays(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[][] doubleArray0 = new double[0][7];
      ArrayUtils.toString(doubleArray0);
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-800));
      integerArray0[0] = integer0;
      integerArray0[1] = integerArray0[0];
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer1;
      Integer integer2 = new Integer(1714);
      integerArray0[3] = integer2;
      Integer integer3 = new Integer((int) integerArray0[3]);
      integerArray0[4] = integer3;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      ArrayUtils.gapEncodeList(intArray0);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (int)integerArray0[1];
      floatArray0[1] = (float) (int)integerArray0[3];
      floatArray0[2] = (float) (int)integerArray0[2];
      floatArray0[3] = (float) (int)integerArray0[1];
      floatArray0[4] = (float) (int)integerArray0[1];
      floatArray0[5] = (float) (int)integerArray0[3];
      floatArray0[6] = (float) (int)integerArray0[3];
      ArrayUtils.toDouble(floatArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      ArrayUtils.subArray(objectArray0, (-1886), 521);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)117;
      int[] intArray0 = ArrayUtils.gapDecode(byteArray0);
      ArrayUtils.toDouble(intArray0);
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) (byte)95;
      objectArray1[1] = object2;
      objectArray1[2] = (Object) (byte)95;
      Object object3 = new Object();
      objectArray1[3] = object3;
      objectArray1[4] = (Object) (byte)95;
      objectArray1[5] = object1;
      objectArray1[6] = (Object) (byte)95;
      Predicate<Pair> predicate0 = (Predicate<Pair>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      ArrayUtils.getSubListIndex(objectArray1, objectArray0, predicate0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      IntCounter<Integer> intCounter0 = new IntCounter<Integer>();
      Set<Integer> set0 = intCounter0.keysAt(1147);
      HashIndex<Integer> hashIndex0 = new HashIndex<Integer>(set0);
      DeltaIndex<Integer> deltaIndex0 = new DeltaIndex<Integer>(hashIndex0, hashIndex0);
      int[] intArray0 = ArrayUtils.asPrimitiveIntArray(deltaIndex0);
      ArrayUtils.gapEncodeList(intArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.copy(doubleArray0);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      // Undeclared exception!
      try { 
        ArrayUtils.subArray(objectArray0, (-2611), (-1216));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[][] doubleArray0 = new double[8][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1029.528147324076);
      doubleArray1[1] = 2232.935;
      doubleArray1[2] = (-2554.475248688851);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 2232.935;
      doubleArray2[1] = (-1029.528147324076);
      doubleArray2[2] = (-2554.475248688851);
      doubleArray2[3] = 2232.935;
      doubleArray2[4] = (-1029.528147324076);
      doubleArray2[5] = (-2554.475248688851);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 2232.935;
      doubleArray3[1] = 20.0;
      doubleArray3[2] = (-2554.475248688851);
      doubleArray3[3] = 1196.85154234;
      doubleArray3[4] = 2232.935;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 20.0;
      doubleArray4[1] = (-1029.528147324076);
      doubleArray4[2] = (-1029.528147324076);
      doubleArray4[3] = 2232.935;
      doubleArray4[4] = 1196.85154234;
      doubleArray4[5] = 20.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = 1196.85154234;
      doubleArray5[1] = 20.0;
      doubleArray5[2] = (-2554.475248688851);
      doubleArray5[3] = 1196.85154234;
      doubleArray5[4] = 1196.85154234;
      doubleArray5[5] = 3.0E9;
      doubleArray5[6] = 20.0;
      doubleArray5[7] = 0.0;
      doubleArray5[8] = (-2554.475248688851);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = 2232.935;
      doubleArray6[1] = (-2554.475248688851);
      doubleArray6[2] = (-2554.475248688851);
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 2232.935;
      doubleArray6[5] = 2232.935;
      doubleArray6[6] = 2232.935;
      doubleArray6[7] = (-1029.528147324076);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      doubleArray7[0] = (-2554.475248688851);
      doubleArray7[1] = (-1029.528147324076);
      doubleArray7[2] = 2232.935;
      doubleArray7[3] = 3.0E9;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[3];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = 0.0;
      doubleArray8[2] = 3.0E9;
      doubleArray0[7] = doubleArray8;
      double[][] doubleArray9 = new double[0][1];
      ArrayUtils.equals(doubleArray0, doubleArray9);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ArrayUtils.toPrimitive((Integer[]) null, 930);
      boolean[][] booleanArray0 = new boolean[6][6];
      boolean[] booleanArray1 = new boolean[0];
      booleanArray0[0] = booleanArray1;
      boolean[] booleanArray2 = new boolean[5];
      booleanArray2[0] = false;
      booleanArray2[1] = true;
      booleanArray2[2] = true;
      booleanArray2[3] = true;
      booleanArray2[4] = true;
      booleanArray0[1] = booleanArray2;
      boolean[] booleanArray3 = new boolean[7];
      booleanArray3[0] = true;
      booleanArray3[1] = true;
      booleanArray3[2] = false;
      booleanArray3[3] = true;
      booleanArray3[4] = true;
      booleanArray3[5] = true;
      booleanArray3[6] = false;
      booleanArray0[2] = booleanArray3;
      boolean[] booleanArray4 = new boolean[6];
      booleanArray4[0] = true;
      booleanArray4[1] = false;
      booleanArray4[2] = false;
      booleanArray4[3] = true;
      booleanArray4[4] = true;
      booleanArray4[5] = true;
      booleanArray0[3] = booleanArray4;
      boolean[] booleanArray5 = new boolean[7];
      booleanArray5[0] = true;
      booleanArray5[1] = false;
      booleanArray5[2] = true;
      booleanArray5[3] = true;
      booleanArray5[4] = true;
      booleanArray5[5] = true;
      booleanArray5[6] = true;
      booleanArray0[4] = booleanArray5;
      boolean[] booleanArray6 = new boolean[6];
      booleanArray6[0] = true;
      booleanArray6[1] = true;
      booleanArray6[2] = true;
      booleanArray6[3] = true;
      booleanArray6[4] = true;
      booleanArray6[5] = true;
      booleanArray0[5] = booleanArray6;
      ArrayUtils.toString(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ArrayUtils.toPrimitive((Character[]) null, 'x');
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double((-1.0));
      doubleArray0[0] = double0;
      Double double1 = new Double(3194.559147974731);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      doubleArray0[2] = double2;
      Double double3 = new Double((-1007.337801911));
      doubleArray0[3] = double3;
      Double double4 = new Double(1.0);
      doubleArray0[5] = double1;
      ArrayUtils.toPrimitive(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1223;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = (-2201);
      intArray0[1] = (-2201);
      intArray0[2] = 782;
      int int1 = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-4304);
      ArrayUtils.equalContents(intArray0, intArray0);
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.toString((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      ArrayUtils.removeAt(objectArray0, (-659));
      int[] intArray0 = new int[2];
      intArray0[0] = (-659);
      intArray0[1] = (-659);
      List<Integer> list0 = ArrayUtils.asList(intArray0);
      ArrayUtils.asPrimitiveIntArray(list0);
      Long[] longArray0 = new Long[7];
      Long long0 = new Long((-659));
      longArray0[0] = long0;
      Long long1 = Long.valueOf(1L);
      longArray0[1] = long1;
      Long.getLong("");
      longArray0[2] = null;
      Long long2 = new Long(1L);
      longArray0[3] = long2;
      Long long3 = new Long((long) longArray0[0]);
      longArray0[4] = long3;
      Long long4 = new Long((-659));
      longArray0[5] = long4;
      Long long5 = new Long((-1196L));
      longArray0[6] = long5;
      ArrayUtils.toPrimitive(longArray0, 2858L);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      ArrayUtils.removeAt(objectArray0, (-1262));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      ArrayUtils.subArray(objectArray0, 621, 49);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 621;
      doubleArray0[1] = (double) 49;
      doubleArray0[2] = (double) 49;
      doubleArray0[3] = (double) 621;
      doubleArray0[4] = (double) 49;
      doubleArray0[5] = (double) 49;
      ArrayUtils.removeAt(doubleArray0, 49);
      ArrayUtils.copy((float[][][]) null);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      ArrayUtils.asPrimitiveIntArray(linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte)79;
      List<Integer> list0 = ArrayUtils.gapDecodeList(byteArray0);
      assertEquals(29, list0.size());
      
      int[] intArray0 = new int[0];
      ArrayUtils.toDouble(intArray0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SimpleTree[] simpleTreeArray0 = new SimpleTree[9];
      LabeledScoredTreeFactory labeledScoredTreeFactory0 = new LabeledScoredTreeFactory();
      WordLemmaTag wordLemmaTag0 = new WordLemmaTag();
      StringLabel stringLabel0 = new StringLabel(wordLemmaTag0);
      Tree tree0 = labeledScoredTreeFactory0.newLeaf((Label) stringLabel0);
      LabeledScoredTreeNode labeledScoredTreeNode0 = new LabeledScoredTreeNode();
      List<Tree> list0 = labeledScoredTreeNode0.getChildrenAsList();
      SimpleTree simpleTree0 = new SimpleTree(tree0, list0);
      simpleTreeArray0[0] = simpleTree0;
      SimpleTree simpleTree1 = new SimpleTree((Label) null, list0);
      simpleTreeArray0[1] = simpleTree1;
      SimpleTree simpleTree2 = new SimpleTree(wordLemmaTag0, list0);
      simpleTreeArray0[2] = simpleTree2;
      SimpleTree simpleTree3 = new SimpleTree();
      simpleTreeArray0[3] = simpleTree3;
      SimpleTree simpleTree4 = new SimpleTree();
      simpleTreeArray0[4] = simpleTree4;
      Word word0 = new Word("bevel", (-1211), (-1211));
      SimpleTree simpleTree5 = new SimpleTree(word0, list0);
      simpleTreeArray0[5] = simpleTree5;
      SimpleTree simpleTree6 = new SimpleTree((Label) null);
      simpleTreeArray0[6] = simpleTree6;
      SimpleTree simpleTree7 = new SimpleTree();
      simpleTreeArray0[7] = simpleTree7;
      SimpleTree simpleTree8 = new SimpleTree(simpleTree0);
      simpleTreeArray0[8] = simpleTree8;
      Filters.RandomFilter<SimpleTree> filters_RandomFilter0 = new Filters.RandomFilter<SimpleTree>();
      ArrayUtils.filter(simpleTreeArray0, (Predicate<? super SimpleTree>) filters_RandomFilter0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      ArrayUtils.subArray(objectArray0, 621, 49);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 621;
      doubleArray0[1] = (double) 49;
      doubleArray0[2] = (double) 49;
      doubleArray0[3] = (double) 621;
      doubleArray0[4] = (double) 49;
      doubleArray0[5] = (double) 49;
      ArrayUtils.removeAt(doubleArray0, 49);
      // Undeclared exception!
      try { 
        ArrayUtils.asImmutableSet((ArrayUtils[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      List<Integer>[] listArray0 = (List<Integer>[]) Array.newInstance(List.class, 2);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)0;
      List<Integer> list0 = ArrayUtils.deltaDecodeList(byteArray0);
      listArray0[0] = list0;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) list0;
      objectArray0[4] = (Object) list0;
      objectArray0[5] = (Object) (byte)0;
      objectArray0[6] = (Object) (byte)0;
      objectArray0[7] = (Object) (byte)3;
      objectArray0[8] = (Object) list0;
      Predicate<Pair> predicate0 = (Predicate<Pair>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(predicate0).test(nullable(edu.stanford.nlp.util.Pair.class));
      List<Integer> list1 = ArrayUtils.getSubListIndex(objectArray0, objectArray0, predicate0);
      listArray0[1] = list1;
      ArrayUtils.asImmutableSet(listArray0);
      ArrayUtils.copy((float[][]) null);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      ArrayUtils.subArray(objectArray0, (-1886), 521);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)117;
      // Undeclared exception!
      try { 
        ArrayUtils.gapDecode((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 128;
      intArray0[2] = 0;
      intArray0[3] = 281;
      intArray0[4] = 1942;
      List<Integer> list0 = ArrayUtils.asList(intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(list0);
      assertTrue(list0.contains(1942));
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertArrayEquals(new int[] {0, 128, 0, 281, 1942}, intArray0);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = (Integer) 128;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 281;
      integerArray0[3] = (Integer) 128;
      integerArray0[4] = (Integer) 0;
      integerArray0[5] = (Integer) 1942;
      integerArray0[6] = (Integer) 281;
      integerArray0[7] = (Integer) 0;
      integerArray0[8] = (Integer) 0;
      ArrayUtils.asSet(integerArray0);
      boolean[][][][] booleanArray0 = new boolean[8][9][6][7];
      boolean[][][] booleanArray1 = new boolean[6][2][8];
      boolean[][] booleanArray2 = new boolean[1][2];
      boolean[] booleanArray3 = new boolean[5];
      booleanArray3[0] = true;
      booleanArray3[1] = false;
      booleanArray3[2] = false;
      booleanArray3[3] = true;
      booleanArray3[4] = true;
      booleanArray2[0] = booleanArray3;
      booleanArray1[0] = booleanArray2;
      boolean[][] booleanArray4 = new boolean[3][1];
      booleanArray4[0] = booleanArray3;
      booleanArray4[1] = booleanArray3;
      booleanArray4[2] = booleanArray3;
      booleanArray1[1] = booleanArray4;
      boolean[][] booleanArray5 = new boolean[0][1];
      booleanArray1[2] = booleanArray5;
      boolean[][] booleanArray6 = new boolean[8][4];
      booleanArray6[0] = booleanArray3;
      booleanArray6[1] = booleanArray3;
      booleanArray6[2] = booleanArray3;
      booleanArray6[3] = booleanArray3;
      booleanArray6[4] = booleanArray3;
      booleanArray6[5] = booleanArray3;
      booleanArray6[6] = booleanArray3;
      booleanArray6[7] = booleanArray3;
      booleanArray1[3] = booleanArray6;
      boolean[][] booleanArray7 = new boolean[9][9];
      booleanArray7[0] = booleanArray3;
      booleanArray7[1] = booleanArray3;
      booleanArray7[2] = booleanArray3;
      booleanArray7[3] = booleanArray3;
      booleanArray7[4] = booleanArray3;
      booleanArray7[5] = booleanArray3;
      booleanArray7[6] = booleanArray3;
      booleanArray7[7] = booleanArray3;
      booleanArray7[8] = booleanArray3;
      booleanArray1[4] = booleanArray7;
      boolean[][] booleanArray8 = new boolean[8][9];
      booleanArray8[0] = booleanArray3;
      booleanArray8[1] = booleanArray3;
      booleanArray8[2] = booleanArray3;
      booleanArray8[3] = booleanArray3;
      booleanArray8[4] = booleanArray3;
      booleanArray8[5] = booleanArray3;
      booleanArray8[6] = booleanArray3;
      boolean[] booleanArray9 = new boolean[9];
      booleanArray9[0] = true;
      booleanArray9[1] = false;
      booleanArray9[2] = false;
      booleanArray9[3] = true;
      booleanArray9[4] = true;
      booleanArray9[5] = false;
      booleanArray9[6] = true;
      booleanArray9[7] = true;
      booleanArray9[8] = false;
      booleanArray8[7] = booleanArray9;
      booleanArray1[5] = booleanArray8;
      booleanArray0[0] = booleanArray1;
      boolean[][][] booleanArray10 = new boolean[1][4][2];
      booleanArray10[0] = booleanArray8;
      booleanArray0[1] = booleanArray10;
      boolean[][][] booleanArray11 = new boolean[8][0][3];
      boolean[][] booleanArray12 = new boolean[2][6];
      booleanArray12[0] = booleanArray3;
      booleanArray12[1] = booleanArray3;
      booleanArray11[0] = booleanArray12;
      booleanArray11[1] = booleanArray2;
      booleanArray11[2] = booleanArray5;
      booleanArray11[3] = booleanArray8;
      booleanArray11[4] = booleanArray5;
      booleanArray11[5] = booleanArray4;
      booleanArray11[6] = booleanArray6;
      booleanArray11[7] = booleanArray7;
      booleanArray0[2] = booleanArray11;
      boolean[][][] booleanArray13 = new boolean[6][7][6];
      booleanArray13[0] = booleanArray7;
      booleanArray13[1] = booleanArray7;
      booleanArray13[2] = booleanArray4;
      booleanArray13[3] = booleanArray4;
      booleanArray13[4] = booleanArray6;
      booleanArray13[5] = booleanArray2;
      booleanArray0[3] = booleanArray13;
      boolean[][][] booleanArray14 = new boolean[6][3][8];
      booleanArray14[0] = booleanArray5;
      booleanArray14[1] = booleanArray7;
      booleanArray14[2] = booleanArray8;
      booleanArray14[3] = booleanArray6;
      booleanArray14[4] = booleanArray8;
      booleanArray14[5] = booleanArray5;
      booleanArray0[4] = booleanArray14;
      boolean[][][] booleanArray15 = new boolean[4][7][0];
      booleanArray15[0] = booleanArray4;
      booleanArray15[1] = booleanArray7;
      booleanArray15[2] = booleanArray4;
      booleanArray15[3] = booleanArray8;
      booleanArray0[5] = booleanArray15;
      boolean[][][] booleanArray16 = new boolean[9][4][0];
      booleanArray16[0] = booleanArray5;
      booleanArray16[1] = booleanArray2;
      boolean[][] booleanArray17 = new boolean[4][1];
      booleanArray17[0] = booleanArray9;
      booleanArray17[1] = booleanArray3;
      booleanArray17[2] = booleanArray3;
      boolean[] booleanArray18 = new boolean[0];
      booleanArray17[3] = booleanArray18;
      booleanArray16[2] = booleanArray17;
      booleanArray16[3] = booleanArray5;
      booleanArray16[4] = booleanArray4;
      booleanArray16[5] = booleanArray5;
      booleanArray16[6] = booleanArray5;
      booleanArray16[7] = booleanArray6;
      booleanArray16[8] = booleanArray4;
      booleanArray0[6] = booleanArray16;
      boolean[][][] booleanArray19 = new boolean[0][8][0];
      booleanArray0[7] = booleanArray19;
      ArrayUtils.fill(booleanArray0, true);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      ArrayUtils.getSubListIndex(objectArray0, objectArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.deltaDecode((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.normalize((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      ArrayUtils.subArray(objectArray0, (-1886), 521);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)117;
      int[] intArray0 = ArrayUtils.gapDecode(byteArray0);
      ArrayUtils.gapEncodeList(intArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 160.3896598821;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.1;
      doubleArray1[4] = (-2290.0260147);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 1.0E9;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = 1377.289;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 160.3896598821;
      doubleArray2[1] = (-2290.0260147);
      doubleArray2[2] = (-2290.0260147);
      doubleArray2[3] = (-2290.0260147);
      doubleArray2[4] = 1.0E9;
      doubleArray2[5] = 1377.289;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 160.3896598821;
      doubleArray3[1] = 1.0E9;
      doubleArray3[2] = 570.7986058066;
      doubleArray0[2] = doubleArray3;
      ArrayUtils.copy(doubleArray0);
      float[] floatArray0 = new float[0];
      ArrayUtils.toDouble(floatArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((short)1071);
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-2433));
      shortArray0[1] = short1;
      Short short2 = new Short((short) shortArray0[0]);
      shortArray0[2] = short2;
      Short short3 = new Short((short)1071);
      Short short4 = new Short((short)0);
      shortArray0[4] = short4;
      Short short5 = new Short((short)980);
      shortArray0[5] = short5;
      ArrayUtils.toPrimitive(shortArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.asPrimitiveIntArray((Collection<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int[][] intArray0 = new int[1][2];
      int[] intArray1 = new int[9];
      intArray1[0] = 0;
      intArray1[1] = 7;
      intArray1[2] = 7;
      intArray1[3] = 2015;
      intArray1[4] = 4727;
      intArray1[5] = 0;
      intArray1[6] = (-705);
      intArray1[7] = 0;
      intArray1[8] = 423;
      intArray0[0] = intArray1;
      ArrayUtils.toString(intArray0);
      ArrayUtils.getSubListIndex((Object[]) intArray0, (Object[]) intArray0);
      Character[] characterArray0 = new Character[5];
      char char0 = '-';
      Character character0 = Character.valueOf('-');
      characterArray0[0] = character0;
      Character character1 = new Character(char0);
      characterArray0[1] = character1;
      char char1 = 's';
      Character character2 = Character.valueOf('s');
      characterArray0[2] = character2;
      Character.valueOf('s');
      Character character3 = Character.valueOf(char1);
      characterArray0[4] = character3;
      ArrayUtils.toPrimitive(characterArray0, char1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.asList(intArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byte[] byteArray0 = new byte[0];
      int[] intArray1 = ArrayUtils.deltaDecode(byteArray0);
      int[][] intArray2 = new int[6][8];
      intArray2[0] = intArray1;
      intArray2[1] = intArray1;
      intArray2[2] = intArray1;
      intArray2[3] = intArray0;
      intArray2[4] = intArray0;
      intArray2[5] = intArray1;
      ArrayUtils.equalContents(intArray2, intArray2);
      boolean[][] booleanArray0 = new boolean[1][2];
      boolean[] booleanArray1 = new boolean[0];
      booleanArray0[0] = booleanArray1;
      ArrayUtils.toString(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.compareBooleanArrays(booleanArray0, booleanArray0);
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(0);
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      doubleArray0[1] = double1;
      Double double2 = new Double(0);
      doubleArray0[2] = double2;
      Double double3 = Double.valueOf((double) 0);
      doubleArray0[3] = double3;
      Double double4 = new Double(0.0);
      doubleArray0[4] = double4;
      Double double5 = new Double(0.0);
      doubleArray0[5] = double5;
      Double.sum((double) doubleArray0[5], (-187.6876));
      ArrayUtils.toPrimitive(doubleArray0, (-969.5134647863327));
      byte[] byteArray0 = new byte[0];
      ArrayUtils.gapDecode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-4216);
      intArray0[1] = (-4216);
      intArray0[2] = 3085;
      int[] intArray1 = new int[3];
      intArray1[0] = 3085;
      intArray1[1] = 3085;
      intArray1[2] = 3085;
      ArrayUtils.equalContents(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 777.017304809622;
      doubleArray0[1] = 649.13;
      double[] doubleArray1 = ArrayUtils.normalize(doubleArray0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 777.017304809622;
      objectArray0[1] = (Object) 777.017304809622;
      objectArray0[2] = (Object) 777.017304809622;
      objectArray0[3] = (Object) 649.13;
      Object object0 = new Object();
      objectArray0[4] = object0;
      Predicate<Pair> predicate0 = (Predicate<Pair>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(predicate0).test(nullable(edu.stanford.nlp.util.Pair.class));
      ArrayUtils.getSubListIndex(objectArray0, objectArray0, predicate0);
      double[][][][] doubleArray2 = new double[3][6][1][8];
      double[][][] doubleArray3 = new double[0][0][4];
      doubleArray2[0] = doubleArray3;
      double[][][] doubleArray4 = new double[2][0][5];
      double[][] doubleArray5 = new double[6][4];
      doubleArray5[0] = doubleArray0;
      doubleArray5[1] = doubleArray0;
      doubleArray5[2] = doubleArray0;
      doubleArray5[3] = doubleArray1;
      doubleArray5[4] = doubleArray1;
      doubleArray5[5] = doubleArray1;
      doubleArray4[0] = doubleArray5;
      double[][] doubleArray6 = new double[3][7];
      double[] doubleArray7 = new double[0];
      doubleArray6[0] = doubleArray7;
      doubleArray6[1] = doubleArray1;
      doubleArray6[0] = doubleArray1;
      doubleArray4[1] = doubleArray6;
      doubleArray2[1] = doubleArray4;
      double[][][] doubleArray8 = new double[3][9][0];
      doubleArray8[0] = doubleArray5;
      doubleArray8[1] = doubleArray5;
      doubleArray8[2] = doubleArray6;
      doubleArray2[2] = doubleArray8;
      ArrayUtils.fill(doubleArray2, 649.13);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int[][] intArray0 = new int[1][7];
      int[] intArray1 = new int[6];
      intArray1[0] = 93;
      intArray1[1] = 115;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      intArray1[2] = 1;
      intArray1[3] = 110;
      intArray1[4] = 914;
      intArray1[5] = (-323);
      intArray0[0] = intArray1;
      ArrayUtils.toString(intArray0);
      Double[] doubleArray0 = new Double[0];
      ArrayUtils.toPrimitive(doubleArray0);
      int[] intArray2 = new int[5];
      intArray2[0] = (-323);
      intArray2[1] = (-323);
      intArray2[2] = 1;
      intArray2[3] = 577;
      intArray2[4] = 110;
      // Undeclared exception!
      try { 
        ArrayUtils.gapEncode(intArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must be sorted!
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 181;
      intArray0[0] = 181;
      intArray0[1] = 734;
      int int1 = (-164);
      intArray0[2] = (-164);
      int int2 = 0;
      intArray0[3] = 0;
      int int3 = (-827);
      intArray0[4] = (-827);
      int int4 = 4;
      intArray0[5] = 4;
      int int5 = 2228;
      intArray0[6] = 2228;
      int int6 = 0;
      intArray0[7] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.deltaEncode(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must be sorted!
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      ArrayUtils.asImmutableSet(objectArray0);
      double[] doubleArray0 = new double[0];
      ArrayUtils.toString(doubleArray0, "#lsAL\"y$d");
      Character[] characterArray0 = new Character[9];
      char char0 = '6';
      Character character0 = Character.valueOf('6');
      characterArray0[0] = character0;
      char char1 = ']';
      Character character1 = Character.valueOf(']');
      characterArray0[1] = character1;
      Character character2 = new Character(char1);
      characterArray0[2] = character2;
      Character character3 = new Character('8');
      characterArray0[3] = character3;
      Character character4 = new Character(char1);
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('F');
      characterArray0[5] = character5;
      Character character6 = new Character('K');
      characterArray0[6] = character6;
      Character character7 = Character.valueOf(char0);
      characterArray0[7] = character7;
      Character character8 = new Character('A');
      characterArray0[8] = character8;
      ArrayUtils.toPrimitive(characterArray0);
      ArrayUtils.removeAt(doubleArray0, 0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      ArrayUtils.toPrimitive(shortArray0);
      double[][][] doubleArray0 = new double[7][0][1];
      double[][] doubleArray1 = new double[2][0];
      double[] doubleArray2 = new double[0];
      doubleArray1[0] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (-1276.3943);
      doubleArray3[1] = (-670.2);
      doubleArray3[2] = (-3990.9);
      doubleArray1[1] = doubleArray3;
      doubleArray0[0] = doubleArray1;
      double[][] doubleArray4 = new double[6][8];
      doubleArray4[0] = doubleArray2;
      doubleArray4[1] = doubleArray3;
      doubleArray4[2] = doubleArray3;
      doubleArray4[3] = doubleArray2;
      doubleArray4[4] = doubleArray3;
      doubleArray4[5] = doubleArray3;
      doubleArray0[1] = doubleArray4;
      double[][] doubleArray5 = new double[6][7];
      doubleArray5[0] = doubleArray2;
      doubleArray5[1] = doubleArray2;
      doubleArray5[2] = doubleArray3;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = (-3990.9);
      doubleArray6[1] = (-3990.9);
      doubleArray6[2] = 1640.7238666;
      doubleArray5[3] = doubleArray6;
      doubleArray5[4] = doubleArray3;
      double[] doubleArray7 = new double[0];
      doubleArray5[5] = doubleArray7;
      doubleArray0[2] = doubleArray5;
      double[][] doubleArray8 = new double[1][8];
      doubleArray8[0] = doubleArray6;
      doubleArray0[3] = doubleArray8;
      double[][] doubleArray9 = new double[4][6];
      doubleArray9[0] = doubleArray6;
      doubleArray9[1] = doubleArray7;
      doubleArray9[2] = doubleArray2;
      doubleArray9[3] = doubleArray6;
      doubleArray0[4] = doubleArray9;
      double[][] doubleArray10 = new double[8][6];
      doubleArray10[0] = doubleArray2;
      doubleArray10[1] = doubleArray3;
      doubleArray10[2] = doubleArray6;
      doubleArray10[3] = doubleArray2;
      doubleArray10[4] = doubleArray7;
      doubleArray10[5] = doubleArray2;
      doubleArray10[6] = doubleArray7;
      doubleArray10[7] = doubleArray7;
      doubleArray0[5] = doubleArray10;
      double[][] doubleArray11 = new double[4][6];
      doubleArray11[0] = doubleArray3;
      doubleArray11[1] = doubleArray3;
      doubleArray11[2] = doubleArray2;
      doubleArray11[3] = doubleArray2;
      doubleArray0[6] = doubleArray11;
      ArrayUtils.fill(doubleArray0, 551.346016);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.compareArrays((Byte[]) null, (Byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ArrayUtils.removeAt((Object[]) null, 3035);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.gapDecode(byteArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.getSubListIndex((Object[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ArrayUtils.toPrimitive((Short[]) null, (short)0);
      Proxy.Type[] proxy_TypeArray0 = new Proxy.Type[3];
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      proxy_TypeArray0[0] = proxy_Type0;
      Proxy.Type proxy_Type1 = Proxy.Type.HTTP;
      proxy_TypeArray0[1] = proxy_Type1;
      Proxy.Type proxy_Type2 = Proxy.Type.HTTP;
      proxy_TypeArray0[2] = proxy_Type2;
      ArrayUtils.contains(proxy_TypeArray0, proxy_Type1);
      ArrayUtils.toPrimitive((Short[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-104);
      byteArray0[7] = (byte) (-2);
      ArrayUtils.gapDecodeList(byteArray0, (int) (byte)0, 0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte2 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-3);
      byte byte3 = (byte)1;
      byteArray0[5] = (byte)1;
      byte byte4 = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-67);
      byteArray0[8] = (byte) (-119);
      int int0 = 279;
      // Undeclared exception!
      try { 
        ArrayUtils.gapDecodeList(byteArray0, (int) (byte)0, 279);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)102;
      // Undeclared exception!
      try { 
        ArrayUtils.gapDecodeList(byteArray0, 1, (int) (byte)102);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = 2810;
      intArray0[2] = 1029;
      ArrayUtils.asList(intArray0);
      ArrayUtils.toPrimitive((Double[]) null);
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 1029;
      integerArray0[3] = (Integer) 1029;
      integerArray0[4] = (Integer) 2810;
      Integer integer0 = new Integer(541);
      integerArray0[5] = integer0;
      integerArray0[6] = (Integer) 2810;
      integerArray0[7] = (Integer) 1029;
      Integer.min(int0, 5);
      integerArray0[8] = (Integer) 0;
      ArrayUtils.toPrimitive(integerArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-2562);
      intArray0[1] = (-1413);
      intArray0[2] = 2915;
      intArray0[3] = (-3582);
      intArray0[4] = (-1031);
      intArray0[5] = (-729);
      intArray0[6] = 988;
      intArray0[7] = (-2724);
      intArray0[8] = 0;
      ArrayUtils.equalContents(intArray0, intArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte)115;
      ArrayUtils.deltaDecodeList(byteArray0);
  }
  @Ignore
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = new Object[8];
      Object object0 = new Object();
      objectArray1[0] = object0;
      Object object1 = new Object();
      objectArray1[1] = object1;
      Object object2 = new Object();
      objectArray1[2] = object2;
      Object object3 = new Object();
      objectArray1[3] = object3;
      Object object4 = new Object();
      objectArray1[4] = object4;
      Object object5 = new Object();
      objectArray1[5] = object5;
      Object object6 = new Object();
      objectArray1[6] = object6;
      Object object7 = new Object();
      objectArray1[7] = object7;
      // Undeclared exception!
      ArrayUtils.getSubListIndex(objectArray0, objectArray1);
  }
  @Ignore
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      ArrayUtils.subArray(objectArray0, (-1886), 521);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)117;
      ArrayUtils.gapDecode(byteArray0);
      Long[] longArray0 = new Long[0];
      ArrayUtils.toPrimitive(longArray0, (long) (-1886));
      // Undeclared exception!
      ArrayUtils.getSubListIndex((Object[]) longArray0, objectArray0);
  }
  
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      ArrayUtils.subArray(objectArray0, 6, 0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)2;
      ArrayUtils.gapDecode(byteArray0, 4, (int) (byte) (-43));
      ArrayUtils.copy((float[][][]) null);
      boolean[][][][] booleanArray0 = new boolean[5][6][3][3];
      boolean[][][] booleanArray1 = new boolean[2][9][2];
      boolean[][] booleanArray2 = new boolean[5][2];
      boolean[] booleanArray3 = new boolean[7];
      booleanArray3[0] = false;
      booleanArray3[1] = false;
      booleanArray3[2] = false;
      booleanArray3[3] = false;
      booleanArray3[4] = false;
      booleanArray3[5] = false;
      booleanArray3[6] = false;
      booleanArray2[0] = booleanArray3;
      boolean[] booleanArray4 = new boolean[3];
      booleanArray4[0] = false;
      booleanArray4[1] = false;
      booleanArray4[2] = false;
      booleanArray2[1] = booleanArray4;
      boolean[] booleanArray5 = new boolean[9];
      booleanArray5[0] = false;
      booleanArray5[1] = false;
      booleanArray5[2] = false;
      booleanArray5[3] = false;
      booleanArray5[4] = false;
      booleanArray5[5] = false;
      booleanArray5[6] = false;
      booleanArray5[7] = false;
      booleanArray5[8] = false;
      booleanArray2[2] = booleanArray5;
      boolean[] booleanArray6 = new boolean[5];
      booleanArray6[0] = false;
      booleanArray6[1] = false;
      booleanArray6[2] = false;
      booleanArray6[3] = false;
      booleanArray6[4] = false;
      booleanArray2[3] = booleanArray6;
      boolean[] booleanArray7 = new boolean[2];
      booleanArray7[0] = true;
      booleanArray7[1] = false;
      booleanArray2[4] = booleanArray7;
      booleanArray1[0] = booleanArray2;
      boolean[][] booleanArray8 = new boolean[6][9];
      booleanArray8[0] = booleanArray4;
      booleanArray8[1] = booleanArray6;
      booleanArray8[2] = booleanArray3;
      booleanArray8[3] = booleanArray5;
      booleanArray8[4] = booleanArray3;
      booleanArray8[5] = booleanArray3;
      booleanArray1[1] = booleanArray8;
      booleanArray0[0] = booleanArray1;
      boolean[][][] booleanArray9 = new boolean[6][3][0];
      booleanArray9[0] = booleanArray8;
      booleanArray9[1] = booleanArray2;
      booleanArray9[2] = booleanArray8;
      booleanArray9[3] = booleanArray8;
      booleanArray9[4] = booleanArray2;
      booleanArray9[5] = booleanArray2;
      booleanArray0[1] = booleanArray9;
      boolean[][][] booleanArray10 = new boolean[7][1][7];
      booleanArray10[0] = booleanArray8;
      booleanArray10[1] = booleanArray8;
      booleanArray10[2] = booleanArray2;
      booleanArray10[3] = booleanArray8;
      booleanArray10[4] = booleanArray2;
      booleanArray10[5] = booleanArray8;
      booleanArray10[6] = booleanArray2;
      booleanArray0[2] = booleanArray10;
      boolean[][][] booleanArray11 = new boolean[1][3][6];
      booleanArray11[0] = booleanArray2;
      booleanArray0[3] = booleanArray11;
      boolean[][][] booleanArray12 = new boolean[4][3][8];
      booleanArray12[0] = booleanArray2;
      booleanArray12[1] = booleanArray8;
      booleanArray12[2] = booleanArray8;
      booleanArray12[3] = booleanArray2;
      booleanArray0[4] = booleanArray12;
      ArrayUtils.fill(booleanArray0, false);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean[][][] booleanArrayArrayArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.fill((boolean[][][]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ArrayUtils.toPrimitive((Character[]) null, 'x');
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double((-1.0));
      doubleArray0[0] = double0;
      Double double1 = new Double(3194.559147974731);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      doubleArray0[2] = double2;
      Double double3 = new Double((-1007.337801911));
      doubleArray0[3] = double3;
      Double double4 = new Double(1.0);
      doubleArray0[4] = double4;
      Double double5 = new Double(2371.526667407426);
      doubleArray0[5] = double5;
      ArrayUtils.toPrimitive(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.concatenate((ArrayUtils[]) null, (ArrayUtils[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      ArrayUtils.equalContents(intArray0, intArray0);
      ArrayUtils.gapEncode(intArray0);
      boolean[][][][] booleanArray0 = new boolean[0][3][1][7];
      ArrayUtils.fill(booleanArray0, true);
      Long[] longArray0 = new Long[4];
      Long long0 = new Long(0);
      longArray0[0] = long0;
      Long long1 = new Long((long) longArray0[0]);
      longArray0[1] = long1;
      Long long2 = new Long((long) longArray0[1]);
      longArray0[2] = long2;
      Long.getLong("fin", (Long) null);
      Long.toUnsignedString((long) 0);
      longArray0[3] = null;
      ArrayUtils.toPrimitive(longArray0, (long) 0);
      ArrayUtils.toPrimitive((Character[]) null);
      // Undeclared exception!
      try { 
        ArrayUtils.toString((boolean[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-4882.21513);
      ArrayUtils.normalize(doubleArray0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-4882.21513);
      objectArray0[1] = (Object) (-4882.21513);
      objectArray0[2] = (Object) (-4882.21513);
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = (Object) (-4882.21513);
      objectArray1[1] = (Object) (-4882.21513);
      objectArray1[2] = (Object) (-4882.21513);
      objectArray1[3] = (Object) (-4882.21513);
      objectArray1[4] = (Object) (-4882.21513);
      Predicate<Pair> predicate0 = (Predicate<Pair>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(predicate0).test(nullable(edu.stanford.nlp.util.Pair.class));
      ArrayUtils.getSubListIndex(objectArray0, objectArray1, predicate0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Short[] shortArray0 = new Short[3];
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      shortArray0[0] = short1;
      Short short2 = new Short((short)0);
      shortArray0[1] = short2;
      Short.toUnsignedLong((short)0);
      Short short3 = new Short((short)288);
      Short.toUnsignedLong((short) (-2475));
      shortArray0[2] = short3;
      ArrayUtils.toPrimitive(shortArray0, (short)848);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) short0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) short0;
      intArray0[3] = (-3431);
      Short.toUnsignedLong((short)288);
      Short.toUnsignedLong((short)0);
      intArray0[4] = 0;
      intArray0[5] = (int) short0;
      Short.toUnsignedInt((short)1125);
      intArray0[6] = 0;
      intArray0[7] = (int) (short)shortArray0[2];
      ArrayUtils.asList(intArray0);
      float[] floatArray0 = new float[0];
      ArrayUtils.copy(floatArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.fill((double[][]) null, (-3100.75));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)8;
      ArrayUtils.gapDecode(byteArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)112;
      doubleArray0[1] = (-1573.3092024221917);
      // Undeclared exception!
      try { 
        ArrayUtils.to2D(doubleArray0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      int[] intArray0 = ArrayUtils.asPrimitiveIntArray(arrayList0);
      ArrayUtils.gapEncode(intArray0);
      Character[] characterArray0 = new Character[2];
      char char0 = 'i';
      Character character0 = Character.valueOf('i');
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      characterArray0[1] = character1;
      ArrayUtils.toPrimitive(characterArray0, 'w');
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-807.2));
      doubleArray0[0] = double0;
      Double double1 = new Double(1.0);
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      doubleArray0[2] = double2;
      Double double3 = new Double(char0);
      doubleArray0[3] = double3;
      Double double4 = new Double(char0);
      ArrayUtils.contains(doubleArray0, double4);
      ArrayUtils.removeAt((Object[]) doubleArray0, 2953);
      float[][][] floatArray0 = new float[5][1][8];
      float[][] floatArray1 = new float[5][0];
      float[] floatArray2 = new float[2];
      floatArray2[0] = (float) 'w';
      floatArray2[1] = (float) 'i';
      floatArray1[0] = floatArray2;
      float[] floatArray3 = new float[8];
      floatArray3[0] = (float) 'i';
      floatArray3[1] = (float) 2953;
      floatArray3[2] = (float) 2953;
      floatArray3[3] = (float) 'w';
      floatArray3[4] = (float) 'w';
      floatArray3[5] = (float) 2953;
      floatArray3[6] = (float) char0;
      floatArray3[7] = (float) char0;
      floatArray1[1] = floatArray3;
      float[] floatArray4 = new float[6];
      floatArray4[0] = (float) char0;
      floatArray4[1] = (float) char0;
      floatArray4[2] = (float) char0;
      floatArray4[3] = (float) 'w';
      floatArray4[4] = (float) 'i';
      floatArray4[5] = (float) char0;
      floatArray1[2] = floatArray4;
      float[] floatArray5 = new float[2];
      floatArray5[0] = (float) 2953;
      floatArray5[1] = (float) char0;
      floatArray1[3] = floatArray5;
      float[] floatArray6 = new float[7];
      floatArray6[0] = (float) 'i';
      floatArray6[1] = (float) 'i';
      floatArray6[2] = (float) char0;
      floatArray6[3] = (float) 'i';
      floatArray6[4] = (float) 'i';
      floatArray6[5] = (float) 'i';
      floatArray6[6] = (float) 'i';
      floatArray1[4] = floatArray6;
      floatArray0[0] = floatArray1;
      float[][] floatArray7 = new float[2][1];
      floatArray7[0] = floatArray3;
      floatArray7[1] = floatArray5;
      floatArray0[1] = floatArray7;
      float[][] floatArray8 = new float[0][9];
      floatArray0[2] = floatArray8;
      float[][] floatArray9 = new float[7][4];
      floatArray9[0] = floatArray5;
      floatArray9[1] = floatArray5;
      floatArray9[2] = floatArray6;
      floatArray9[3] = floatArray6;
      float[] floatArray10 = new float[9];
      floatArray10[0] = (float) char0;
      floatArray10[1] = (float) 'i';
      floatArray10[2] = (float) 'w';
      floatArray10[3] = (float) 'w';
      floatArray10[4] = (float) char0;
      floatArray10[5] = (float) 'i';
      floatArray10[6] = (float) char0;
      floatArray10[7] = (float) char0;
      floatArray10[8] = (float) 2953;
      floatArray9[4] = floatArray10;
      floatArray9[5] = floatArray3;
      floatArray9[6] = floatArray4;
      floatArray0[3] = floatArray9;
      float[][] floatArray11 = new float[3][0];
      floatArray11[0] = floatArray10;
      floatArray11[1] = floatArray10;
      float[] floatArray12 = new float[1];
      floatArray12[0] = (float) char0;
      floatArray11[2] = floatArray12;
      floatArray0[4] = floatArray11;
      ArrayUtils.copy(floatArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 1588;
      ArrayUtils.gapEncode(intArray0);
      ArrayUtils.toPrimitive((Short[]) null);
      CoreLabel[] coreLabelArray0 = new CoreLabel[4];
      CoreLabelTokenFactory coreLabelTokenFactory0 = new CoreLabelTokenFactory(true);
      CoreLabel coreLabel0 = coreLabelTokenFactory0.makeToken("7<oo2&; *-[0wO/]", 0, (-1085));
      coreLabelArray0[0] = coreLabel0;
      CoreLabel coreLabel1 = new CoreLabel((Label) coreLabel0);
      coreLabelArray0[1] = coreLabel1;
      CoreLabel coreLabel2 = CoreLabel.wordFromString("gdZ0G>6zH])ql");
      coreLabelArray0[2] = coreLabel2;
      CoreLabel coreLabel3 = new CoreLabel((Label) coreLabel1);
      coreLabelArray0[3] = coreLabel3;
      ArrayUtils.concatenate(coreLabelArray0, coreLabelArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.deltaEncodeList(intArray0);
      Character[] characterArray0 = new Character[6];
      char char0 = 'h';
      Character character0 = Character.valueOf('h');
      characterArray0[0] = character0;
      char char1 = 'm';
      Character character1 = Character.valueOf('m');
      characterArray0[1] = character1;
      Character character2 = new Character(char0);
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('h');
      characterArray0[3] = character3;
      char[] charArray0 = new char[4];
      charArray0[0] = 'h';
      charArray0[2] = char0;
      charArray0[3] = char0;
      // Undeclared exception!
      try { 
        Character.toChars((int) char1, charArray0, (-2557));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2557
         //
         verifyException("java.lang.Character", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 60L;
      ArrayUtils.copy(longArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte) (-81);
      byteArray0[7] = (byte) (-99);
      ArrayUtils.gapDecode(byteArray0, 0, (int) (byte) (-90));
      Long[] longArray1 = new Long[0];
      ArrayUtils.toPrimitive(longArray1, (-1L));
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (float) 60L;
      floatArray0[2] = (float) (byte)85;
      floatArray0[3] = (float) (byte)85;
      floatArray0[4] = (float) 0;
      floatArray0[5] = 0.0F;
      ArrayUtils.toDouble(floatArray0);
      Character[] characterArray0 = new Character[5];
      char char0 = '%';
      Character character0 = Character.valueOf('%');
      characterArray0[0] = character0;
      Character character1 = new Character('%');
      characterArray0[1] = character1;
      Character character2 = new Character(char0);
      characterArray0[2] = character2;
      Character character3 = new Character('%');
      characterArray0[3] = character3;
      Character character4 = new Character('I');
      characterArray0[4] = character4;
      ArrayUtils.toPrimitive(characterArray0, '=');
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = 1058;
      ArrayUtils.gapDecode(byteArray0, 1137, 1058);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        ArrayUtils.toDoubleArray(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)115;
      // Undeclared exception!
      try { 
        ArrayUtils.gapDecodeList(byteArray0, (int) (byte)115, 144);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 115
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int[][] intArray0 = new int[5][8];
      int[] intArray1 = new int[1];
      intArray1[0] = 7;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      intArray2[0] = 7;
      intArray2[1] = 7;
      intArray2[2] = 418;
      intArray2[3] = 7;
      intArray2[4] = 7;
      intArray2[5] = 7;
      intArray2[6] = 972;
      intArray2[7] = (-2575);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[1];
      intArray3[0] = 7;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[7];
      intArray4[0] = 418;
      intArray4[1] = 7;
      intArray4[2] = 418;
      intArray4[3] = 418;
      intArray4[4] = (-2575);
      intArray4[5] = 7;
      intArray4[6] = (-2575);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[5];
      intArray5[0] = 418;
      intArray5[1] = (-2575);
      intArray5[2] = 418;
      intArray5[3] = (-2575);
      intArray5[4] = 0;
      intArray0[4] = intArray5;
      ArrayUtils.equalContents(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      ArrayUtils.flatten(doubleArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 1441;
      intArray0[1] = 383;
      intArray0[2] = 1094;
      intArray0[3] = 4;
      intArray0[4] = 555;
      intArray0[5] = (-9241);
      intArray0[6] = 648;
      intArray0[7] = 49;
      intArray0[8] = 1946;
      ArrayUtils.equalContents(intArray0, intArray0);
      int[][] intArray1 = new int[0][7];
      ArrayUtils.equalContents(intArray1, intArray1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-279);
      intArray0[1] = 1059;
      List<Integer> list0 = ArrayUtils.asList(intArray0);
      ArrayUtils.asPrimitiveIntArray(list0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1059;
      doubleArray0[1] = (double) 1059;
      doubleArray0[2] = (double) (-279);
      // Undeclared exception!
      try { 
        ArrayUtils.to2D(doubleArray0, 1059, 1059);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      ArrayUtils.subArray(objectArray0, 7, 7);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1915;
      intArray0[1] = (-1177);
      intArray0[2] = 3376;
      intArray0[3] = 0;
      intArray0[4] = 49;
      intArray0[5] = 3087;
      intArray0[6] = (-2705);
      intArray0[7] = 0;
      intArray0[8] = 160;
      ArrayUtils.copy(intArray0);
      double[][] doubleArrayArray0 = null;
      ArrayUtils.copy((double[][]) null);
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Filters.DisjFilter<Object> filters_DisjFilter0 = new Filters.DisjFilter<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) filters_DisjFilter0;
      Filters.ConjFilter<Object> filters_ConjFilter0 = new Filters.ConjFilter<Object>(predicateArray0);
      arrayList0.add((Predicate<Object>) filters_ConjFilter0);
      Filters.DisjFilter<Object> filters_DisjFilter1 = new Filters.DisjFilter<Object>(arrayList0);
      // Undeclared exception!
      try { 
        ArrayUtils.filter((List<Double>[]) null, (Predicate<? super List<Double>>) filters_DisjFilter1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)0;
      ArrayUtils.deltaDecode(byteArray0, (int) (byte)44, 1984);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.compareBooleanArrays(booleanArray0, booleanArray0);
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(0);
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      doubleArray0[1] = double1;
      Double double2 = new Double(0);
      doubleArray0[2] = double2;
      Double double3 = Double.valueOf((double) 0);
      doubleArray0[3] = double3;
      Double double4 = new Double(0.0);
      doubleArray0[4] = double4;
      Double double5 = new Double(0.0);
      doubleArray0[5] = double5;
      ArrayUtils.toPrimitive(doubleArray0, (-969.5134647863327));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.compareBooleanArrays(booleanArray0, booleanArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.to2D((double[]) null, 754);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      Double double1 = new Double((-3.4587292534E10));
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      doubleArray0[2] = double2;
      Double double3 = new Double(3.0);
      doubleArray0[3] = double3;
      Double double4 = new Double(1383.33057445531);
      doubleArray0[4] = double4;
      Double double5 = new Double(3.0);
      ArrayUtils.contains(doubleArray0, double5);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1137;
      ArrayUtils.deltaEncodeList(intArray0);
      boolean[][] booleanArray0 = new boolean[6][0];
      boolean[] booleanArray1 = new boolean[5];
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      booleanArray0[0] = booleanArray1;
      boolean[] booleanArray2 = new boolean[6];
      booleanArray2[0] = true;
      booleanArray2[1] = true;
      booleanArray2[2] = true;
      booleanArray2[3] = true;
      booleanArray2[4] = true;
      booleanArray2[5] = true;
      booleanArray0[1] = booleanArray2;
      boolean[] booleanArray3 = new boolean[1];
      booleanArray3[0] = true;
      booleanArray0[2] = booleanArray3;
      boolean[] booleanArray4 = new boolean[7];
      booleanArray4[0] = true;
      booleanArray4[1] = true;
      booleanArray4[2] = true;
      booleanArray4[3] = true;
      booleanArray4[4] = true;
      booleanArray4[5] = true;
      booleanArray4[6] = true;
      booleanArray0[3] = booleanArray4;
      boolean[] booleanArray5 = new boolean[5];
      booleanArray5[0] = true;
      booleanArray5[1] = true;
      booleanArray5[2] = true;
      booleanArray5[3] = true;
      booleanArray5[4] = true;
      booleanArray0[4] = booleanArray5;
      boolean[] booleanArray6 = new boolean[7];
      booleanArray6[0] = true;
      booleanArray6[1] = true;
      booleanArray6[2] = true;
      booleanArray6[3] = true;
      booleanArray6[4] = false;
      booleanArray6[5] = true;
      booleanArray6[6] = true;
      booleanArray0[5] = booleanArray6;
      ArrayUtils.fill(booleanArray0, true);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      ArrayUtils.toDouble(intArray0);
      ArrayUtils.deltaEncodeList(intArray0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "$o'";
      stringArray0[1] = "w";
      stringArray0[2] = "4q[2d";
      stringArray0[3] = "Y1Itk~?Hk;6XhtMOy$%";
      stringArray0[4] = "";
      stringArray0[5] = "+n<=>`pyTW";
      stringArray0[6] = "*^CF3";
      stringArray0[7] = "edu.stanford.nlp.trees.SimpleTreeFactory";
      stringArray0[8] = "includeFullCRFInLOP";
      // Undeclared exception!
      try { 
        ArrayUtils.toDoubleArray(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-46);
      // Undeclared exception!
      try { 
        ArrayUtils.gapDecode(byteArray0, (int) (byte) (-46), 1600);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -46
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.flatten((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean[][] booleanArray0 = new boolean[5][7];
      boolean[] booleanArray1 = new boolean[4];
      booleanArray1[0] = true;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = true;
      booleanArray0[0] = booleanArray1;
      boolean[] booleanArray2 = new boolean[0];
      booleanArray0[1] = booleanArray2;
      boolean[] booleanArray3 = new boolean[0];
      booleanArray0[2] = booleanArray3;
      boolean[] booleanArray4 = new boolean[9];
      booleanArray4[0] = false;
      booleanArray4[1] = false;
      booleanArray4[2] = true;
      booleanArray4[3] = true;
      booleanArray4[4] = false;
      booleanArray4[5] = false;
      booleanArray4[6] = false;
      booleanArray4[7] = false;
      booleanArray4[8] = false;
      booleanArray0[3] = booleanArray4;
      boolean[] booleanArray5 = new boolean[1];
      booleanArray5[0] = false;
      booleanArray0[4] = booleanArray5;
      ArrayUtils.toString(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      Double double0 = new Double(673.8);
      ArrayUtils.contains(doubleArray0, double0);
      Short[] shortArray0 = new Short[7];
      short short0 = (short)4;
      Short short1 = new Short((short)4);
      shortArray0[0] = short1;
      Short short2 = new Short(short0);
      shortArray0[1] = short2;
      Short short3 = new Short((short)4);
      shortArray0[2] = short3;
      Short short4 = new Short((short)4);
      shortArray0[3] = short4;
      Short short5 = new Short(short0);
      shortArray0[4] = short5;
      Short short6 = new Short(short0);
      shortArray0[5] = short6;
      Short short7 = new Short(short0);
      Short.toUnsignedLong((short)0);
      shortArray0[6] = short7;
      ArrayUtils.toPrimitive(shortArray0, (short)1);
      Integer[] integerArray0 = new Integer[0];
      ArrayUtils.toPrimitive(integerArray0, 0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 7;
      intArray0[2] = 1823;
      intArray0[3] = 4325;
      ArrayUtils.deltaEncode(intArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 381.637;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 284.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1458.486166);
      doubleArray0[5] = (-351.607479554);
      double[] doubleArray1 = ArrayUtils.copy(doubleArray0);
      Character[] characterArray0 = new Character[0];
      ArrayUtils.toPrimitive(characterArray0, 'G');
      ArrayUtils.toString(doubleArray1, "wH]B$vqJRpKzz");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 950;
      intArray0[2] = 1145;
      intArray0[3] = 576;
      intArray0[4] = (-388);
      intArray0[5] = 1689;
      intArray0[6] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.gapEncode(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must be sorted!
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      ArrayUtils.removeAt(doubleArray0, 520);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 355L;
      longArray0[1] = 3178L;
      ArrayUtils.copy(longArray0);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) 3178L;
      ArrayUtils.removeAt(objectArray0, 0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 3178L;
      floatArray0[1] = (float) 0;
      ArrayUtils.toDouble(floatArray0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "5>^qORk t>_%MW";
      stringArray0[1] = "edu.stanford.nlp.util.ArrayUtils";
      stringArray0[2] = "-> ";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "SGD2QNhessSamples";
      stringArray0[6] = "maximised";
      ArrayUtils.concatenate(stringArray0, stringArray0);
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = new Byte[2];
      Byte byte0 = new Byte((byte) (-49));
      byteArray1[0] = byte0;
      Byte byte1 = new Byte((byte) (-49));
      byteArray1[1] = byte1;
      ArrayUtils.concatenate(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object[] objectArray1 = ArrayUtils.removeAt(objectArray0, 364);
      // Undeclared exception!
      try { 
        ArrayUtils.getSubListIndex(objectArray0, objectArray1, (Predicate<Pair>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int[][] intArray0 = new int[7][0];
      int[] intArray1 = new int[7];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = (-852);
      intArray1[3] = 1;
      intArray1[4] = (-2331);
      intArray1[5] = (-540);
      intArray1[6] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[6];
      intArray2[0] = 1;
      intArray2[1] = 1;
      intArray2[2] = (-2331);
      intArray2[3] = 0;
      intArray2[4] = 1;
      intArray2[5] = (-852);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[9];
      intArray3[0] = 0;
      intArray3[1] = 1;
      intArray3[2] = (-540);
      intArray3[3] = 1;
      intArray3[4] = 0;
      intArray3[5] = 1;
      intArray3[6] = 93;
      intArray3[7] = (-852);
      intArray3[8] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[3];
      intArray4[0] = 529;
      intArray4[1] = 0;
      intArray4[2] = (-361);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[0];
      intArray0[4] = intArray5;
      int[] intArray6 = new int[8];
      intArray6[0] = 93;
      intArray6[1] = 529;
      intArray6[2] = 93;
      intArray6[3] = (-540);
      intArray6[4] = (-540);
      intArray6[5] = 5;
      intArray6[6] = (-2331);
      intArray6[7] = 0;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[4];
      intArray7[0] = 1;
      intArray7[1] = (-361);
      intArray7[2] = 0;
      intArray7[3] = 0;
      intArray0[6] = intArray7;
      ArrayUtils.copy(intArray0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-456.88773);
      double double0 = 0.0;
      doubleArray0[4] = 0.0;
      double double1 = (-1149.64508);
      doubleArray0[5] = (-1149.64508);
      doubleArray0[6] = (-3.4587292534E10);
      ArrayUtils.removeAt(doubleArray0, 0);
      // Undeclared exception!
      try { 
        ArrayUtils.toString((boolean[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      ArrayUtils.getSubListIndex(objectArray0, objectArray0);
      double[][] doubleArray0 = new double[0][5];
      ArrayUtils.equals(doubleArray0, doubleArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 2001;
      intArray0[1] = 993;
      intArray0[2] = 0;
      intArray0[3] = 2000;
      intArray0[4] = 0;
      intArray0[5] = (-1);
      intArray0[6] = 0;
      intArray0[7] = 44;
      intArray0[8] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.gapEncodeList(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must be sorted!
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[][] doubleArrayArray0 = null;
      ArrayUtils.copy((double[][]) null);
      // Undeclared exception!
      try { 
        ArrayUtils.deltaDecodeList((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "9u&ecXz!f";
      stringArray0[3] = "";
      stringArray0[4] = "r/*@";
      stringArray0[5] = ",_v";
      // Undeclared exception!
      try { 
        ArrayUtils.toDoubleArray(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean[][] booleanArrayArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.toString((boolean[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      ArrayUtils.toPrimitive(shortArray0, (short)844);
      Supplier<List<Object>> supplier0 = (Supplier<List<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      Supplier<Map<Object, Integer>> supplier1 = (Supplier<Map<Object, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      HashIndex<Object> hashIndex0 = new HashIndex<Object>(supplier0, supplier1);
      ReaderIteratorFactory readerIteratorFactory0 = null;
      try {
        readerIteratorFactory0 = new ReaderIteratorFactory((Collection<?>) hashIndex0, "cU");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.HashIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 260;
      intArray0[1] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.gapEncode(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must be sorted!
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.deltaDecode(byteArray0, 3941, 3941);
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 3941;
      doubleArray1[1] = (double) 3941;
      doubleArray1[2] = (double) 3941;
      doubleArray1[3] = (double) 3941;
      doubleArray1[4] = (double) 3941;
      doubleArray1[5] = (double) 3941;
      doubleArray1[6] = 109.017427039;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 109.017427039;
      doubleArray2[1] = 109.017427039;
      doubleArray2[2] = (-2026.32138146);
      doubleArray2[3] = 109.017427039;
      doubleArray2[4] = 109.017427039;
      doubleArray0[1] = doubleArray2;
      ArrayUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        ArrayUtils.to2D(doubleArray0, 398, 412);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      float[][][] floatArray0 = new float[2][9][8];
      float[][] floatArray1 = new float[0][2];
      floatArray0[0] = floatArray1;
      float[][] floatArray2 = new float[6][4];
      float[] floatArray3 = new float[5];
      floatArray3[0] = (-1.0F);
      floatArray3[1] = (-528.992F);
      floatArray3[2] = 0.0F;
      floatArray3[3] = 1087.837F;
      floatArray3[4] = (-817.4F);
      floatArray2[0] = floatArray3;
      float[] floatArray4 = new float[0];
      floatArray2[1] = floatArray4;
      float[] floatArray5 = new float[5];
      floatArray5[0] = (-817.4F);
      floatArray5[1] = 0.0F;
      floatArray5[2] = 0.0F;
      floatArray5[3] = (-528.992F);
      floatArray5[4] = 0.0F;
      floatArray2[2] = floatArray5;
      float[] floatArray6 = new float[2];
      floatArray6[0] = 1087.837F;
      floatArray6[1] = (-331.0F);
      floatArray2[3] = floatArray6;
      float[] floatArray7 = new float[5];
      floatArray7[0] = (-331.0F);
      floatArray7[1] = (-1.0F);
      floatArray7[2] = 1087.837F;
      floatArray7[3] = 1087.837F;
      floatArray7[4] = (-331.0F);
      floatArray2[4] = floatArray7;
      float[] floatArray8 = new float[5];
      floatArray8[0] = (-817.4F);
      floatArray8[1] = (-528.992F);
      floatArray8[2] = 1087.837F;
      floatArray8[3] = 1177.769F;
      floatArray8[4] = (-817.4F);
      floatArray2[5] = floatArray8;
      floatArray0[1] = floatArray2;
      ArrayUtils.copy(floatArray0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int[][] intArray0 = new int[3][8];
      int[] intArray1 = new int[3];
      intArray1[0] = 521;
      intArray1[1] = (-5407);
      intArray1[2] = (-2065);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[6];
      intArray2[0] = (-2065);
      intArray2[1] = (-2065);
      intArray2[2] = (-5407);
      intArray2[3] = 521;
      intArray2[4] = (-5407);
      intArray2[5] = 521;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[7];
      intArray3[0] = (-2065);
      intArray3[1] = 974;
      intArray3[2] = (-5407);
      intArray3[3] = 521;
      intArray3[4] = (-5407);
      intArray3[5] = (-2065);
      intArray3[6] = 521;
      intArray0[2] = intArray3;
      ArrayUtils.toString(intArray0);
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-727.6429450539));
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      Double double2 = new Double((-5407));
      doubleArray0[2] = double2;
      Double double3 = new Double(521);
      doubleArray0[3] = double3;
      ArrayUtils.toPrimitive(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int[][] intArray0 = new int[1][2];
      int[] intArray1 = new int[9];
      intArray1[0] = 0;
      intArray1[1] = 7;
      intArray1[2] = 0;
      intArray1[3] = 2015;
      intArray1[4] = 4727;
      intArray1[5] = 0;
      intArray1[6] = (-705);
      intArray1[7] = 0;
      intArray1[8] = 423;
      intArray0[0] = intArray1;
      ArrayUtils.toString(intArray0);
      ArrayUtils.getSubListIndex((Object[]) intArray0, (Object[]) intArray0);
      Character[] characterArray0 = new Character[5];
      char char0 = '-';
      Character character0 = Character.valueOf('-');
      characterArray0[0] = character0;
      Character character1 = new Character(char0);
      characterArray0[1] = character1;
      char char1 = 's';
      Character character2 = Character.valueOf('s');
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('s');
      characterArray0[3] = character3;
      Character character4 = Character.valueOf(char1);
      characterArray0[4] = character4;
      ArrayUtils.toPrimitive(characterArray0, char1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int[][] intArray0 = new int[0][1];
      ArrayUtils.toString(intArray0);
      SimpleTree[] simpleTreeArray0 = new SimpleTree[8];
      SeqClassifierFlags seqClassifierFlags0 = new SeqClassifierFlags();
      CoreLabel coreLabel0 = seqClassifierFlags0.pad;
      Vector<Tree> vector0 = new Vector<Tree>();
      SimpleTree simpleTree0 = new SimpleTree(coreLabel0, vector0);
      simpleTreeArray0[0] = simpleTree0;
      SimpleTree simpleTree1 = new SimpleTree();
      simpleTreeArray0[1] = simpleTree1;
      SimpleTree simpleTree2 = new SimpleTree(seqClassifierFlags0.pad, vector0);
      simpleTreeArray0[2] = simpleTree2;
      SimpleTree simpleTree3 = new SimpleTree(seqClassifierFlags0.pad, vector0);
      simpleTreeArray0[3] = simpleTree3;
      Word word0 = new Word(simpleTree3);
      SimpleTree simpleTree4 = new SimpleTree(word0, vector0);
      simpleTreeArray0[4] = simpleTree4;
      SimpleTree simpleTree5 = new SimpleTree(simpleTree2);
      simpleTreeArray0[5] = simpleTree5;
      SimpleTree simpleTree6 = new SimpleTree(seqClassifierFlags0.pad, vector0);
      simpleTreeArray0[6] = simpleTree6;
      SimpleTree simpleTree7 = new SimpleTree(simpleTree4, vector0);
      simpleTreeArray0[7] = simpleTree7;
      ArrayUtils.concatenate(simpleTreeArray0, simpleTreeArray0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = Integer.getInteger("~A<uo~vl4%]cXc~u", int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(969);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1854));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1854));
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(2035);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((int) integerArray0[3]);
      Integer.toUnsignedString((-2039));
      integerArray0[8] = integer8;
      ArrayUtils.toPrimitive(integerArray0);
      ArrayUtils.to2D((double[]) null, int0, int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Character[] characterArray0 = new Character[6];
      Character character0 = Character.valueOf('t');
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('^');
      characterArray0[1] = character1;
      Character character2 = new Character('t');
      characterArray0[2] = character2;
      Character character3 = new Character('^');
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('c');
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('^');
      characterArray0[5] = character5;
      int int0 = 0;
      Character.isIdeographic(0);
      ArrayUtils.toPrimitive(characterArray0, 'L');
      // Undeclared exception!
      try { 
        ArrayUtils.gapEncodeList((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)31;
      ArrayUtils.gapDecodeList(byteArray0, 730, (int) (byte)10);
      double[][] doubleArray0 = new double[6][0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (byte)10;
      doubleArray1[1] = (double) (byte)31;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (double) (byte)1;
      doubleArray3[1] = (double) 730;
      doubleArray3[2] = (double) 730;
      doubleArray3[3] = (double) (byte)10;
      doubleArray3[4] = (double) (byte)0;
      doubleArray3[5] = (double) (byte)1;
      doubleArray3[6] = (double) (byte)31;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (double) (byte)0;
      doubleArray4[1] = (double) (byte)1;
      doubleArray4[2] = 634.019536;
      doubleArray4[3] = (double) (byte)10;
      doubleArray4[4] = (double) (byte)10;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = (double) (byte)31;
      doubleArray6[1] = (double) 730;
      doubleArray6[2] = (double) (byte)1;
      doubleArray6[3] = (double) (byte)1;
      doubleArray0[5] = doubleArray6;
      ArrayUtils.toString(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[][] doubleArray0 = new double[0][7];
      ArrayUtils.toString(doubleArray0);
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-800));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      try { 
        Integer.decode("bisequenceTestAlignmentFile");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"bisequenceTestAlignmentFile\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1326;
      intArray0[3] = (-1457);
      intArray0[4] = 2299;
      intArray0[5] = 3641;
      // Undeclared exception!
      try { 
        ArrayUtils.deltaEncodeList(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must be sorted!
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 532.1569602928247;
      doubleArray0[1] = 1301.0616037979958;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1119.886257;
      doubleArray0[5] = 2540.0747679514866;
      doubleArray0[6] = 1307.359;
      // Undeclared exception!
      try { 
        ArrayUtils.to2D(doubleArray0, (-1052));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 345;
      intArray0[1] = 1408;
      intArray0[2] = 0;
      intArray0[3] = (-611);
      intArray0[4] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.deltaEncodeList(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must be sorted!
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 412;
      intArray0[2] = 1669;
      intArray0[3] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.deltaEncodeList(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must be sorted!
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)50;
      ArrayUtils.deltaDecodeList(byteArray0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)13;
      ArrayUtils.deltaDecode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Predicate<Pair> predicate0 = (Predicate<Pair>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ArrayUtils.getSubListIndex((Object[]) null, (Object[]) null, predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int[][] intArray0 = new int[0][6];
      ArrayUtils.copy(intArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.gapDecode(byteArray0);
      ArrayUtils.gapDecodeList(byteArray0, 4096, (int) (byte)0);
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 4096;
      doubleArray1[1] = (double) (byte)0;
      doubleArray1[2] = (double) (byte)0;
      doubleArray1[3] = (double) 4096;
      doubleArray1[4] = (double) (byte)0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) (byte)0;
      doubleArray2[1] = (double) 4096;
      doubleArray2[2] = (double) (byte)0;
      doubleArray2[3] = (double) (byte)0;
      doubleArray2[4] = (double) (byte)0;
      doubleArray2[5] = (double) (byte)0;
      doubleArray2[6] = (double) (byte)0;
      doubleArray2[7] = (double) 4096;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) (byte)0;
      doubleArray3[1] = (double) 4096;
      doubleArray3[2] = (double) (byte)0;
      doubleArray3[3] = (double) (byte)0;
      doubleArray3[4] = (double) (byte)0;
      doubleArray0[2] = doubleArray3;
      ArrayUtils.flatten(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean[][] booleanArray0 = new boolean[2][7];
      boolean[] booleanArray1 = new boolean[0];
      booleanArray0[0] = booleanArray1;
      boolean[] booleanArray2 = new boolean[4];
      booleanArray2[0] = true;
      booleanArray2[1] = true;
      booleanArray2[2] = false;
      booleanArray2[3] = false;
      booleanArray0[1] = booleanArray2;
      ArrayUtils.equals(booleanArray0, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      // Undeclared exception!
      try { 
        ArrayUtils.contains((Byte[]) null, byte0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Collection<Double> collection0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.asPrimitiveDoubleArray((Collection<Double>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      Character character0 = Character.valueOf(':');
      characterArray0[0] = character0;
      Character character1 = new Character('E');
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('q');
      characterArray0[2] = character2;
      Character character3 = new Character('%');
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('(');
      characterArray0[4] = character4;
      ArrayUtils.toPrimitive(characterArray0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "semi-skil";
      stringArray0[1] = "4nL_xXRi8";
      stringArray0[2] = "";
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Filters.DisjFilter<Object> filters_DisjFilter0 = new Filters.DisjFilter<Object>(predicateArray0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      filters_DisjFilter0.or(predicate0);
      ArrayUtils.filter(stringArray0, (Predicate<? super String>) filters_DisjFilter0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 859.422543002;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2749.2477575400094;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1683.0;
      doubleArray0[6] = (-1798.1026);
      doubleArray0[7] = 2815.918;
      doubleArray0[8] = 0.0;
      ArrayUtils.removeAt(doubleArray0, 3);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      ArrayUtils.getSubListIndex(objectArray0, objectArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.01;
      doubleArray0[3] = (-377.92490857);
      doubleArray0[4] = 0.001;
      doubleArray0[5] = 0.0;
      ArrayUtils.removeAt(doubleArray0, 0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      ArrayUtils.gapDecode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      ArrayUtils.asSet(byteArray0);
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      doubleArray0[2] = double2;
      ArrayUtils.toPrimitive(doubleArray0, 0.0);
      boolean[][][] booleanArray0 = new boolean[1][4][1];
      boolean[][] booleanArray1 = new boolean[1][5];
      boolean[] booleanArray2 = new boolean[1];
      booleanArray2[0] = false;
      booleanArray1[0] = booleanArray2;
      booleanArray0[0] = booleanArray1;
      ArrayUtils.fill(booleanArray0, false);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean[][] booleanArray0 = new boolean[2][8];
      boolean[] booleanArray1 = new boolean[0];
      booleanArray0[0] = booleanArray1;
      boolean[] booleanArray2 = new boolean[6];
      booleanArray2[0] = false;
      booleanArray2[1] = true;
      booleanArray2[2] = true;
      booleanArray2[3] = true;
      booleanArray2[4] = true;
      booleanArray2[5] = true;
      booleanArray0[1] = booleanArray2;
      ArrayUtils.fill(booleanArray0, true);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-35));
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)77);
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte) (-1));
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte) (-35));
      byteArray0[5] = byte6;
      ArrayUtils.asImmutableSet(byteArray0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.deltaEncode((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 418.1285F;
      floatArray0[2] = (-613.8F);
      floatArray0[3] = 732.4499F;
      floatArray0[4] = 463.0707F;
      floatArray0[5] = Float.NaN;
      floatArray0[6] = 1919.9489F;
      floatArray0[7] = (-992.2F);
      floatArray0[8] = 1165.31F;
      double[] doubleArray0 = ArrayUtils.toDouble(floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new float[] {1.0F, 418.1285F, (-613.8F), 732.4499F, 463.0707F, Float.NaN, 1919.9489F, (-992.2F), 1165.31F}, floatArray0, 0.01F);
      assertArrayEquals(new double[] {1.0, 418.1285095214844, (-613.7999877929688), 732.4498901367188, 463.0707092285156, Double.NaN, 1919.9488525390625, (-992.2000122070312), 1165.31005859375}, doubleArray0, 0.01);
      
      String string0 = ArrayUtils.toString(doubleArray0, "edu.stanford.nlp.util.ArrayUtils");
      assertEquals(9, floatArray0.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(string0);
      assertEquals("1.0edu.stanford.nlp.util.ArrayUtils418.1285095214844edu.stanford.nlp.util.ArrayUtils-613.7999877929688edu.stanford.nlp.util.ArrayUtils732.4498901367188edu.stanford.nlp.util.ArrayUtils463.0707092285156edu.stanford.nlp.util.ArrayUtilsNaNedu.stanford.nlp.util.ArrayUtils1919.9488525390625edu.stanford.nlp.util.ArrayUtils-992.2000122070312edu.stanford.nlp.util.ArrayUtils1165.31005859375", string0);
      assertArrayEquals(new float[] {1.0F, 418.1285F, (-613.8F), 732.4499F, 463.0707F, Float.NaN, 1919.9489F, (-992.2F), 1165.31F}, floatArray0, 0.01F);
      assertArrayEquals(new double[] {1.0, 418.1285095214844, (-613.7999877929688), 732.4498901367188, 463.0707092285156, Double.NaN, 1919.9488525390625, (-992.2000122070312), 1165.31005859375}, doubleArray0, 0.01);
      
      double[][][] doubleArray1 = new double[3][9][7];
      double[][] doubleArray2 = new double[4][1];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      doubleArray1[0] = doubleArray2;
      double[][] doubleArray3 = new double[0][7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray1[1] = doubleArray3;
      double[][] doubleArray4 = new double[5][1];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = doubleArray0;
      doubleArray4[1] = doubleArray0;
      doubleArray4[2] = doubleArray0;
      doubleArray4[3] = doubleArray0;
      doubleArray4[4] = doubleArray0;
      doubleArray1[2] = doubleArray4;
      double[][][] doubleArray5 = ArrayUtils.copy(doubleArray1);
      assertEquals(3, doubleArray5.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray5);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray1, doubleArray5);
      assertFalse(doubleArray5.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3749.019236189);
      doubleArray0[1] = (-3218.320556126);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeAt(doubleArray0, (-2063));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-3749.019236189), (-3218.320556126), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3749.019236189), (-3218.320556126), 0.0, 0.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = ArrayUtils.copy((float[]) null);
      assertNull(floatArray0);
      
      float[][] floatArray1 = new float[2][1];
      floatArray1[0] = null;
      floatArray1[1] = null;
      float[][] floatArray2 = ArrayUtils.copy(floatArray1);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray2.length);
      assertNotNull(floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertFalse(floatArray2.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 779.7242F;
      floatArray0[1] = (-2084.652F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-871.8728F);
      float[] floatArray1 = ArrayUtils.copy(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {779.7242F, (-2084.652F), 0.0F, (-871.8728F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {779.7242F, (-2084.652F), 0.0F, (-871.8728F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int[] intArray0 = new int[0];
      byte[] byteArray0 = ArrayUtils.deltaEncode(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Proxy.Type[] proxy_TypeArray0 = new Proxy.Type[1];
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      proxy_TypeArray0[0] = proxy_Type0;
      boolean boolean0 = ArrayUtils.contains(proxy_TypeArray0, proxy_Type0);
      assertEquals(1, proxy_TypeArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((-3011L));
      assertNotNull(long0);
      assertEquals((-3011L), (long)long0);
      
      longArray0[0] = long0;
      long long1 = (-1L);
      Long long2 = new Long((-1L));
      assertNotNull(long2);
      assertEquals((-1L), (long)long2);
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      longArray0[1] = long2;
      Long long3 = new Long((-3011L));
      assertNotNull(long3);
      assertEquals((-3011L), (long)long3);
      assertTrue(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      
      longArray0[2] = long3;
      Long long4 = new Long(long1);
      assertNotNull(long4);
      assertEquals((-1L), (long)long4);
      assertFalse(long4.equals((Object)long0));
      assertTrue(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long1));
      
      longArray0[3] = long4;
      Long long5 = new Long((-1L));
      assertNotNull(long5);
      assertEquals((-1L), (long)long5);
      assertTrue(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long0));
      assertTrue(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long3));
      assertTrue(long5.equals((Object)long4));
      
      longArray0[4] = long5;
      Long long6 = new Long(1256L);
      assertNotNull(long6);
      assertEquals(1256L, (long)long6);
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long4));
      
      longArray0[5] = long6;
      Long long7 = new Long((long) longArray0[5]);
      assertEquals(9, longArray0.length);
      assertNotNull(long7);
      assertEquals(1256L, (long)long7);
      assertFalse(long7.equals((Object)long2));
      assertFalse(long7.equals((Object)long4));
      assertTrue(long7.equals((Object)long6));
      assertFalse(long7.equals((Object)long0));
      assertFalse(long7.equals((Object)long1));
      assertFalse(long7.equals((Object)long5));
      assertFalse(long7.equals((Object)long3));
      
      longArray0[6] = long7;
      int int0 = Long.compare((long) longArray0[0], long1);
      assertEquals(9, longArray0.length);
      assertEquals((-1), int0);
      
      Long long8 = new Long((-3011L));
      assertNotNull(long8);
      assertEquals((-3011L), (long)long8);
      assertFalse(long8.equals((Object)long7));
      assertTrue(long8.equals((Object)long0));
      assertFalse(long8.equals((Object)long1));
      assertFalse(long8.equals((Object)long5));
      assertFalse(long8.equals((Object)long4));
      assertFalse(long8.equals((Object)long6));
      assertTrue(long8.equals((Object)long3));
      assertFalse(long8.equals((Object)long2));
      
      longArray0[7] = long8;
      Long long9 = new Long(3173L);
      assertNotNull(long9);
      assertEquals(3173L, (long)long9);
      assertFalse(long9.equals((Object)long6));
      assertFalse(long9.equals((Object)long3));
      assertFalse(long9.equals((Object)long8));
      assertFalse(long9.equals((Object)long1));
      assertFalse(long9.equals((Object)long5));
      assertFalse(long9.equals((Object)long0));
      assertFalse(long9.equals((Object)long4));
      assertFalse(long9.equals((Object)long2));
      assertFalse(long9.equals((Object)long7));
      
      longArray0[8] = long9;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-3011L), (-1L), (-3011L), (-1L), (-1L), 1256L, 1256L, (-3011L), 3173L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = 0.0;
      doubleArray4[7] = 0.0;
      doubleArray4[8] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = ArrayUtils.flatten(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(18, doubleArray5.length);
      assertNotNull(doubleArray5);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray3);
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = ArrayUtils.flatten(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1465;
      intArray0[1] = 356;
      intArray0[2] = 1094;
      intArray0[3] = 4;
      intArray0[4] = 555;
      intArray0[5] = (-9241);
      intArray0[6] = 648;
      intArray0[7] = 49;
      intArray0[8] = 1946;
      boolean boolean0 = ArrayUtils.equalContents(intArray0, intArray0);
      assertEquals(9, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {1465, 356, 1094, 4, 555, (-9241), 648, 49, 1946}, intArray0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[][][][] doubleArray0 = new double[4][4][0][9];
      double[][][] doubleArray1 = new double[4][6][7];
      double[][] doubleArray2 = new double[4][2];
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (-913.5099795);
      doubleArray3[1] = 2531.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (-1.0);
      doubleArray3[4] = 1634.474907066814;
      doubleArray3[5] = 5519.79545459;
      doubleArray3[6] = (-1473.477375574933);
      doubleArray3[7] = 0.0;
      doubleArray3[8] = (-2936.2943697548);
      doubleArray2[0] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray2[1] = doubleArray4;
      double[] doubleArray5 = new double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = (-1.0);
      doubleArray2[2] = doubleArray5;
      double[] doubleArray6 = new double[7];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = 5519.79545459;
      doubleArray6[1] = (-2936.2943697548);
      doubleArray6[2] = (-2936.2943697548);
      doubleArray6[3] = 5519.79545459;
      doubleArray6[4] = (-913.5099795);
      doubleArray6[5] = 1634.474907066814;
      doubleArray6[6] = 5519.79545459;
      doubleArray2[3] = doubleArray6;
      doubleArray1[0] = doubleArray2;
      double[][] doubleArray7 = new double[9][6];
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      
      doubleArray7[0] = doubleArray6;
      doubleArray7[1] = doubleArray5;
      doubleArray7[2] = doubleArray4;
      double[] doubleArray8 = new double[2];
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      
      doubleArray8[0] = 1634.474907066814;
      doubleArray8[1] = 1634.474907066814;
      doubleArray7[3] = doubleArray8;
      doubleArray7[4] = doubleArray3;
      doubleArray7[5] = doubleArray3;
      doubleArray7[6] = doubleArray6;
      doubleArray7[7] = doubleArray5;
      doubleArray7[8] = doubleArray3;
      doubleArray1[1] = doubleArray7;
      double[][] doubleArray9 = new double[3][2];
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      
      double[] doubleArray10 = new double[2];
      assertFalse(doubleArray10.equals((Object)doubleArray8));
      assertFalse(doubleArray10.equals((Object)doubleArray3));
      assertFalse(doubleArray10.equals((Object)doubleArray4));
      assertFalse(doubleArray10.equals((Object)doubleArray6));
      assertFalse(doubleArray10.equals((Object)doubleArray5));
      
      doubleArray10[0] = (-1473.477375574933);
      doubleArray10[1] = (-2936.2943697548);
      doubleArray9[0] = doubleArray10;
      doubleArray9[1] = doubleArray4;
      doubleArray9[2] = doubleArray6;
      doubleArray1[2] = doubleArray9;
      double[][] doubleArray11 = new double[4][2];
      assertFalse(doubleArray11.equals((Object)doubleArray2));
      assertFalse(doubleArray11.equals((Object)doubleArray9));
      assertFalse(doubleArray11.equals((Object)doubleArray7));
      
      doubleArray11[0] = doubleArray10;
      doubleArray11[1] = doubleArray6;
      doubleArray11[2] = doubleArray3;
      doubleArray11[3] = doubleArray6;
      doubleArray1[3] = doubleArray11;
      doubleArray0[0] = doubleArray1;
      double[][][] doubleArray12 = new double[6][5][7];
      assertFalse(doubleArray12.equals((Object)doubleArray1));
      
      doubleArray12[0] = doubleArray9;
      doubleArray12[1] = doubleArray11;
      doubleArray12[2] = doubleArray7;
      double[][] doubleArray13 = new double[0][5];
      assertFalse(doubleArray13.equals((Object)doubleArray7));
      assertFalse(doubleArray13.equals((Object)doubleArray9));
      assertFalse(doubleArray13.equals((Object)doubleArray2));
      assertFalse(doubleArray13.equals((Object)doubleArray11));
      
      doubleArray12[3] = doubleArray13;
      doubleArray12[4] = doubleArray7;
      doubleArray12[5] = doubleArray11;
      doubleArray0[1] = doubleArray12;
      double[][][] doubleArray14 = new double[1][1][4];
      assertFalse(doubleArray14.equals((Object)doubleArray1));
      assertFalse(doubleArray14.equals((Object)doubleArray12));
      
      doubleArray14[0] = doubleArray13;
      doubleArray0[2] = doubleArray14;
      double[][][] doubleArray15 = new double[4][4][9];
      assertFalse(doubleArray15.equals((Object)doubleArray14));
      assertFalse(doubleArray15.equals((Object)doubleArray12));
      assertFalse(doubleArray15.equals((Object)doubleArray1));
      
      doubleArray15[0] = doubleArray9;
      doubleArray15[1] = doubleArray11;
      doubleArray15[2] = doubleArray2;
      doubleArray15[3] = doubleArray11;
      doubleArray0[3] = doubleArray15;
      ArrayUtils.fill(doubleArray0, 0.0);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        ArrayUtils.fill((double[][][][]) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[][][] doubleArray0 = new double[4][4][1];
      double[][] doubleArray1 = new double[3][0];
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-675.3177520767);
      doubleArray2[1] = 0.01;
      doubleArray2[2] = 200.55;
      doubleArray2[3] = 20.0;
      doubleArray2[4] = 1128.8911478079422;
      doubleArray2[5] = 10.0;
      doubleArray2[6] = (-1.0);
      doubleArray2[7] = 0.0;
      doubleArray1[0] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 200.55;
      doubleArray3[1] = 1128.8911478079422;
      doubleArray1[1] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 1128.8911478079422;
      doubleArray4[1] = 0.01;
      doubleArray4[2] = (-1.0);
      doubleArray4[3] = 0.0;
      doubleArray4[4] = (-675.3177520767);
      doubleArray4[5] = (-1.0);
      doubleArray4[6] = (-1.0);
      doubleArray4[7] = 200.55;
      doubleArray1[2] = doubleArray4;
      doubleArray0[0] = doubleArray1;
      double[][] doubleArray5 = new double[1][2];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = doubleArray2;
      doubleArray0[1] = doubleArray5;
      double[][] doubleArray6 = new double[4][2];
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = doubleArray4;
      doubleArray6[1] = doubleArray4;
      doubleArray6[2] = doubleArray3;
      doubleArray6[3] = doubleArray2;
      doubleArray0[2] = doubleArray6;
      double[][] doubleArray7 = new double[1][8];
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      
      doubleArray7[0] = doubleArray4;
      doubleArray0[3] = doubleArray7;
      ArrayUtils.fill(doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      boolean boolean0 = ArrayUtils.equalContents(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.fill((double[][][]) null, (double) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      stack0.trimToSize();
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.capacity());
      assertTrue(stack0.isEmpty());
      
      double[] doubleArray0 = ArrayUtils.asPrimitiveDoubleArray(stack0);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 4134;
      intArray0[1] = 0;
      List<Integer> list0 = ArrayUtils.asList(intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(list0);
      assertTrue(list0.contains(4134));
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertArrayEquals(new int[] {4134, 0}, intArray0);
      
      double[][] doubleArray1 = new double[2][8];
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (-1243.437397);
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 4134;
      doubleArray2[6] = (double) 4134;
      doubleArray2[7] = (double) 4134;
      doubleArray2[8] = (double) 4134;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      ArrayUtils.fill(doubleArray1, 0.0);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Vector<Double> vector0 = new Vector<Double>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      boolean boolean0 = vector0.add(double0);
      assertTrue(boolean0);
      assertTrue(vector0.contains(double0));
      assertEquals("[0.0]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      
      double[] doubleArray0 = ArrayUtils.asPrimitiveDoubleArray(vector0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertTrue(vector0.contains(double0));
      assertEquals("[0.0]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.normalize(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(vector0.contains(double0));
      assertEquals("[0.0]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      float[][][] floatArray0 = new float[0][6][3];
      float[][][] floatArray1 = ArrayUtils.copy(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(3);
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1690);
      assertNotNull(integer1);
      assertEquals(1690, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.getInteger("[eligible nsubj>Zambia cop>became xcomp>[receive mark>to dobj>[assistance amod>UNCDF] nmod:in>1991]]");
      assertNull(integer2);
      
      integerArray0[2] = null;
      Integer integer3 = new Integer(3);
      assertNotNull(integer3);
      assertEquals(3, (int)integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[1]);
      assertEquals(7, integerArray0.length);
      assertNotNull(integer4);
      assertEquals(1690, (int)integer4);
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      assertNotNull(integer5);
      assertEquals(0, (int)integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-770));
      assertNotNull(integer6);
      assertEquals((-770), (int)integer6);
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      
      integerArray0[6] = integer6;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 540);
      assertEquals(7, intArray0.length);
      assertEquals(7, integerArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {3, 1690, 540, 3, 1690, 0, (-770)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.asList((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      assertNotNull(integer4);
      assertEquals(0, (int)integer4);
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer1));
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2369);
      assertNotNull(integer5);
      assertEquals(2369, (int)integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer4));
      
      integerArray0[5] = integer5;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(6, integerArray0.length);
      assertEquals(6, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 2369}, intArray0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-4216);
      intArray0[1] = 3085;
      double[] doubleArray0 = ArrayUtils.toDouble(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new int[] {(-4216), 3085}, intArray0);
      assertArrayEquals(new double[] {(-4216.0), 3085.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MapFactory<Integer, MutableInteger> mapFactory0 = MapFactory.weakHashMapFactory();
      assertNotNull(mapFactory0);
      
      IntCounter<Integer> intCounter0 = new IntCounter<Integer>(mapFactory0);
      assertNotNull(intCounter0);
      assertTrue(intCounter0.isEmpty());
      assertEquals(0.0, intCounter0.totalDoubleCount(), 0.01);
      assertEquals(0.0, intCounter0.totalCount(), 0.01);
      assertEquals(0.0, intCounter0.defaultReturnValue(), 0.01);
      assertEquals(0, intCounter0.size());
      assertEquals(Double.NaN, intCounter0.averageCount(), 0.01);
      assertEquals(0, intCounter0.totalIntCount());
      
      Integer integer0 = new Integer(1051);
      assertNotNull(integer0);
      assertEquals(1051, (int)integer0);
      
      IntCounter<Integer> intCounter1 = new IntCounter<Integer>(mapFactory0);
      assertNotNull(intCounter1);
      assertTrue(intCounter1.equals((Object)intCounter0));
      assertEquals(0.0, intCounter1.totalCount(), 0.01);
      assertTrue(intCounter1.isEmpty());
      assertEquals(0.0, intCounter1.totalDoubleCount(), 0.01);
      assertEquals(0, intCounter1.size());
      assertEquals(0, intCounter1.totalIntCount());
      assertEquals(Double.NaN, intCounter1.averageCount(), 0.01);
      assertEquals(0.0, intCounter1.defaultReturnValue(), 0.01);
      
      intCounter0.subtractAll(intCounter1);
      assertNotSame(intCounter0, intCounter1);
      assertNotSame(intCounter1, intCounter0);
      assertTrue(intCounter0.equals((Object)intCounter1));
      assertTrue(intCounter1.equals((Object)intCounter0));
      assertTrue(intCounter0.isEmpty());
      assertEquals(0.0, intCounter0.totalDoubleCount(), 0.01);
      assertEquals(0.0, intCounter0.totalCount(), 0.01);
      assertEquals(0.0, intCounter0.defaultReturnValue(), 0.01);
      assertEquals(0, intCounter0.size());
      assertEquals(Double.NaN, intCounter0.averageCount(), 0.01);
      assertEquals(0, intCounter0.totalIntCount());
      assertEquals(0.0, intCounter1.totalCount(), 0.01);
      assertTrue(intCounter1.isEmpty());
      assertEquals(0.0, intCounter1.totalDoubleCount(), 0.01);
      assertEquals(0, intCounter1.size());
      assertEquals(0, intCounter1.totalIntCount());
      assertEquals(Double.NaN, intCounter1.averageCount(), 0.01);
      assertEquals(0.0, intCounter1.defaultReturnValue(), 0.01);
      
      double double0 = intCounter0.remove(integer0);
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(intCounter0, intCounter1);
      assertTrue(intCounter0.equals((Object)intCounter1));
      assertTrue(intCounter0.isEmpty());
      assertEquals(0.0, intCounter0.totalDoubleCount(), 0.01);
      assertEquals(0.0, intCounter0.totalCount(), 0.01);
      assertEquals(0.0, intCounter0.defaultReturnValue(), 0.01);
      assertEquals(0, intCounter0.size());
      assertEquals(Double.NaN, intCounter0.averageCount(), 0.01);
      assertEquals(0, intCounter0.totalIntCount());
      
      Set<Integer> set0 = intCounter0.keysAt(1051);
      assertNotNull(set0);
      assertNotSame(intCounter0, intCounter1);
      assertTrue(intCounter0.equals((Object)intCounter1));
      assertFalse(set0.contains(integer0));
      assertTrue(intCounter0.isEmpty());
      assertEquals(0.0, intCounter0.totalDoubleCount(), 0.01);
      assertEquals(0.0, intCounter0.totalCount(), 0.01);
      assertEquals(0.0, intCounter0.defaultReturnValue(), 0.01);
      assertEquals(0, intCounter0.size());
      assertEquals(Double.NaN, intCounter0.averageCount(), 0.01);
      assertEquals(0, intCounter0.totalIntCount());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      int[] intArray0 = ArrayUtils.asPrimitiveIntArray(set0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertNotSame(intCounter0, intCounter1);
      assertTrue(intCounter0.equals((Object)intCounter1));
      assertFalse(set0.contains(integer0));
      assertTrue(intCounter0.isEmpty());
      assertEquals(0.0, intCounter0.totalDoubleCount(), 0.01);
      assertEquals(0.0, intCounter0.totalCount(), 0.01);
      assertEquals(0.0, intCounter0.defaultReturnValue(), 0.01);
      assertEquals(0, intCounter0.size());
      assertEquals(Double.NaN, intCounter0.averageCount(), 0.01);
      assertEquals(0, intCounter0.totalIntCount());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1051;
      doubleArray0[1] = Double.NaN;
      double[][] doubleArray1 = ArrayUtils.to2D(doubleArray0, 1051);
      assertEquals(2, doubleArray0.length);
      assertEquals(1051, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1051.0, Double.NaN}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1051;
      double[] doubleArray2 = ArrayUtils.toDouble(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new float[] {1051.0F}, floatArray0, 0.01F);
      assertArrayEquals(new double[] {1051.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1912.3;
      doubleArray1[1] = 1055.5623983;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (-1.0);
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = 1.0;
      doubleArray1[7] = (-1347.5782462204854);
      doubleArray1[8] = 855.335350576;
      doubleArray0[0] = doubleArray1;
      double[][] doubleArray2 = ArrayUtils.copy(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(2330.775280655506);
      assertNotNull(double0);
      assertEquals(2330.775280655506, (double)double0, 0.01);
      
      double double1 = Double.min(2330.775280655506, (-1302.630605286));
      assertEquals((-1302.630605286), double1, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2330.775280655506}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.copy(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {2330.775280655506}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2330.775280655506}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-908.4);
      doubleArray0[1] = (-1061.07849);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2522.653752088548;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = 1.0;
      // Undeclared exception!
      try { 
        ArrayUtils.to2D(doubleArray0, (-3332), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "[";
      stringArray0[1] = "";
      int int0 = ArrayUtils.compareArrays(stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      // Undeclared exception!
      try { 
        ArrayUtils.to2D(doubleArray0, (-2492), (-2492));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((short)683);
      assertNotNull(short0);
      assertEquals((short)683, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)6);
      assertNotNull(short1);
      assertEquals((short)6, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-1466));
      assertNotNull(short2);
      assertEquals((short) (-1466), (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) (-1466));
      assertNotNull(short3);
      assertEquals((short) (-1466), (short)short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short2));
      
      shortArray0[3] = short3;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)683, (short)6, (short) (-1466), (short) (-1466)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[][] doubleArray0 = new double[14][4];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 3719.054566712;
      doubleArray1[5] = 1777.387;
      doubleArray1[6] = (-1334.67);
      doubleArray1[7] = 2.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 2.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 1777.387;
      doubleArray4[3] = 1777.387;
      doubleArray4[4] = (-259.58409);
      doubleArray4[5] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = ArrayUtils.flatten(doubleArray0);
      assertEquals(14, doubleArray0.length);
      assertEquals(57, doubleArray5.length);
      assertNotNull(doubleArray5);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray3);
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      boolean[][][][] booleanArray0 = new boolean[8][8][7][3];
      boolean[][][] booleanArray1 = new boolean[7][4][4];
      boolean[][] booleanArray2 = new boolean[8][6];
      boolean[] booleanArray3 = new boolean[6];
      booleanArray3[0] = false;
      booleanArray3[1] = true;
      booleanArray3[2] = true;
      booleanArray3[3] = false;
      booleanArray3[4] = true;
      booleanArray3[5] = false;
      booleanArray2[0] = booleanArray3;
      boolean[] booleanArray4 = new boolean[6];
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      
      booleanArray4[0] = false;
      booleanArray4[1] = true;
      booleanArray4[2] = false;
      booleanArray4[3] = true;
      booleanArray4[4] = true;
      booleanArray4[5] = false;
      booleanArray2[1] = booleanArray4;
      boolean[] booleanArray5 = new boolean[1];
      assertFalse(booleanArray5.equals((Object)booleanArray3));
      assertFalse(booleanArray5.equals((Object)booleanArray4));
      
      booleanArray5[0] = false;
      booleanArray2[2] = booleanArray5;
      boolean[] booleanArray6 = new boolean[8];
      assertFalse(booleanArray6.equals((Object)booleanArray4));
      assertFalse(booleanArray6.equals((Object)booleanArray3));
      assertFalse(booleanArray6.equals((Object)booleanArray5));
      
      booleanArray6[0] = true;
      booleanArray6[1] = true;
      booleanArray6[2] = true;
      booleanArray6[3] = true;
      booleanArray6[4] = false;
      booleanArray6[5] = true;
      booleanArray6[6] = true;
      booleanArray6[7] = false;
      booleanArray2[3] = booleanArray6;
      boolean[] booleanArray7 = new boolean[0];
      assertFalse(booleanArray7.equals((Object)booleanArray5));
      assertFalse(booleanArray7.equals((Object)booleanArray4));
      assertFalse(booleanArray7.equals((Object)booleanArray6));
      assertFalse(booleanArray7.equals((Object)booleanArray3));
      
      booleanArray2[4] = booleanArray7;
      boolean[] booleanArray8 = new boolean[1];
      assertFalse(booleanArray8.equals((Object)booleanArray3));
      assertFalse(booleanArray8.equals((Object)booleanArray7));
      assertFalse(booleanArray8.equals((Object)booleanArray5));
      assertFalse(booleanArray8.equals((Object)booleanArray6));
      assertFalse(booleanArray8.equals((Object)booleanArray4));
      
      booleanArray8[0] = true;
      booleanArray2[5] = booleanArray8;
      boolean[] booleanArray9 = new boolean[8];
      assertFalse(booleanArray9.equals((Object)booleanArray7));
      assertFalse(booleanArray9.equals((Object)booleanArray4));
      assertFalse(booleanArray9.equals((Object)booleanArray6));
      assertFalse(booleanArray9.equals((Object)booleanArray8));
      assertFalse(booleanArray9.equals((Object)booleanArray5));
      assertFalse(booleanArray9.equals((Object)booleanArray3));
      
      booleanArray9[0] = true;
      booleanArray9[1] = true;
      booleanArray9[2] = false;
      booleanArray9[3] = true;
      booleanArray9[4] = false;
      booleanArray9[5] = false;
      booleanArray9[6] = true;
      booleanArray9[7] = true;
      booleanArray2[6] = booleanArray9;
      boolean[] booleanArray10 = new boolean[3];
      assertFalse(booleanArray10.equals((Object)booleanArray9));
      assertFalse(booleanArray10.equals((Object)booleanArray4));
      assertFalse(booleanArray10.equals((Object)booleanArray3));
      assertFalse(booleanArray10.equals((Object)booleanArray8));
      assertFalse(booleanArray10.equals((Object)booleanArray6));
      assertFalse(booleanArray10.equals((Object)booleanArray5));
      assertFalse(booleanArray10.equals((Object)booleanArray7));
      
      booleanArray10[0] = false;
      booleanArray10[1] = false;
      booleanArray10[2] = true;
      booleanArray2[7] = booleanArray10;
      booleanArray1[0] = booleanArray2;
      boolean[][] booleanArray11 = new boolean[8][9];
      assertFalse(booleanArray11.equals((Object)booleanArray2));
      
      booleanArray11[0] = booleanArray5;
      booleanArray11[1] = booleanArray6;
      booleanArray11[2] = booleanArray9;
      booleanArray11[3] = booleanArray9;
      booleanArray11[4] = booleanArray8;
      booleanArray11[5] = booleanArray4;
      booleanArray11[6] = booleanArray8;
      boolean[] booleanArray12 = new boolean[0];
      assertFalse(booleanArray12.equals((Object)booleanArray4));
      assertFalse(booleanArray12.equals((Object)booleanArray6));
      assertFalse(booleanArray12.equals((Object)booleanArray3));
      assertFalse(booleanArray12.equals((Object)booleanArray5));
      assertFalse(booleanArray12.equals((Object)booleanArray7));
      assertFalse(booleanArray12.equals((Object)booleanArray10));
      assertFalse(booleanArray12.equals((Object)booleanArray9));
      assertFalse(booleanArray12.equals((Object)booleanArray8));
      
      booleanArray11[7] = booleanArray12;
      booleanArray1[1] = booleanArray11;
      boolean[][] booleanArray13 = new boolean[7][1];
      assertFalse(booleanArray13.equals((Object)booleanArray11));
      assertFalse(booleanArray13.equals((Object)booleanArray2));
      
      booleanArray13[0] = booleanArray7;
      booleanArray13[1] = booleanArray8;
      boolean[] booleanArray14 = new boolean[9];
      assertFalse(booleanArray14.equals((Object)booleanArray4));
      assertFalse(booleanArray14.equals((Object)booleanArray6));
      assertFalse(booleanArray14.equals((Object)booleanArray3));
      assertFalse(booleanArray14.equals((Object)booleanArray12));
      assertFalse(booleanArray14.equals((Object)booleanArray5));
      assertFalse(booleanArray14.equals((Object)booleanArray7));
      assertFalse(booleanArray14.equals((Object)booleanArray10));
      assertFalse(booleanArray14.equals((Object)booleanArray9));
      assertFalse(booleanArray14.equals((Object)booleanArray8));
      
      booleanArray14[0] = true;
      booleanArray14[1] = false;
      booleanArray14[2] = false;
      booleanArray14[3] = false;
      booleanArray14[4] = true;
      booleanArray14[5] = true;
      booleanArray14[6] = false;
      booleanArray14[7] = false;
      booleanArray14[8] = false;
      booleanArray13[2] = booleanArray14;
      booleanArray13[3] = booleanArray3;
      booleanArray13[4] = booleanArray7;
      booleanArray13[5] = booleanArray3;
      booleanArray13[6] = booleanArray3;
      booleanArray1[2] = booleanArray13;
      boolean[][] booleanArray15 = new boolean[2][3];
      assertFalse(booleanArray15.equals((Object)booleanArray13));
      assertFalse(booleanArray15.equals((Object)booleanArray11));
      assertFalse(booleanArray15.equals((Object)booleanArray2));
      
      booleanArray15[0] = booleanArray12;
      booleanArray15[1] = booleanArray10;
      booleanArray1[3] = booleanArray15;
      boolean[][] booleanArray16 = new boolean[2][8];
      assertFalse(booleanArray16.equals((Object)booleanArray15));
      assertFalse(booleanArray16.equals((Object)booleanArray2));
      assertFalse(booleanArray16.equals((Object)booleanArray11));
      assertFalse(booleanArray16.equals((Object)booleanArray13));
      
      booleanArray16[0] = booleanArray3;
      booleanArray16[1] = booleanArray3;
      booleanArray1[4] = booleanArray16;
      boolean[][] booleanArray17 = new boolean[4][2];
      assertFalse(booleanArray17.equals((Object)booleanArray11));
      assertFalse(booleanArray17.equals((Object)booleanArray13));
      assertFalse(booleanArray17.equals((Object)booleanArray16));
      assertFalse(booleanArray17.equals((Object)booleanArray15));
      assertFalse(booleanArray17.equals((Object)booleanArray2));
      
      booleanArray17[0] = booleanArray4;
      booleanArray17[1] = booleanArray6;
      booleanArray17[2] = booleanArray10;
      booleanArray17[3] = booleanArray14;
      booleanArray1[5] = booleanArray17;
      boolean[][] booleanArray18 = new boolean[5][7];
      assertFalse(booleanArray18.equals((Object)booleanArray16));
      assertFalse(booleanArray18.equals((Object)booleanArray11));
      assertFalse(booleanArray18.equals((Object)booleanArray15));
      assertFalse(booleanArray18.equals((Object)booleanArray13));
      assertFalse(booleanArray18.equals((Object)booleanArray2));
      assertFalse(booleanArray18.equals((Object)booleanArray17));
      
      booleanArray18[0] = booleanArray7;
      booleanArray18[1] = booleanArray5;
      booleanArray18[2] = booleanArray14;
      booleanArray18[3] = booleanArray8;
      booleanArray18[4] = booleanArray5;
      booleanArray1[6] = booleanArray18;
      booleanArray0[0] = booleanArray1;
      boolean[][][] booleanArray19 = new boolean[8][5][4];
      assertFalse(booleanArray19.equals((Object)booleanArray1));
      
      boolean[][] booleanArray20 = new boolean[9][7];
      assertFalse(booleanArray20.equals((Object)booleanArray17));
      assertFalse(booleanArray20.equals((Object)booleanArray13));
      assertFalse(booleanArray20.equals((Object)booleanArray11));
      assertFalse(booleanArray20.equals((Object)booleanArray2));
      assertFalse(booleanArray20.equals((Object)booleanArray18));
      assertFalse(booleanArray20.equals((Object)booleanArray16));
      assertFalse(booleanArray20.equals((Object)booleanArray15));
      
      booleanArray20[0] = booleanArray4;
      booleanArray20[1] = booleanArray6;
      booleanArray20[2] = booleanArray5;
      booleanArray20[3] = booleanArray4;
      booleanArray20[4] = booleanArray4;
      booleanArray20[5] = booleanArray10;
      booleanArray20[6] = booleanArray12;
      booleanArray20[7] = booleanArray3;
      booleanArray20[8] = booleanArray6;
      booleanArray19[0] = booleanArray20;
      booleanArray19[1] = booleanArray13;
      booleanArray19[2] = booleanArray13;
      boolean[][] booleanArray21 = new boolean[9][6];
      assertFalse(booleanArray21.equals((Object)booleanArray16));
      assertFalse(booleanArray21.equals((Object)booleanArray18));
      assertFalse(booleanArray21.equals((Object)booleanArray2));
      assertFalse(booleanArray21.equals((Object)booleanArray17));
      assertFalse(booleanArray21.equals((Object)booleanArray13));
      assertFalse(booleanArray21.equals((Object)booleanArray15));
      assertFalse(booleanArray21.equals((Object)booleanArray20));
      assertFalse(booleanArray21.equals((Object)booleanArray11));
      
      boolean[] booleanArray22 = new boolean[3];
      assertFalse(booleanArray22.equals((Object)booleanArray7));
      assertFalse(booleanArray22.equals((Object)booleanArray10));
      assertFalse(booleanArray22.equals((Object)booleanArray9));
      assertFalse(booleanArray22.equals((Object)booleanArray14));
      assertFalse(booleanArray22.equals((Object)booleanArray4));
      assertFalse(booleanArray22.equals((Object)booleanArray3));
      assertFalse(booleanArray22.equals((Object)booleanArray12));
      assertFalse(booleanArray22.equals((Object)booleanArray5));
      assertFalse(booleanArray22.equals((Object)booleanArray6));
      assertFalse(booleanArray22.equals((Object)booleanArray8));
      
      booleanArray22[0] = false;
      booleanArray22[1] = true;
      booleanArray22[2] = true;
      booleanArray21[0] = booleanArray22;
      booleanArray21[1] = booleanArray3;
      booleanArray21[2] = booleanArray10;
      booleanArray21[3] = booleanArray14;
      booleanArray21[4] = booleanArray3;
      booleanArray21[5] = booleanArray6;
      booleanArray21[6] = booleanArray4;
      boolean[] booleanArray23 = new boolean[0];
      assertFalse(booleanArray23.equals((Object)booleanArray6));
      assertFalse(booleanArray23.equals((Object)booleanArray8));
      assertFalse(booleanArray23.equals((Object)booleanArray4));
      assertFalse(booleanArray23.equals((Object)booleanArray3));
      assertFalse(booleanArray23.equals((Object)booleanArray9));
      assertFalse(booleanArray23.equals((Object)booleanArray7));
      assertFalse(booleanArray23.equals((Object)booleanArray10));
      assertFalse(booleanArray23.equals((Object)booleanArray22));
      assertFalse(booleanArray23.equals((Object)booleanArray5));
      assertFalse(booleanArray23.equals((Object)booleanArray14));
      assertFalse(booleanArray23.equals((Object)booleanArray12));
      
      booleanArray21[7] = booleanArray23;
      booleanArray21[8] = booleanArray4;
      booleanArray19[3] = booleanArray21;
      boolean[][] booleanArray24 = new boolean[5][9];
      assertFalse(booleanArray24.equals((Object)booleanArray2));
      assertFalse(booleanArray24.equals((Object)booleanArray16));
      assertFalse(booleanArray24.equals((Object)booleanArray13));
      assertFalse(booleanArray24.equals((Object)booleanArray20));
      assertFalse(booleanArray24.equals((Object)booleanArray11));
      assertFalse(booleanArray24.equals((Object)booleanArray21));
      assertFalse(booleanArray24.equals((Object)booleanArray18));
      assertFalse(booleanArray24.equals((Object)booleanArray17));
      assertFalse(booleanArray24.equals((Object)booleanArray15));
      
      booleanArray24[0] = booleanArray6;
      booleanArray24[1] = booleanArray14;
      booleanArray24[2] = booleanArray9;
      booleanArray24[3] = booleanArray14;
      booleanArray24[4] = booleanArray8;
      booleanArray19[4] = booleanArray24;
      booleanArray19[5] = booleanArray11;
      booleanArray19[6] = booleanArray15;
      boolean[][] booleanArray25 = new boolean[8][9];
      assertFalse(booleanArray25.equals((Object)booleanArray21));
      assertFalse(booleanArray25.equals((Object)booleanArray11));
      assertFalse(booleanArray25.equals((Object)booleanArray17));
      assertFalse(booleanArray25.equals((Object)booleanArray15));
      assertFalse(booleanArray25.equals((Object)booleanArray18));
      assertFalse(booleanArray25.equals((Object)booleanArray16));
      assertFalse(booleanArray25.equals((Object)booleanArray2));
      assertFalse(booleanArray25.equals((Object)booleanArray20));
      assertFalse(booleanArray25.equals((Object)booleanArray24));
      assertFalse(booleanArray25.equals((Object)booleanArray13));
      
      booleanArray25[0] = booleanArray5;
      booleanArray25[1] = booleanArray10;
      booleanArray25[2] = booleanArray23;
      booleanArray25[3] = booleanArray22;
      boolean[] booleanArray26 = new boolean[8];
      assertFalse(booleanArray26.equals((Object)booleanArray10));
      assertFalse(booleanArray26.equals((Object)booleanArray22));
      assertFalse(booleanArray26.equals((Object)booleanArray3));
      assertFalse(booleanArray26.equals((Object)booleanArray9));
      assertFalse(booleanArray26.equals((Object)booleanArray4));
      assertFalse(booleanArray26.equals((Object)booleanArray6));
      assertFalse(booleanArray26.equals((Object)booleanArray8));
      assertFalse(booleanArray26.equals((Object)booleanArray23));
      assertFalse(booleanArray26.equals((Object)booleanArray12));
      assertFalse(booleanArray26.equals((Object)booleanArray5));
      assertFalse(booleanArray26.equals((Object)booleanArray14));
      assertFalse(booleanArray26.equals((Object)booleanArray7));
      
      booleanArray26[0] = true;
      booleanArray26[1] = true;
      booleanArray26[2] = false;
      booleanArray26[3] = false;
      booleanArray26[4] = true;
      booleanArray26[5] = false;
      booleanArray26[6] = true;
      booleanArray26[7] = true;
      booleanArray25[4] = booleanArray26;
      booleanArray25[5] = booleanArray4;
      booleanArray25[6] = booleanArray6;
      booleanArray25[7] = booleanArray4;
      booleanArray19[7] = booleanArray25;
      booleanArray0[1] = booleanArray19;
      boolean[][][] booleanArray27 = new boolean[2][3][5];
      assertFalse(booleanArray27.equals((Object)booleanArray19));
      assertFalse(booleanArray27.equals((Object)booleanArray1));
      
      booleanArray27[0] = booleanArray21;
      booleanArray27[1] = booleanArray25;
      booleanArray0[2] = booleanArray27;
      boolean[][][] booleanArray28 = new boolean[8][9][4];
      assertFalse(booleanArray28.equals((Object)booleanArray1));
      assertFalse(booleanArray28.equals((Object)booleanArray19));
      assertFalse(booleanArray28.equals((Object)booleanArray27));
      
      booleanArray28[0] = booleanArray2;
      booleanArray28[1] = booleanArray2;
      booleanArray28[2] = booleanArray13;
      booleanArray28[3] = booleanArray18;
      booleanArray28[4] = booleanArray16;
      booleanArray28[5] = booleanArray24;
      booleanArray28[6] = booleanArray17;
      booleanArray28[7] = booleanArray20;
      booleanArray0[3] = booleanArray28;
      boolean[][][] booleanArray29 = new boolean[9][6][8];
      assertFalse(booleanArray29.equals((Object)booleanArray28));
      assertFalse(booleanArray29.equals((Object)booleanArray1));
      assertFalse(booleanArray29.equals((Object)booleanArray19));
      assertFalse(booleanArray29.equals((Object)booleanArray27));
      
      booleanArray29[0] = booleanArray21;
      boolean[][] booleanArray30 = new boolean[9][7];
      assertFalse(booleanArray30.equals((Object)booleanArray25));
      assertFalse(booleanArray30.equals((Object)booleanArray16));
      assertFalse(booleanArray30.equals((Object)booleanArray15));
      assertFalse(booleanArray30.equals((Object)booleanArray24));
      assertFalse(booleanArray30.equals((Object)booleanArray20));
      assertFalse(booleanArray30.equals((Object)booleanArray17));
      assertFalse(booleanArray30.equals((Object)booleanArray2));
      assertFalse(booleanArray30.equals((Object)booleanArray21));
      assertFalse(booleanArray30.equals((Object)booleanArray11));
      assertFalse(booleanArray30.equals((Object)booleanArray13));
      assertFalse(booleanArray30.equals((Object)booleanArray18));
      
      booleanArray30[0] = booleanArray3;
      booleanArray30[1] = booleanArray7;
      booleanArray30[2] = booleanArray12;
      booleanArray30[3] = booleanArray3;
      booleanArray30[4] = booleanArray8;
      booleanArray30[5] = booleanArray4;
      booleanArray30[6] = booleanArray6;
      booleanArray30[7] = booleanArray12;
      booleanArray30[8] = booleanArray9;
      booleanArray29[1] = booleanArray30;
      booleanArray29[2] = booleanArray21;
      booleanArray29[3] = booleanArray20;
      booleanArray29[4] = booleanArray13;
      booleanArray29[5] = booleanArray17;
      booleanArray29[6] = booleanArray17;
      booleanArray29[7] = booleanArray25;
      booleanArray29[8] = booleanArray20;
      booleanArray0[4] = booleanArray29;
      boolean[][][] booleanArray31 = new boolean[6][5][1];
      assertFalse(booleanArray31.equals((Object)booleanArray1));
      assertFalse(booleanArray31.equals((Object)booleanArray27));
      assertFalse(booleanArray31.equals((Object)booleanArray19));
      assertFalse(booleanArray31.equals((Object)booleanArray29));
      assertFalse(booleanArray31.equals((Object)booleanArray28));
      
      booleanArray31[0] = booleanArray15;
      booleanArray31[1] = booleanArray2;
      booleanArray31[2] = booleanArray18;
      booleanArray31[3] = booleanArray15;
      boolean[][] booleanArray32 = new boolean[5][9];
      assertFalse(booleanArray32.equals((Object)booleanArray16));
      assertFalse(booleanArray32.equals((Object)booleanArray2));
      assertFalse(booleanArray32.equals((Object)booleanArray24));
      assertFalse(booleanArray32.equals((Object)booleanArray15));
      assertFalse(booleanArray32.equals((Object)booleanArray20));
      assertFalse(booleanArray32.equals((Object)booleanArray25));
      assertFalse(booleanArray32.equals((Object)booleanArray18));
      assertFalse(booleanArray32.equals((Object)booleanArray11));
      assertFalse(booleanArray32.equals((Object)booleanArray21));
      assertFalse(booleanArray32.equals((Object)booleanArray13));
      assertFalse(booleanArray32.equals((Object)booleanArray17));
      assertFalse(booleanArray32.equals((Object)booleanArray30));
      
      booleanArray32[0] = booleanArray5;
      booleanArray32[1] = booleanArray8;
      booleanArray32[2] = booleanArray10;
      booleanArray32[3] = booleanArray23;
      booleanArray32[4] = booleanArray14;
      booleanArray31[4] = booleanArray32;
      booleanArray31[5] = booleanArray18;
      booleanArray0[5] = booleanArray31;
      boolean[][][] booleanArray33 = new boolean[7][6][6];
      assertFalse(booleanArray33.equals((Object)booleanArray28));
      assertFalse(booleanArray33.equals((Object)booleanArray29));
      assertFalse(booleanArray33.equals((Object)booleanArray1));
      assertFalse(booleanArray33.equals((Object)booleanArray27));
      assertFalse(booleanArray33.equals((Object)booleanArray19));
      assertFalse(booleanArray33.equals((Object)booleanArray31));
      
      booleanArray33[0] = booleanArray21;
      booleanArray33[1] = booleanArray2;
      booleanArray33[2] = booleanArray21;
      booleanArray33[3] = booleanArray24;
      booleanArray33[4] = booleanArray17;
      booleanArray33[5] = booleanArray24;
      booleanArray33[6] = booleanArray13;
      booleanArray0[6] = booleanArray33;
      boolean[][][] booleanArray34 = new boolean[7][5][1];
      assertFalse(booleanArray34.equals((Object)booleanArray33));
      assertFalse(booleanArray34.equals((Object)booleanArray19));
      assertFalse(booleanArray34.equals((Object)booleanArray31));
      assertFalse(booleanArray34.equals((Object)booleanArray27));
      assertFalse(booleanArray34.equals((Object)booleanArray29));
      assertFalse(booleanArray34.equals((Object)booleanArray28));
      assertFalse(booleanArray34.equals((Object)booleanArray1));
      
      boolean[][] booleanArray35 = new boolean[5][4];
      assertFalse(booleanArray35.equals((Object)booleanArray32));
      assertFalse(booleanArray35.equals((Object)booleanArray24));
      assertFalse(booleanArray35.equals((Object)booleanArray16));
      assertFalse(booleanArray35.equals((Object)booleanArray15));
      assertFalse(booleanArray35.equals((Object)booleanArray20));
      assertFalse(booleanArray35.equals((Object)booleanArray17));
      assertFalse(booleanArray35.equals((Object)booleanArray25));
      assertFalse(booleanArray35.equals((Object)booleanArray18));
      assertFalse(booleanArray35.equals((Object)booleanArray13));
      assertFalse(booleanArray35.equals((Object)booleanArray30));
      assertFalse(booleanArray35.equals((Object)booleanArray11));
      assertFalse(booleanArray35.equals((Object)booleanArray21));
      assertFalse(booleanArray35.equals((Object)booleanArray2));
      
      booleanArray35[0] = booleanArray9;
      booleanArray35[1] = booleanArray9;
      booleanArray35[2] = booleanArray9;
      booleanArray35[3] = booleanArray6;
      booleanArray35[4] = booleanArray4;
      booleanArray34[0] = booleanArray35;
      booleanArray34[1] = booleanArray32;
      booleanArray34[2] = booleanArray16;
      booleanArray34[3] = booleanArray30;
      booleanArray34[4] = booleanArray17;
      booleanArray34[5] = booleanArray18;
      booleanArray34[6] = booleanArray15;
      booleanArray0[7] = booleanArray34;
      ArrayUtils.fill(booleanArray0, true);
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      Object[] objectArray1 = ArrayUtils.subArray(objectArray0, (-1886), 521);
      assertEquals(3, objectArray0.length);
      assertEquals(3, objectArray1.length);
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)117;
      int[] intArray0 = ArrayUtils.gapDecode(byteArray0);
      assertEquals(33, intArray0.length);
      assertEquals(6, byteArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-60), (byte) (-103), (byte)0, (byte)117}, byteArray0);
      
      List<Byte> list0 = ArrayUtils.deltaEncodeList(intArray0);
      assertEquals(33, intArray0.length);
      assertEquals(6, byteArray0.length);
      assertNotNull(list0);
      assertFalse(list0.contains((byte)117));
      assertTrue(list0.contains((byte)0));
      assertFalse(list0.isEmpty());
      assertEquals(7, list0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-60), (byte) (-103), (byte)0, (byte)117}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'x');
      assertNull(charArray0);
      
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(3194.559147974731);
      assertNotNull(double1);
      assertEquals(3194.559147974731, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertEquals(6, doubleArray0.length);
      assertNotNull(double2);
      assertEquals((-1.0), (double)double2, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1007.337801911));
      assertNotNull(double3);
      assertEquals((-1007.337801911), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(1.0);
      assertNotNull(double4);
      assertEquals(1.0, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(2371.526667407426);
      assertNotNull(double5);
      assertEquals(2371.526667407426, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      
      double double6 = Double.min(5.0, 0.0);
      assertEquals(0.0, double6, 0.01);
      
      doubleArray0[5] = double5;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 3194.559147974731, (-1.0), (-1007.337801911), 1.0, 2371.526667407426}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      Integer integer5 = new Integer(2369);
      integerArray0[5] = integer5;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 2369}, intArray0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1589);
      intArray0[1] = (-1354);
      intArray0[2] = (-593);
      intArray0[3] = 421;
      intArray0[4] = (-3207);
      intArray0[5] = 6;
      intArray0[6] = (-1727);
      intArray0[7] = 1821;
      int[] intArray1 = ArrayUtils.copy(intArray0);
      assertNotNull(intArray1);
      
      boolean boolean0 = ArrayUtils.equalContents(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 160.3896598821;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 160.3896598821;
      doubleArray1[4] = (-2290.0260147);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 1.0E9;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = 1377.289;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 160.3896598821;
      doubleArray2[1] = (-2290.0260147);
      doubleArray2[2] = (-2290.0260147);
      doubleArray2[3] = (-2290.0260147);
      doubleArray2[4] = 1.0E9;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 160.3896598821;
      doubleArray3[1] = 1.0E9;
      doubleArray1[1] = 570.7986058066;
      doubleArray0[2] = doubleArray3;
      double[][] doubleArray4 = ArrayUtils.copy(doubleArray0);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotNull(doubleArray4);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      int int0 = ArrayUtils.compareBooleanArrays(booleanArray0, booleanArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 160.3896598821;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.1;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      doubleArray1[6] = 1.0E9;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = 1377.289;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 160.3896598821;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.1;
      doubleArray2[3] = 0.1;
      doubleArray2[4] = 1.0E9;
      doubleArray2[5] = 1377.289;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 160.3896598821;
      doubleArray3[1] = 1.0E9;
      doubleArray3[2] = 570.7986058066;
      doubleArray0[1] = doubleArray3;
      double[][] doubleArray4 = ArrayUtils.copy(doubleArray0);
      assertNotNull(doubleArray4);
      
      boolean boolean0 = ArrayUtils.equals(doubleArray4, doubleArray4);
      assertNotSame(doubleArray4, doubleArray0);
      
      int[][] intArray0 = new int[6][0];
      int[] intArray1 = new int[7];
      intArray1[0] = (-2275);
      intArray1[1] = 28;
      intArray1[2] = 8;
      intArray1[3] = 877;
      intArray1[4] = 271;
      intArray1[5] = 1100;
      intArray1[6] = 785;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      intArray2[0] = 28;
      intArray2[1] = 785;
      intArray2[2] = (-4833);
      intArray2[3] = 1100;
      intArray2[4] = (-2275);
      intArray2[5] = (-2275);
      intArray2[6] = 28;
      intArray2[7] = 8;
      intArray2[8] = 1100;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[0];
      intArray0[2] = intArray3;
      int[] intArray4 = new int[2];
      intArray4[0] = 877;
      intArray4[1] = 877;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[4];
      intArray5[0] = 28;
      intArray5[1] = 28;
      intArray5[2] = 3178;
      intArray5[3] = 8;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[4];
      intArray6[0] = 3178;
      intArray6[1] = 28;
      intArray6[2] = 1100;
      intArray6[3] = 8;
      intArray0[5] = intArray6;
      boolean boolean1 = ArrayUtils.equalContents(intArray0, intArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)95;
      ArrayUtils.deltaDecodeList(byteArray0, (int) (byte)95, 0);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)95;
      intArray0[1] = (int) (byte)95;
      List<Byte> list0 = ArrayUtils.gapEncodeList(intArray0);
      assertEquals(2, list0.size());
      
      boolean boolean0 = ArrayUtils.equalContents(intArray0, intArray0);
      assertTrue(boolean0);
      
      ArrayUtils.gapDecodeList(byteArray0, 49, 49);
      int[] intArray1 = ArrayUtils.deltaDecode(byteArray0, 95, 44);
      assertArrayEquals(new int[] {0, 1}, intArray1);
      
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((byte)95);
      longArray0[0] = long0;
      Long long1 = new Long((-1L));
      longArray0[1] = long1;
      Long long2 = new Long((byte)95);
      longArray0[2] = long2;
      Long long3 = new Long(0L);
      longArray0[3] = long3;
      Long long4 = new Long((long) longArray0[0]);
      longArray0[4] = long4;
      Long long5 = new Long((-1L));
      longArray0[5] = long5;
      Long long6 = new Long(0L);
      longArray0[6] = long6;
      Long long7 = new Long(95);
      longArray0[7] = long7;
      Long long8 = new Long((long) longArray0[4]);
      longArray0[8] = long8;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 0L);
      assertArrayEquals(new long[] {95L, (-1L), 95L, 0L, 95L, (-1L), 0L, 95L, 95L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      int[] intArray0 = ArrayUtils.asPrimitiveIntArray(arrayList0);
      byte[] byteArray0 = ArrayUtils.gapEncode(intArray0);
      assertEquals(0, byteArray0.length);
      
      Character[] characterArray0 = new Character[2];
      char char0 = 'i';
      Character character0 = Character.valueOf('i');
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'w');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'i', 'i'}, charArray0);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-807.2));
      doubleArray0[0] = double0;
      Double double1 = new Double(1.0);
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      doubleArray0[2] = double2;
      Double double3 = new Double(char0);
      doubleArray0[3] = double3;
      Double double4 = new Double(char0);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, double4);
      assertTrue(boolean0);
      
      Object[] objectArray0 = ArrayUtils.removeAt((Object[]) doubleArray0, 2953);
      assertNotNull(objectArray0);
      
      float[][][] floatArray0 = new float[5][1][8];
      float[][] floatArray1 = new float[5][0];
      float[] floatArray2 = new float[2];
      floatArray2[0] = (float) 'w';
      floatArray2[1] = (float) 'i';
      floatArray1[0] = floatArray2;
      float[] floatArray3 = new float[8];
      floatArray3[0] = (float) 'i';
      floatArray3[1] = (float) 2953;
      floatArray3[2] = (float) 2953;
      floatArray3[3] = (float) 'w';
      floatArray3[4] = (float) 'w';
      floatArray3[5] = (float) 2953;
      floatArray3[6] = (float) char0;
      floatArray3[7] = (float) char0;
      floatArray1[1] = floatArray3;
      float[] floatArray4 = new float[6];
      floatArray4[0] = (float) char0;
      floatArray4[1] = (float) char0;
      floatArray4[2] = (float) char0;
      floatArray4[3] = (float) 'w';
      floatArray4[5] = (float) char0;
      floatArray1[2] = floatArray4;
      float[] floatArray5 = new float[2];
      floatArray5[0] = (float) 2953;
      floatArray5[1] = (float) char0;
      floatArray1[3] = floatArray5;
      float[] floatArray6 = new float[7];
      floatArray6[0] = (float) 'i';
      floatArray6[1] = (float) 'i';
      floatArray6[2] = (float) char0;
      floatArray6[3] = (float) 'i';
      floatArray6[4] = (float) 'i';
      floatArray6[5] = (float) 'i';
      floatArray6[6] = (float) 'i';
      floatArray1[4] = floatArray6;
      floatArray0[0] = floatArray1;
      float[][] floatArray7 = new float[2][1];
      floatArray7[0] = floatArray3;
      floatArray7[1] = floatArray5;
      floatArray0[1] = floatArray7;
      float[][] floatArray8 = new float[0][9];
      floatArray0[2] = floatArray8;
      float[][] floatArray9 = new float[7][4];
      floatArray9[0] = floatArray5;
      floatArray9[2] = floatArray6;
      floatArray9[3] = floatArray6;
      float[] floatArray10 = new float[9];
      floatArray10[0] = (float) char0;
      floatArray10[1] = (float) 'i';
      floatArray10[2] = (float) 'w';
      floatArray10[3] = (float) 'w';
      floatArray10[4] = (float) char0;
      floatArray10[5] = (float) 'i';
      floatArray10[6] = (float) char0;
      floatArray10[7] = (float) char0;
      floatArray10[8] = (float) 2953;
      floatArray9[4] = floatArray10;
      floatArray9[5] = floatArray3;
      floatArray9[6] = floatArray4;
      floatArray0[3] = floatArray9;
      float[][] floatArray11 = new float[3][0];
      floatArray11[0] = floatArray10;
      floatArray11[1] = floatArray10;
      float[] floatArray12 = new float[1];
      floatArray12[0] = (float) char0;
      floatArray11[2] = floatArray12;
      floatArray0[4] = floatArray11;
      float[][][] floatArray13 = ArrayUtils.copy(floatArray0);
      assertNotSame(floatArray13, floatArray0);
      assertNotNull(floatArray13);
  }
}
