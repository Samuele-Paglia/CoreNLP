/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 06 09:44:20 GMT 2018
 */

package edu.stanford.nlp.util;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.stanford.nlp.objectbank.ObjectBank;
import edu.stanford.nlp.sequences.SeqClassifierFlags;
import edu.stanford.nlp.util.Triple;
import edu.stanford.nlp.util.XMLUtils;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.List;
import java.util.Properties;
import java.util.Stack;
import java.util.Vector;
import javax.xml.parsers.DocumentBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;
import org.w3c.dom.Element;
import org.xml.sax.SAXParseException;
 
public class XMLUtils_ESTest extends XMLUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XMLUtils.XMLTag xMLUtils_XMLTag0 = XMLUtils.parseTag("&sup3;");
      assertNull(xMLUtils_XMLTag0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XMLUtils.XMLTag xMLUtils_XMLTag0 = null;
      try {
        xMLUtils_XMLTag0 = new XMLUtils.XMLTag(")Zt1?)S0<f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag did not start with <
         //
         verifyException("edu.stanford.nlp.util.XMLUtils$XMLTag", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = XMLUtils.escapeAttributeXML("n2N~4LJ(}J!+%IHpWe");
      assertEquals("n2N~4LJ(}J!+%IHpWe", string0);
  }
  @Ignore
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ObjectBank.PathToFileFunction objectBank_PathToFileFunction0 = new ObjectBank.PathToFileFunction();
      MockFile mockFile0 = (MockFile)objectBank_PathToFileFunction0.apply("");
      List<String> list0 = XMLUtils.getTextContentFromTagsFromFile(mockFile0, "");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ObjectBank.PathToFileFunction objectBank_PathToFileFunction0 = new ObjectBank.PathToFileFunction();
      File file0 = objectBank_PathToFileFunction0.apply("");
      List<Element> list0 = XMLUtils.getTagElementsFromFile(file0, "");
      assertTrue(list0.isEmpty());
  }
  @Ignore
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      List<Triple<String, Element, String>> list0 = XMLUtils.getTagElementTriplesFromFile(mockFile0, "GWhw<} ");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = XMLUtils.unescapeStringForXML("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      String string0 = XMLUtils.readUntilTag(stringReader0);
      assertEquals("", string0);
  }
  @Ignore
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile(")l/:c96", "");
      List<String> list0 = XMLUtils.getTextContentFromTagsFromFile(mockFile0, "~|5]G4Ylj(=q8$w;2Qn");
      assertEquals(0, list0.size());
  }
  @Ignore
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ObjectBank.PathToFileFunction objectBank_PathToFileFunction0 = new ObjectBank.PathToFileFunction();
      MockFile mockFile0 = (MockFile)objectBank_PathToFileFunction0.apply("eCPf+!J|aHtX>N");
      List<Element> list0 = XMLUtils.getTagElementsFromFile(mockFile0, "");
      assertEquals(0, list0.size());
  }
  @Ignore
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile(")l/:c96", "");
      List<Triple<String, Element, String>> list0 = XMLUtils.getTagElementTriplesFromFileNumBoundedSAXException(mockFile0, "", 1795400231);
      assertTrue(list0.isEmpty());
  }
  @Ignore
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      File file0 = MockFile.createTempFile("5AfLlyS4MUe1VB1E`j", "5AfLlyS4MUe1VB1E`j", (File) null);
      List<Triple<String, Element, String>> list0 = XMLUtils.getTagElementTriplesFromFileNumBounded(file0, "5AfLlyS4MUe1VB1E`j", 163);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ObjectBank.PathToFileFunction objectBank_PathToFileFunction0 = new ObjectBank.PathToFileFunction();
      File file0 = objectBank_PathToFileFunction0.apply("f+hpZ6");
      List<Triple<String, Element, String>> list0 = XMLUtils.getTagElementTriplesFromFile(file0, "o3t*@hn(976+");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = XMLUtils.escapeXML("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = XMLUtils.escapeTextAroundXMLTags("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = XMLUtils.escapeElementXML("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = XMLUtils.escapeAttributeXML("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLUtils.unescapeStringForXML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLUtils.readUntilTag((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLUtils.readTag((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("jb");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      bufferedReader0.close();
      try { 
        XMLUtils.readTag(bufferedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      try { 
        XMLUtils.readDocumentFromString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      try { 
        XMLUtils.readDocumentFromFile("#!\"o;T~c,k'");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLUtils.readAndParseTag((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",;:?NRelV/");
      stringReader0.close();
      try { 
        XMLUtils.readAndParseTag(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      try { 
        XMLUtils.main((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[0];
      try { 
        XMLUtils.main(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("edu.stanford.nlp.util.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLUtils.isBreaking((XMLUtils.XMLTag) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLUtils.getValidatingXmlParser((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.transform.stream.StreamSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      try { 
        XMLUtils.getTagElementTriplesFromFileSAXException(mockFile0, "");
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLUtils.getTagElementTriplesFromFileSAXException((File) null, "HtOtA+~G7c^9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File cannot be null
         //
         verifyException("javax.xml.parsers.DocumentBuilder", e);
      }
  }
  @Ignore
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      try { 
        XMLUtils.getTagElementTriplesFromFileNumBoundedSAXException(mockFile0, "", 1041);
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLUtils.getTagElementTriplesFromFileNumBoundedSAXException((File) null, "(@6W", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File cannot be null
         //
         verifyException("javax.xml.parsers.DocumentBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLUtils.findSpace((String) null, 2714);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLUtils.escapeXML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLUtils.escapeTextAroundXMLTags((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLUtils.escapeElementXML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLUtils.escapeAttributeXML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XMLUtils.XMLTag xMLUtils_XMLTag0 = XMLUtils.parseTag("<Ig");
      assertNull(xMLUtils_XMLTag0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&aogon;");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      CharBuffer charBuffer0 = CharBuffer.allocate(562);
      bufferedReader0.read(charBuffer0);
      String string0 = XMLUtils.readTag(bufferedReader0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&aogon;");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      String string0 = XMLUtils.readTag(bufferedReader0);
      assertEquals("<&aogon;", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XMLUtils.XMLTag xMLUtils_XMLTag0 = null;
      try {
        xMLUtils_XMLTag0 = new XMLUtils.XMLTag("<}ZrcP:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag did not end with >
         //
         verifyException("edu.stanford.nlp.util.XMLUtils$XMLTag", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&racute;");
      XMLUtils.readUntilTag(stringReader0);
      XMLUtils.XMLTag xMLUtils_XMLTag0 = XMLUtils.readAndParseTag(stringReader0);
      assertNull(xMLUtils_XMLTag0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("H)'&b6<Vn8");
      String string0 = XMLUtils.readUntilTag(stringReader0);
      assertEquals("H)'&b6", string0);
  }
  @Ignore
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockFile mockFile0 = new MockFile("&Psi;", "&Psi;");
      List<Triple<String, Element, String>> list0 = XMLUtils.getTagElementTriplesFromFileSAXException(mockFile0, "&Psi;");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      XMLUtils.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "xQ,X";
      try { 
        XMLUtils.main(stringArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unable to open \"xQ,X\" as class path, filename or URL
         //
         verifyException("edu.stanford.nlp.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XMLUtils.XMLTag xMLUtils_XMLTag0 = XMLUtils.parseTag("XmzOco");
      assertNull(xMLUtils_XMLTag0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XMLUtils.XMLTag xMLUtils_XMLTag0 = XMLUtils.parseTag("");
      assertNull(xMLUtils_XMLTag0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XMLUtils.XMLTag xMLUtils_XMLTag0 = XMLUtils.parseTag((String) null);
      assertNull(xMLUtils_XMLTag0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XMLUtils.XMLTag xMLUtils_XMLTag0 = new XMLUtils.XMLTag("<([^>s]*)[^>]*>");
      Properties properties0 = new Properties();
      SeqClassifierFlags seqClassifierFlags0 = new SeqClassifierFlags(properties0);
      xMLUtils_XMLTag0.getFirstNonNullAttributeFromList(seqClassifierFlags0.gazettes);
      assertFalse(xMLUtils_XMLTag0.isEndTag);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XMLUtils.XMLTag xMLUtils_XMLTag0 = null;
      try {
        xMLUtils_XMLTag0 = new XMLUtils.XMLTag("At-a(87=}M|7-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag did not start with <
         //
         verifyException("edu.stanford.nlp.util.XMLUtils$XMLTag", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XMLUtils.XMLTag xMLUtils_XMLTag0 = null;
      try {
        xMLUtils_XMLTag0 = new XMLUtils.XMLTag("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Attempted to parse empty/null tag
         //
         verifyException("edu.stanford.nlp.util.XMLUtils$XMLTag", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XMLUtils.XMLTag xMLUtils_XMLTag0 = null;
      try {
        xMLUtils_XMLTag0 = new XMLUtils.XMLTag((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Attempted to parse empty/null tag
         //
         verifyException("edu.stanford.nlp.util.XMLUtils$XMLTag", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = XMLUtils.findSpace("", (-2064));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = XMLUtils.findSpace("v .[t)w", (-1556155337));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = XMLUtils.escapeAttributeXML("H)'&b6<Vn8");
      assertEquals("H)'&amp;b6<Vn8", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = XMLUtils.escapeElementXML("Q}T[ssg-z<3:MD/[.");
      assertEquals("Q}T[ssg-z&lt;3:MD/[.", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = XMLUtils.escapeElementXML("P]>~x&?M/#[#:G");
      assertEquals("P]&gt;~x&amp;?M/#[#:G", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = XMLUtils.escapeXML("h,&'rIIA[6!{,");
      assertEquals("h,&amp;&apos;rIIA[6!{,", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = XMLUtils.escapeTextAroundXMLTags("7\"z-,rNh;svymD>0");
      assertEquals("7&quot;z-,rNh;svymD&gt;0", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = XMLUtils.escapeXML("mdN)TiVqoCS*<`R");
      assertEquals("mdN)TiVqoCS*&lt;`R", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = XMLUtils.unescapeStringForXML("&umacr;");
      assertEquals("u", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = XMLUtils.unescapeStringForXML("&eth;");
      assertEquals("\u00F0", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader("recap");
      XMLUtils.XMLTag xMLUtils_XMLTag0 = XMLUtils.readAndParseTag(stringReader0);
      assertNull(xMLUtils_XMLTag0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      boolean boolean0 = XMLUtils.isBreaking("P9m");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringReader stringReader0 = new StringReader("H)'&b6<Vn8");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      Stack<Integer> stack0 = new Stack<Integer>();
      // Undeclared exception!
      try { 
        XMLUtils.stripTags(bufferedReader0, stack0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'g");
      String string0 = XMLUtils.readUntilTag(stringReader0);
      assertEquals("'g", string0);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      String string1 = XMLUtils.stripTags(stringReader0, vector0, true);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7\"z-,rNh;svymD>0");
      Stack<Integer> stack0 = new Stack<Integer>();
      String string0 = XMLUtils.stripTags(stringReader0, stack0, true);
      assertFalse(stack0.isEmpty());
      assertEquals("7\"z-,rNh;svymD>0", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLUtils.stripTags((Reader) null, (List<Integer>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLUtils.getTagElementTriplesFromFile((File) null, "HtOtA+~G7c^9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File cannot be null
         //
         verifyException("javax.xml.parsers.DocumentBuilder", e);
      }
  }
  @Ignore
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      try { 
        XMLUtils.readDocumentFromFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLUtils.getTagElementTriplesFromFileNumBounded((File) null, "edu.stanford.nlp.trees.NPTmpRetainingTreeNormalizer$NPTmpRetainingTreeReaderFactory", 1094);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File cannot be null
         //
         verifyException("javax.xml.parsers.DocumentBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLUtils.getTagElementsFromFile((File) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File cannot be null
         //
         verifyException("javax.xml.parsers.DocumentBuilder", e);
      }
  }
  @Ignore
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      MockFile mockFile0 = new MockFile("edu.stanford.nlp.time.TimeFormatter$RegexComponent");
      DocumentBuilder documentBuilder0 = XMLUtils.getValidatingXmlParser(mockFile0);
      assertNull(documentBuilder0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      try { 
        XMLUtils.readDocumentFromString("normTableEncoding");
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DocumentBuilder documentBuilder0 = XMLUtils.getXmlParser();
      assertNotNull(documentBuilder0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLUtils.getTextContentFromTagsFromFile((File) null, "9k h(L~nIuLR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File cannot be null
         //
         verifyException("javax.xml.parsers.DocumentBuilder", e);
      }
  }
}
