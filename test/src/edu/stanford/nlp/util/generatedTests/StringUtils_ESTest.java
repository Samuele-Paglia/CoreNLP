/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 06 09:26:33 GMT 2018
 */

package edu.stanford.nlp.util;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.stanford.nlp.ie.AbstractSequenceClassifier;
import edu.stanford.nlp.ie.NERClassifierCombiner;
import edu.stanford.nlp.ling.BasicDocument;
import edu.stanford.nlp.ling.CategoryWordTag;
import edu.stanford.nlp.ling.CoreAnnotations;
import edu.stanford.nlp.ling.CoreLabel;
import edu.stanford.nlp.ling.HasWord;
import edu.stanford.nlp.ling.IndexedWord;
import edu.stanford.nlp.ling.Label;
import edu.stanford.nlp.ling.LabeledWord;
import edu.stanford.nlp.ling.StringLabel;
import edu.stanford.nlp.ling.TaggedWord;
import edu.stanford.nlp.ling.Word;
import edu.stanford.nlp.ling.WordFactory;
import edu.stanford.nlp.ling.WordLemmaTag;
import edu.stanford.nlp.ling.WordTag;
import edu.stanford.nlp.objectbank.ObjectBank;
import edu.stanford.nlp.process.Morphology;
import edu.stanford.nlp.semgraph.SemanticGraph;
import edu.stanford.nlp.sequences.SeqClassifierFlags;
import edu.stanford.nlp.sequences.TrueCasingForNISTDocumentReaderAndWriter;
import edu.stanford.nlp.trees.LabeledScoredTreeNode;
import edu.stanford.nlp.trees.Tree;
import edu.stanford.nlp.trees.TreeGraphNode;
import edu.stanford.nlp.trees.TypedDependency;
import edu.stanford.nlp.util.ArrayCoreMap;
import edu.stanford.nlp.util.CoreMap;
import edu.stanford.nlp.util.DeltaIndex;
import edu.stanford.nlp.util.HashIndex;
import edu.stanford.nlp.util.HashableCoreMap;
import edu.stanford.nlp.util.MapFactory;
import edu.stanford.nlp.util.RegexStringFilter;
import edu.stanford.nlp.util.StringUtils;
import edu.stanford.nlp.util.TypesafeMap;
import edu.stanford.nlp.util.logging.Redwood;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.Reader;
import java.lang.reflect.Array;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.CharBuffer;
import java.nio.file.Path;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        StringUtils.isAlpha((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[][] objectArray0 = new Object[2][0];
      Object[] objectArray1 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray1[0] = object0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[0];
      assertFalse(objectArray2.equals((Object)objectArray1));
      
      objectArray0[1] = objectArray2;
      // Undeclared exception!
      try { 
        StringUtils.makeTextTable(objectArray0, objectArray2, objectArray2, 3777, 0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("edu.stanford.nlp.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TreeSet<StringUtils> treeSet0 = new TreeSet<StringUtils>();
      assertNotNull(treeSet0);
      
      String string0 = StringUtils.join((Iterable<StringUtils>) treeSet0, "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Map<String, String> map0 = StringUtils.decodeMap("");
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      String string1 = StringUtils.expandEnvironmentVariables("", map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.padLeft(0, 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.lookingAt(".3>C", "8KKC@L7YZ   ");
      assertFalse(boolean0);
      
      HashIndex<TypedDependency> hashIndex0 = new HashIndex<TypedDependency>(0);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertNotNull(hashIndex0);
      
      DeltaIndex<TypedDependency> deltaIndex0 = new DeltaIndex<TypedDependency>(hashIndex0);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertFalse(deltaIndex0.isLocked());
      assertEquals(0, deltaIndex0.size());
      assertTrue(deltaIndex0.isEmpty());
      assertNotNull(deltaIndex0);
      
      SemanticGraph semanticGraph0 = new SemanticGraph(deltaIndex0);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertFalse(deltaIndex0.isLocked());
      assertEquals(0, deltaIndex0.size());
      assertTrue(deltaIndex0.isEmpty());
      assertNotNull(semanticGraph0);
      assertFalse(SemanticGraph.addSRLArcs);
      
      IndexedWord indexedWord0 = new IndexedWord("", 1074, 0);
      assertEquals(0, indexedWord0.copyCount());
      assertEquals(3, indexedWord0.size());
      assertNotNull(indexedWord0);
      
      IndexedWord indexedWord1 = semanticGraph0.getCommonAncestor(indexedWord0, indexedWord0);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertFalse(deltaIndex0.isLocked());
      assertEquals(0, deltaIndex0.size());
      assertTrue(deltaIndex0.isEmpty());
      assertEquals(0, indexedWord0.copyCount());
      assertEquals(3, indexedWord0.size());
      assertEquals(0, indexedWord1.copyCount());
      assertEquals(3, indexedWord1.size());
      assertNotNull(indexedWord1);
      assertSame(indexedWord0, indexedWord1);
      assertSame(indexedWord1, indexedWord0);
      assertFalse(SemanticGraph.addSRLArcs);
      
      TypedDependency typedDependency0 = mock(TypedDependency.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = deltaIndex0.add(typedDependency0);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertFalse(deltaIndex0.isLocked());
      assertEquals(1, deltaIndex0.size());
      assertFalse(deltaIndex0.isEmpty());
      assertFalse(boolean1 == boolean0);
      assertFalse(hashIndex0.contains(typedDependency0));
      assertTrue(deltaIndex0.contains(typedDependency0));
      assertTrue(boolean1);
      
      LabeledWord labeledWord0 = new LabeledWord("quickstep", indexedWord1);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertFalse(deltaIndex0.isLocked());
      assertEquals(1, deltaIndex0.size());
      assertFalse(deltaIndex0.isEmpty());
      assertEquals(0, indexedWord0.copyCount());
      assertEquals(3, indexedWord0.size());
      assertEquals(0, indexedWord1.copyCount());
      assertEquals(3, indexedWord1.size());
      assertEquals("quickstep", labeledWord0.value());
      assertEquals("quickstep", labeledWord0.word());
      assertEquals((-1), labeledWord0.endPosition());
      assertEquals((-1), labeledWord0.beginPosition());
      assertNotNull(labeledWord0);
      assertFalse(hashIndex0.contains(typedDependency0));
      assertTrue(deltaIndex0.contains(typedDependency0));
      assertFalse(SemanticGraph.addSRLArcs);
      
      String string3 = StringUtils.trimWithEllipsis((Object) labeledWord0, 1074);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertFalse(deltaIndex0.isLocked());
      assertEquals(1, deltaIndex0.size());
      assertFalse(deltaIndex0.isEmpty());
      assertEquals(0, indexedWord0.copyCount());
      assertEquals(3, indexedWord0.size());
      assertEquals(0, indexedWord1.copyCount());
      assertEquals(3, indexedWord1.size());
      assertEquals("quickstep", labeledWord0.value());
      assertEquals("quickstep", labeledWord0.word());
      assertEquals((-1), labeledWord0.endPosition());
      assertEquals((-1), labeledWord0.beginPosition());
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(hashIndex0.contains(typedDependency0));
      assertTrue(deltaIndex0.contains(typedDependency0));
      assertSame(indexedWord0, indexedWord1);
      assertSame(indexedWord1, indexedWord0);
      assertFalse(SemanticGraph.addSRLArcs);
      
      String string4 = StringUtils.getBaseName("quickstep", ".3>C", "microprogram");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("quickstep", string4);
      
      Set<String> set0 = StringUtils.stringToSet("d-*d$W)z/3E](tY", "5lcG3+\"_LLv7^|e`");
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains(string1));
      assertTrue(set0.contains("d-*d$W)z/3E](tY"));
      
      boolean boolean2 = StringUtils.lookingAt(";Wr+,ml:UT)%%*NVD43", "picket");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = StringUtils.padLeftOrTrim("q\"&f9H_", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[][] stringArray0 = new String[8][6];
      String[] stringArray1 = new String[4];
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[2] = "q\"&f9H_";
      stringArray1[3] = "";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[9];
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "q\"&f9H_";
      stringArray2[1] = "o8N)$U$8&_CY";
      stringArray2[2] = "q\"&f9H_";
      stringArray2[3] = "";
      stringArray2[4] = "q\"&f9H_";
      stringArray2[5] = "";
      stringArray2[6] = "";
      stringArray2[7] = "";
      stringArray2[8] = "q\"&f9H_";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[8];
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      
      stringArray3[0] = "o8N)$U$8&_CY";
      stringArray3[1] = "out-general";
      stringArray3[2] = "q\"&f9H_";
      stringArray3[3] = "o8N)$U$8&_CY";
      stringArray3[4] = "";
      stringArray3[5] = "q\"&f9H_";
      stringArray3[6] = "o8N)$U$8&_CY";
      stringArray3[7] = "o8N)$U$8&_CY";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[9];
      assertFalse(stringArray4.equals((Object)stringArray3));
      assertFalse(stringArray4.equals((Object)stringArray1));
      assertFalse(stringArray4.equals((Object)stringArray2));
      
      stringArray4[0] = "";
      stringArray4[1] = "";
      stringArray4[2] = "q\"&f9H_";
      stringArray4[3] = "";
      stringArray4[4] = "";
      stringArray4[5] = "";
      stringArray4[6] = "";
      stringArray4[7] = "o8N)$U$8&_CY";
      stringArray4[8] = "q\"&f9H_";
      stringArray0[3] = stringArray4;
      String[] stringArray5 = new String[3];
      assertFalse(stringArray5.equals((Object)stringArray4));
      assertFalse(stringArray5.equals((Object)stringArray2));
      assertFalse(stringArray5.equals((Object)stringArray1));
      assertFalse(stringArray5.equals((Object)stringArray3));
      
      stringArray5[0] = "edu.stanford.nlp.ling.CoreAnnotations$SRLInstancesAnnotation";
      stringArray5[1] = "";
      stringArray5[2] = "out-general";
      stringArray0[4] = stringArray5;
      String[] stringArray6 = new String[8];
      assertFalse(stringArray6.equals((Object)stringArray2));
      assertFalse(stringArray6.equals((Object)stringArray4));
      assertFalse(stringArray6.equals((Object)stringArray3));
      assertFalse(stringArray6.equals((Object)stringArray1));
      assertFalse(stringArray6.equals((Object)stringArray5));
      
      stringArray6[0] = "q\"&f9H_";
      stringArray6[1] = "o8N)$U$8&_CY";
      stringArray6[2] = "o8N)$U$8&_CY";
      stringArray6[3] = "q\"&f9H_";
      stringArray6[4] = "o8N)$U$8&_CY";
      stringArray6[5] = "o8N)$U$8&_CY";
      stringArray6[6] = "edu.stanford.nlp.ling.CoreAnnotations$SRLInstancesAnnotation";
      stringArray6[7] = "edu.stanford.nlp.ling.CoreAnnotations$SRLInstancesAnnotation";
      stringArray0[5] = stringArray6;
      String[] stringArray7 = new String[6];
      assertFalse(stringArray7.equals((Object)stringArray1));
      assertFalse(stringArray7.equals((Object)stringArray6));
      assertFalse(stringArray7.equals((Object)stringArray5));
      assertFalse(stringArray7.equals((Object)stringArray3));
      assertFalse(stringArray7.equals((Object)stringArray2));
      assertFalse(stringArray7.equals((Object)stringArray4));
      
      stringArray7[0] = "friday";
      stringArray7[1] = "edu.stanford.nlp.ling.CoreAnnotations$SRLInstancesAnnotation";
      stringArray7[2] = "q\"&f9H_";
      stringArray7[3] = "q\"&f9H_";
      stringArray7[4] = "";
      stringArray7[5] = "edu.stanford.nlp.ling.CoreAnnotations$SRLInstancesAnnotation";
      stringArray0[6] = stringArray7;
      String[] stringArray8 = new String[4];
      assertFalse(stringArray8.equals((Object)stringArray3));
      assertFalse(stringArray8.equals((Object)stringArray7));
      assertFalse(stringArray8.equals((Object)stringArray4));
      assertFalse(stringArray8.equals((Object)stringArray6));
      assertFalse(stringArray8.equals((Object)stringArray5));
      assertFalse(stringArray8.equals((Object)stringArray1));
      assertFalse(stringArray8.equals((Object)stringArray2));
      
      stringArray8[0] = "edu.stanford.nlp.ling.CoreAnnotations$SRLInstancesAnnotation";
      stringArray8[1] = "edu.stanford.nlp.ling.CoreAnnotations$SRLInstancesAnnotation";
      stringArray8[2] = "out-general";
      stringArray8[3] = "";
      stringArray0[7] = stringArray8;
      // Undeclared exception!
      try { 
        StringUtils.makeHTMLTable(stringArray0, stringArray1, stringArray8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("edu.stanford.nlp.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "";
      int int0 = (-2621);
      // Undeclared exception!
      try { 
        StringUtils.padLeftOrTrim("", (-2621));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.getBaseName("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      Object[][] objectArray0 = new Object[2][7];
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) "";
      Class<CategoryWordTag> class0 = CategoryWordTag.class;
      String string2 = null;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String string3 = "nCB%pa %";
      stringArray0[3] = "nCB%pa %";
      stringArray0[4] = null;
      stringArray0[5] = null;
      // Undeclared exception!
      try { 
        StringUtils.columnStringToObject((Class) class0, "", (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[][] objectArray0 = new Object[8][3];
      Object[] objectArray1 = new Object[2];
      Class<Object> class0 = Object.class;
      String string0 = "";
      String string1 = "n|cBP/pZrpP.be1tk6X";
      RegexStringFilter regexStringFilter0 = new RegexStringFilter("n|cBP/pZrpP.be1tk6X");
      assertNotNull(regexStringFilter0);
      
      Pattern pattern0 = regexStringFilter0.pattern;
      assertEquals(0, pattern0.flags());
      assertEquals("n|cBP/pZrpP.be1tk6X", pattern0.pattern());
      assertEquals("n|cBP/pZrpP.be1tk6X", pattern0.toString());
      assertNotNull(pattern0);
      
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        StringUtils.columnStringToObject((Class<?>) class0, "", pattern0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("edu.stanford.nlp.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "";
      List<List<String>> list0 = StringUtils.splitFieldsFast("", "");
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      TreeSet<TypesafeMap.Key<Pattern>> treeSet0 = new TreeSet<TypesafeMap.Key<Pattern>>();
      assertNotNull(treeSet0);
      
      TypesafeMap.Key<Pattern> typesafeMap_Key0 = (TypesafeMap.Key<Pattern>) mock(TypesafeMap.Key.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        treeSet0.add(typesafeMap_Key0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
  @Ignore
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = ":e%Ekhk";
      MockFile mockFile0 = new MockFile(":e%Ekhk", ":e%Ekhk");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(":e%Ekhk", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/samu/GitHub/CoreNLP/:e%Ekhk", mockFile0.getParent());
      assertEquals("/home/samu/GitHub/CoreNLP/:e%Ekhk/:e%Ekhk", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertNotNull(path0);
      
      boolean boolean0 = mockFile0.setWritable(true);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(":e%Ekhk", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/samu/GitHub/CoreNLP/:e%Ekhk", mockFile0.getParent());
      assertEquals("/home/samu/GitHub/CoreNLP/:e%Ekhk/:e%Ekhk", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(boolean0);
      
      StringUtils.printToFile((File) mockFile0, ":e%Ekhk", false, false, ":e%Ekhk");
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(":e%Ekhk", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/home/samu/GitHub/CoreNLP/:e%Ekhk", mockFile0.getParent());
      assertEquals("/home/samu/GitHub/CoreNLP/:e%Ekhk/:e%Ekhk", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      
      String string1 = "edu.stanford.nlp.util.Interval";
      // Undeclared exception!
      try { 
        StringUtils.trimWithEllipsis("edu.stanford.nlp.util.Interval", (-318));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
  @Ignore
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CategoryWordTag categoryWordTag0 = new CategoryWordTag("");
      assertEquals("", categoryWordTag0.category());
      assertEquals((-1), categoryWordTag0.endPosition());
      assertNull(categoryWordTag0.word());
      assertEquals((-1), categoryWordTag0.beginPosition());
      assertNull(categoryWordTag0.tag());
      assertEquals("", categoryWordTag0.value());
      assertNotNull(categoryWordTag0);
      assertTrue(CategoryWordTag.printWordTag);
      assertFalse(CategoryWordTag.suppressTerminalDetails);
      
      categoryWordTag0.setCategoryWordTag("T~214E", "T~214E", "T~214E");
      assertEquals("T~214E", categoryWordTag0.category());
      assertEquals((-1), categoryWordTag0.endPosition());
      assertEquals((-1), categoryWordTag0.beginPosition());
      assertEquals("T~214E", categoryWordTag0.value());
      assertEquals("T~214E", categoryWordTag0.tag());
      assertEquals("T~214E", categoryWordTag0.word());
      assertTrue(CategoryWordTag.printWordTag);
      assertFalse(CategoryWordTag.suppressTerminalDetails);
      
      String string0 = categoryWordTag0.toString("T~214E");
      assertEquals("T~214E", categoryWordTag0.category());
      assertEquals((-1), categoryWordTag0.endPosition());
      assertEquals((-1), categoryWordTag0.beginPosition());
      assertEquals("T~214E", categoryWordTag0.value());
      assertEquals("T~214E", categoryWordTag0.tag());
      assertEquals("T~214E", categoryWordTag0.word());
      assertNotNull(string0);
      assertEquals("T~214E[T~214E/T~214E]", string0);
      assertTrue(CategoryWordTag.printWordTag);
      assertFalse(CategoryWordTag.suppressTerminalDetails);
      
      String string1 = categoryWordTag0.toString("tc+>Ztpzq");
      assertEquals("T~214E", categoryWordTag0.category());
      assertEquals((-1), categoryWordTag0.endPosition());
      assertEquals((-1), categoryWordTag0.beginPosition());
      assertEquals("T~214E", categoryWordTag0.value());
      assertEquals("T~214E", categoryWordTag0.tag());
      assertEquals("T~214E", categoryWordTag0.word());
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("T~214E[T~214E/T~214E]", string1);
      assertTrue(CategoryWordTag.printWordTag);
      assertFalse(CategoryWordTag.suppressTerminalDetails);
      
      categoryWordTag0.setCategoryWordTag("", "T~214E", "P{;Va),K{JU7");
      assertEquals("", categoryWordTag0.category());
      assertEquals((-1), categoryWordTag0.endPosition());
      assertEquals("P{;Va),K{JU7", categoryWordTag0.tag());
      assertEquals((-1), categoryWordTag0.beginPosition());
      assertEquals("", categoryWordTag0.value());
      assertEquals("T~214E", categoryWordTag0.word());
      assertTrue(CategoryWordTag.printWordTag);
      assertFalse(CategoryWordTag.suppressTerminalDetails);
      
      categoryWordTag0.setValue("tc+>Ztpzq");
      assertEquals("tc+>Ztpzq", categoryWordTag0.value());
      assertEquals((-1), categoryWordTag0.endPosition());
      assertEquals("P{;Va),K{JU7", categoryWordTag0.tag());
      assertEquals((-1), categoryWordTag0.beginPosition());
      assertEquals("tc+>Ztpzq", categoryWordTag0.category());
      assertEquals("T~214E", categoryWordTag0.word());
      assertTrue(CategoryWordTag.printWordTag);
      assertFalse(CategoryWordTag.suppressTerminalDetails);
      
      String string2 = StringUtils.padLeft((Object) categoryWordTag0, 35);
      assertEquals("tc+>Ztpzq", categoryWordTag0.value());
      assertEquals((-1), categoryWordTag0.endPosition());
      assertEquals("P{;Va),K{JU7", categoryWordTag0.tag());
      assertEquals((-1), categoryWordTag0.beginPosition());
      assertEquals("tc+>Ztpzq", categoryWordTag0.category());
      assertEquals("T~214E", categoryWordTag0.word());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(CategoryWordTag.printWordTag);
      assertFalse(CategoryWordTag.suppressTerminalDetails);
      
      String string3 = StringUtils.trimWithEllipsis((Object) categoryWordTag0, 35);
      assertEquals("tc+>Ztpzq", categoryWordTag0.value());
      assertEquals((-1), categoryWordTag0.endPosition());
      assertEquals("P{;Va),K{JU7", categoryWordTag0.tag());
      assertEquals((-1), categoryWordTag0.beginPosition());
      assertEquals("tc+>Ztpzq", categoryWordTag0.category());
      assertEquals("T~214E", categoryWordTag0.word());
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("edu.stanford.nlp.ling.CategoryWo...", string3);
      assertTrue(CategoryWordTag.printWordTag);
      assertFalse(CategoryWordTag.suppressTerminalDetails);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "tc+>Ztpzq";
      objectArray0[1] = (Object) "T~214E[T~214E/T~214E]";
      objectArray0[2] = (Object) "tc+>Ztpzq";
      objectArray0[3] = (Object) "T~214E[T~214E/T~214E]";
      objectArray0[4] = (Object) "edu.stanford.nlp.ling.CategoryWordTag@0000000001";
      objectArray0[5] = (Object) "edu.stanford.nlp.ling.CategoryWo...";
      String string4 = StringUtils.join(objectArray0, "edu.stanford.nlp.ling.CategoryWo...");
      assertEquals(6, objectArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
  }
  @Ignore
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CategoryWordTag categoryWordTag0 = new CategoryWordTag();
      assertNull(categoryWordTag0.category());
      assertEquals((-1), categoryWordTag0.beginPosition());
      assertNull(categoryWordTag0.tag());
      assertNull(categoryWordTag0.value());
      assertEquals((-1), categoryWordTag0.endPosition());
      assertNull(categoryWordTag0.word());
      assertNotNull(categoryWordTag0);
      assertFalse(CategoryWordTag.suppressTerminalDetails);
      assertTrue(CategoryWordTag.printWordTag);
      
      String string0 = categoryWordTag0.toString("");
      assertNull(categoryWordTag0.category());
      assertEquals((-1), categoryWordTag0.beginPosition());
      assertNull(categoryWordTag0.tag());
      assertNull(categoryWordTag0.value());
      assertEquals((-1), categoryWordTag0.endPosition());
      assertNull(categoryWordTag0.word());
      assertNull(string0);
      assertFalse(CategoryWordTag.suppressTerminalDetails);
      assertTrue(CategoryWordTag.printWordTag);
      
      String string1 = StringUtils.padOrTrim((Object) categoryWordTag0, 2727);
      assertNull(categoryWordTag0.category());
      assertEquals((-1), categoryWordTag0.beginPosition());
      assertNull(categoryWordTag0.tag());
      assertNull(categoryWordTag0.value());
      assertEquals((-1), categoryWordTag0.endPosition());
      assertNull(categoryWordTag0.word());
      assertNotNull(string1);
      assertFalse(CategoryWordTag.suppressTerminalDetails);
      assertTrue(CategoryWordTag.printWordTag);
      
      boolean boolean0 = StringUtils.isCapitalized(string1);
      assertNull(categoryWordTag0.category());
      assertEquals((-1), categoryWordTag0.beginPosition());
      assertNull(categoryWordTag0.tag());
      assertNull(categoryWordTag0.value());
      assertEquals((-1), categoryWordTag0.endPosition());
      assertNull(categoryWordTag0.word());
      assertFalse(boolean0);
      assertFalse(CategoryWordTag.suppressTerminalDetails);
      assertTrue(CategoryWordTag.printWordTag);
      
      String string2 = StringUtils.padOrTrim("", 2727);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      Stack<HashableCoreMap> stack0 = new Stack<HashableCoreMap>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Class<WordLemmaTag>[] classArray0 = (Class<WordLemmaTag>[]) Array.newInstance(Class.class, 9);
      Class<WordLemmaTag> class0 = WordLemmaTag.class;
      classArray0[0] = class0;
      Class<WordLemmaTag> class1 = WordLemmaTag.class;
      classArray0[1] = class1;
      Class<WordLemmaTag> class2 = WordLemmaTag.class;
      classArray0[2] = class2;
      Class<WordLemmaTag> class3 = WordLemmaTag.class;
      classArray0[3] = class3;
      Class<WordLemmaTag> class4 = WordLemmaTag.class;
      classArray0[4] = class4;
      Class<WordLemmaTag> class5 = WordLemmaTag.class;
      classArray0[5] = class5;
      Class<WordLemmaTag> class6 = WordLemmaTag.class;
      classArray0[6] = class6;
      Class<WordLemmaTag> class7 = WordLemmaTag.class;
      classArray0[7] = class7;
      Class<WordLemmaTag> class8 = WordLemmaTag.class;
      classArray0[8] = class8;
      String string3 = StringUtils.joinMultipleFields((List<? extends CoreMap>) stack0, (Class[]) classArray0, string2, "#", (String) null, 761, 2727);
      assertEquals(9, classArray0.length);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.padLeftOrTrim("", 761);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEqualsstring4);
      
      File file0 = MockFile.createTempFile("BZY^b", (String) null);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("BZY^b0.tmp", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals("/tmp/BZY^b0.tmp", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertNotNull(file0);
      
      StringUtils.printToFile(file0, "");
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("BZY^b0.tmp", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals("/tmp/BZY^b0.tmp", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector<ArrayCoreMap> vector0 = new Vector<ArrayCoreMap>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Class<CoreAnnotations.TokensAnnotation>[] classArray0 = (Class<CoreAnnotations.TokensAnnotation>[]) Array.newInstance(Class.class, 4);
      Class<CoreAnnotations.TokensAnnotation> class0 = CoreAnnotations.TokensAnnotation.class;
      classArray0[0] = class0;
      Class<CoreAnnotations.TokensAnnotation> class1 = CoreAnnotations.TokensAnnotation.class;
      classArray0[1] = class1;
      Class<CoreAnnotations.TokensAnnotation> class2 = CoreAnnotations.TokensAnnotation.class;
      classArray0[2] = class2;
      Class<CoreAnnotations.TokensAnnotation> class3 = CoreAnnotations.TokensAnnotation.class;
      classArray0[3] = class3;
      String string0 = StringUtils.joinMultipleFields((List<? extends CoreMap>) vector0, (Class[]) classArray0);
      assertEquals(4, classArray0.length);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = ")8`";
      boolean boolean0 = StringUtils.isNumeric(")8`");
      assertFalse(boolean0);
      
      List<CoreLabel> list0 = null;
      Class<Pattern> class0 = Pattern.class;
      // Undeclared exception!
      try { 
        StringUtils.joinFields((List<? extends CoreMap>) null, class0, (Function<Object, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "";
      StringUtils.printStringOneCharPerLine("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      TreeSet<CategoryWordTag> treeSet0 = new TreeSet<CategoryWordTag>(comparator0);
      assertNotNull(treeSet0);
      
      CategoryWordTag categoryWordTag0 = new CategoryWordTag("", "edu.stanford.nlp.ling.CoreAnnotations$INAnnotation", "");
      assertEquals("", categoryWordTag0.tag());
      assertEquals((-1), categoryWordTag0.endPosition());
      assertEquals("", categoryWordTag0.value());
      assertEquals("edu.stanford.nlp.ling.CoreAnnotations$INAnnotation", categoryWordTag0.word());
      assertEquals("", categoryWordTag0.category());
      assertEquals((-1), categoryWordTag0.beginPosition());
      assertNotNull(categoryWordTag0);
      assertTrue(CategoryWordTag.printWordTag);
      assertFalse(CategoryWordTag.suppressTerminalDetails);
      
      boolean boolean0 = treeSet0.add(categoryWordTag0);
      assertEquals("", categoryWordTag0.tag());
      assertEquals((-1), categoryWordTag0.endPosition());
      assertEquals("", categoryWordTag0.value());
      assertEquals("edu.stanford.nlp.ling.CoreAnnotations$INAnnotation", categoryWordTag0.word());
      assertEquals("", categoryWordTag0.category());
      assertEquals((-1), categoryWordTag0.beginPosition());
      assertTrue(treeSet0.contains(categoryWordTag0));
      assertTrue(boolean0);
      assertTrue(CategoryWordTag.printWordTag);
      assertFalse(CategoryWordTag.suppressTerminalDetails);
      
      String string1 = StringUtils.joinWords((Iterable<? extends HasWord>) treeSet0, "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(treeSet0.contains(categoryWordTag0));
      assertEquals("edu.stanford.nlp.ling.CoreAnnotations$INAnnotation", string1);
      
      CategoryWordTag categoryWordTag1 = new CategoryWordTag();
      assertNull(categoryWordTag1.value());
      assertEquals((-1), categoryWordTag1.beginPosition());
      assertNull(categoryWordTag1.category());
      assertNull(categoryWordTag1.tag());
      assertEquals((-1), categoryWordTag1.endPosition());
      assertNull(categoryWordTag1.word());
      assertNotNull(categoryWordTag1);
      assertFalse(categoryWordTag1.equals((Object)categoryWordTag0));
      assertTrue(CategoryWordTag.printWordTag);
      assertFalse(CategoryWordTag.suppressTerminalDetails);
      
      SortedSet<CategoryWordTag> sortedSet0 = treeSet0.tailSet(categoryWordTag1);
      assertNull(categoryWordTag1.value());
      assertEquals((-1), categoryWordTag1.beginPosition());
      assertNull(categoryWordTag1.category());
      assertNull(categoryWordTag1.tag());
      assertEquals((-1), categoryWordTag1.endPosition());
      assertNull(categoryWordTag1.word());
      assertEquals(1, sortedSet0.size());
      assertFalse(sortedSet0.isEmpty());
      assertNotNull(sortedSet0);
      assertFalse(categoryWordTag1.equals((Object)categoryWordTag0));
      assertTrue(treeSet0.contains(categoryWordTag0));
      assertTrue(sortedSet0.contains(categoryWordTag0));
      assertNotSame(categoryWordTag1, categoryWordTag0);
      assertTrue(CategoryWordTag.printWordTag);
      assertFalse(CategoryWordTag.suppressTerminalDetails);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.mapStringToArray("edu.stanford.nlp.ling.CoreAnnotations$INAnnotation");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "'NIO6'mivSt4i";
      char[] charArray0 = new char[9];
      charArray0[0] = '[';
      charArray0[1] = 'w';
      charArray0[2] = '|';
      charArray0[3] = 'q';
      charArray0[4] = '';
      char char0 = 'k';
      charArray0[5] = 'k';
      charArray0[6] = '=';
      charArray0[7] = 'D';
      char char1 = 'J';
      charArray0[8] = 'J';
      String string1 = StringUtils.escapeString("'NIO6'mivSt4i", charArray0, 'D');
      assertArrayEquals(new char[] {'[', 'w', '|', 'q', '', 'k', '=', 'D', 'J'}, charArray0);
      assertEquals(9, charArray0.length);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("'NIO6'mivSt4i", string1);
      
      TaggedWord taggedWord0 = new TaggedWord("'NIO6'mivSt4i");
      assertNull(taggedWord0.tag());
      assertEquals("'NIO6'mivSt4i", taggedWord0.value());
      assertEquals("'NIO6'mivSt4i", taggedWord0.word());
      assertEquals((-1), taggedWord0.beginPosition());
      assertEquals((-1), taggedWord0.endPosition());
      assertNotNull(taggedWord0);
      
      LabeledScoredTreeNode labeledScoredTreeNode0 = new LabeledScoredTreeNode(taggedWord0);
      assertNull(taggedWord0.tag());
      assertEquals("'NIO6'mivSt4i", taggedWord0.value());
      assertEquals("'NIO6'mivSt4i", taggedWord0.word());
      assertEquals((-1), taggedWord0.beginPosition());
      assertEquals((-1), taggedWord0.endPosition());
      assertEquals(Double.NaN, labeledScoredTreeNode0.score(), 0.01);
      assertNotNull(labeledScoredTreeNode0);
      
      Tree tree0 = labeledScoredTreeNode0.treeSkeletonCopy();
      assertEquals(Double.NaN, tree0.score(), 0.01);
      assertNull(taggedWord0.tag());
      assertEquals("'NIO6'mivSt4i", taggedWord0.value());
      assertEquals("'NIO6'mivSt4i", taggedWord0.word());
      assertEquals((-1), taggedWord0.beginPosition());
      assertEquals((-1), taggedWord0.endPosition());
      assertEquals(Double.NaN, labeledScoredTreeNode0.score(), 0.01);
      assertNotNull(tree0);
      assertTrue(tree0.equals((Object)labeledScoredTreeNode0));
      assertNotSame(tree0, labeledScoredTreeNode0);
      assertNotSame(labeledScoredTreeNode0, tree0);
      
      tree0.setValue("'NIO6'mivSt4i");
      assertEquals(Double.NaN, tree0.score(), 0.01);
      assertNull(taggedWord0.tag());
      assertEquals("'NIO6'mivSt4i", taggedWord0.value());
      assertEquals("'NIO6'mivSt4i", taggedWord0.word());
      assertEquals((-1), taggedWord0.beginPosition());
      assertEquals((-1), taggedWord0.endPosition());
      assertEquals(Double.NaN, labeledScoredTreeNode0.score(), 0.01);
      assertTrue(tree0.equals((Object)labeledScoredTreeNode0));
      assertTrue(labeledScoredTreeNode0.equals((Object)tree0));
      assertNotSame(tree0, labeledScoredTreeNode0);
      assertNotSame(labeledScoredTreeNode0, tree0);
      
      CategoryWordTag categoryWordTag0 = new CategoryWordTag(tree0);
      assertEquals(Double.NaN, tree0.score(), 0.01);
      assertEquals((-1), categoryWordTag0.endPosition());
      assertNull(categoryWordTag0.word());
      assertEquals("'NIO6'mivSt4i", categoryWordTag0.category());
      assertNull(categoryWordTag0.tag());
      assertEquals((-1), categoryWordTag0.beginPosition());
      assertEquals("'NIO6'mivSt4i", categoryWordTag0.value());
      assertNull(taggedWord0.tag());
      assertEquals("'NIO6'mivSt4i", taggedWord0.value());
      assertEquals("'NIO6'mivSt4i", taggedWord0.word());
      assertEquals((-1), taggedWord0.beginPosition());
      assertEquals((-1), taggedWord0.endPosition());
      assertEquals(Double.NaN, labeledScoredTreeNode0.score(), 0.01);
      assertNotNull(categoryWordTag0);
      assertTrue(tree0.equals((Object)labeledScoredTreeNode0));
      assertTrue(labeledScoredTreeNode0.equals((Object)tree0));
      assertTrue(CategoryWordTag.printWordTag);
      assertFalse(CategoryWordTag.suppressTerminalDetails);
      
      categoryWordTag0.setValue("{zY4V");
      assertEquals(Double.NaN, tree0.score(), 0.01);
      assertEquals("{zY4V", categoryWordTag0.category());
      assertEquals((-1), categoryWordTag0.endPosition());
      assertNull(categoryWordTag0.word());
      assertNull(categoryWordTag0.tag());
      assertEquals("{zY4V", categoryWordTag0.value());
      assertEquals((-1), categoryWordTag0.beginPosition());
      assertNull(taggedWord0.tag());
      assertEquals("'NIO6'mivSt4i", taggedWord0.value());
      assertEquals("'NIO6'mivSt4i", taggedWord0.word());
      assertEquals((-1), taggedWord0.beginPosition());
      assertEquals((-1), taggedWord0.endPosition());
      assertEquals(Double.NaN, labeledScoredTreeNode0.score(), 0.01);
      assertTrue(tree0.equals((Object)labeledScoredTreeNode0));
      assertTrue(labeledScoredTreeNode0.equals((Object)tree0));
      assertNotSame(tree0, labeledScoredTreeNode0);
      assertNotSame(labeledScoredTreeNode0, tree0);
      assertTrue(CategoryWordTag.printWordTag);
      assertFalse(CategoryWordTag.suppressTerminalDetails);
      
      String string2 = StringUtils.getShortClassName(categoryWordTag0);
      assertEquals(Double.NaN, tree0.score(), 0.01);
      assertEquals("{zY4V", categoryWordTag0.category());
      assertEquals((-1), categoryWordTag0.endPosition());
      assertNull(categoryWordTag0.word());
      assertNull(categoryWordTag0.tag());
      assertEquals("{zY4V", categoryWordTag0.value());
      assertEquals((-1), categoryWordTag0.beginPosition());
      assertNull(taggedWord0.tag());
      assertEquals("'NIO6'mivSt4i", taggedWord0.value());
      assertEquals("'NIO6'mivSt4i", taggedWord0.word());
      assertEquals((-1), taggedWord0.beginPosition());
      assertEquals((-1), taggedWord0.endPosition());
      assertEquals(Double.NaN, labeledScoredTreeNode0.score(), 0.01);
      assertNotNull(string2);
      assertTrue(tree0.equals((Object)labeledScoredTreeNode0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(labeledScoredTreeNode0.equals((Object)tree0));
      assertEquals("CategoryWordTag", string2);
      assertNotSame(tree0, labeledScoredTreeNode0);
      assertNotSame(labeledScoredTreeNode0, tree0);
      assertTrue(CategoryWordTag.printWordTag);
      assertFalse(CategoryWordTag.suppressTerminalDetails);
      
      // Undeclared exception!
      try { 
        labeledScoredTreeNode0.add(tree0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }
  @Ignore
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      Properties properties1 = new Properties(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertNotNull(properties1);
      assertTrue(properties1.equals((Object)properties0));
      
      SeqClassifierFlags seqClassifierFlags0 = new SeqClassifierFlags(properties1);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertEquals("", seqClassifierFlags0.toString());
      assertNotNull(seqClassifierFlags0);
      assertTrue(properties0.equals((Object)properties1));
      assertTrue(properties1.equals((Object)properties0));
      assertFalse(seqClassifierFlags0.useScaledSGD);
      assertFalse(seqClassifierFlags0.useDisjShape);
      assertFalse(seqClassifierFlags0.useCTBSuf1);
      assertEquals(1, seqClassifierFlags0.numLopExpert);
      assertFalse(seqClassifierFlags0.useLabelSource);
      assertFalse(seqClassifierFlags0.useShapeStrings);
      assertEquals(0, seqClassifierFlags0.multiThreadClassifier);
      assertFalse(seqClassifierFlags0.printLabelValue);
      assertFalse(seqClassifierFlags0.useOnlySeenWeights);
      assertFalse(seqClassifierFlags0.useCorefFeatures);
      assertFalse(seqClassifierFlags0.noNeighborConstraints);
      assertFalse(seqClassifierFlags0.backpropLopTraining);
      assertFalse(seqClassifierFlags0.terminateOnEvalImprovement);
      assertFalse(seqClassifierFlags0.suppressMidDotPostprocessing);
      assertFalse(seqClassifierFlags0.checkNameList);
      assertEquals(0, seqClassifierFlags0.maxQNItr);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesAll);
      assertFalse(seqClassifierFlags0.keepEnglishWhitespaces);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions);
      assertFalse(seqClassifierFlags0.perceptronDebug);
      assertFalse(seqClassifierFlags0.justify);
      assertFalse(seqClassifierFlags0.splitSlashHyphenWords);
      assertEquals(1, seqClassifierFlags0.selfTrainIterations);
      assertFalse(seqClassifierFlags0.baseline);
      assertFalse(seqClassifierFlags0.useCTBChar2);
      assertFalse(seqClassifierFlags0.iobTags);
      assertTrue(seqClassifierFlags0.useCWSFeatures);
      assertFalse(seqClassifierFlags0.usePk);
      assertFalse(seqClassifierFlags0.useABSTRFreqDict);
      assertFalse(seqClassifierFlags0.useFREQ);
      assertEquals(0.0, seqClassifierFlags0.featureWeightThreshold, 0.01);
      assertEquals(0, seqClassifierFlags0.evaluateIters);
      assertTrue(seqClassifierFlags0.useViterbi);
      assertFalse(seqClassifierFlags0.usePrevVB);
      assertFalse(seqClassifierFlags0.lazyUpdate);
      assertFalse(seqClassifierFlags0.skipOutputRegularization);
      assertFalse(seqClassifierFlags0.learnENBasedOnCH);
      assertEquals(1, seqClassifierFlags0.numTimesRemoveTopN);
      assertFalse(seqClassifierFlags0.strictGoodCoNLL);
      assertFalse(seqClassifierFlags0.powerAlignProb);
      assertFalse(seqClassifierFlags0.useWordShapeGaz);
      assertTrue(seqClassifierFlags0.initViterbi);
      assertFalse(seqClassifierFlags0.largeChSegFile);
      assertFalse(seqClassifierFlags0.useNeighborNGrams);
      assertFalse(seqClassifierFlags0.usePosition);
      assertTrue(seqClassifierFlags0.averagePerceptron);
      assertEquals(0.0, seqClassifierFlags0.priorAlpha, 0.01);
      assertFalse(seqClassifierFlags0.keepEmptySentences);
      assertFalse(seqClassifierFlags0.usePrev);
      assertEquals(1, seqClassifierFlags0.startFold);
      assertFalse(seqClassifierFlags0.useNegDict2);
      assertFalse(seqClassifierFlags0.useFirstWord);
      assertFalse(seqClassifierFlags0.useIsURL);
      assertFalse(seqClassifierFlags0.useAdaDiff);
      assertFalse(seqClassifierFlags0.useWord1);
      assertFalse(seqClassifierFlags0.useWord2);
      assertFalse(seqClassifierFlags0.useWord3);
      assertEquals(8, seqClassifierFlags0.distSimMaxBits);
      assertFalse(seqClassifierFlags0.useWord4);
      assertFalse(seqClassifierFlags0.useWideDisjunctive);
      assertFalse(seqClassifierFlags0.useCTBPre1);
      assertFalse(seqClassifierFlags0.useNegDict4);
      assertFalse(seqClassifierFlags0.useProtoFeatures);
      assertFalse(seqClassifierFlags0.useNegDict3);
      assertEquals(0.9, seqClassifierFlags0.selfTrainConfidenceThreshold, 0.01);
      assertFalse(seqClassifierFlags0.useUniformPrior);
      assertFalse(seqClassifierFlags0.useLC);
      assertFalse(seqClassifierFlags0.groupByOutputClass);
      assertEquals(0.0, seqClassifierFlags0.alignmentPruneThreshold, 0.01);
      assertFalse(seqClassifierFlags0.useFilter);
      assertFalse(seqClassifierFlags0.useKL);
      assertEquals(0, seqClassifierFlags0.removeTopN);
      assertFalse(seqClassifierFlags0.conjoinShapeNGrams);
      assertFalse(seqClassifierFlags0.cleanGazette);
      assertFalse(seqClassifierFlags0.prependEmbedding);
      assertEquals(0, seqClassifierFlags0.numOfSlices);
      assertFalse(seqClassifierFlags0.useCWSWordFeatures);
      assertFalse(seqClassifierFlags0.applyNumericClassifiers);
      assertFalse(seqClassifierFlags0.useACR);
      assertFalse(seqClassifierFlags0.useSGD);
      assertEquals((-1), seqClassifierFlags0.samplingSpeedUpThreshold);
      assertFalse(seqClassifierFlags0.useBilingualNERPrior);
      assertFalse(seqClassifierFlags0.pctSegmenterLenAdjust);
      assertFalse(seqClassifierFlags0.useReverse);
      assertFalse(seqClassifierFlags0.useHardGE);
      assertFalse(seqClassifierFlags0.tuneSGD);
      assertFalse(seqClassifierFlags0.useTitle);
      assertTrue(seqClassifierFlags0.useWord);
      assertFalse(seqClassifierFlags0.useSequentialScanSampling);
      assertFalse(seqClassifierFlags0.randomLopWeights);
      assertEquals(1, seqClassifierFlags0.numStartLayers);
      assertEquals((-1), seqClassifierFlags0.SGDPasses);
      assertFalse(seqClassifierFlags0.useNB);
      assertEquals(0, seqClassifierFlags0.ocrFold);
      assertFalse(seqClassifierFlags0.useRad1);
      assertFalse(seqClassifierFlags0.fakeDataset);
      assertFalse(seqClassifierFlags0.useSeenFeaturesOnly);
      assertFalse(seqClassifierFlags0.useChPos);
      assertFalse(seqClassifierFlags0.useSymWordPairs);
      assertFalse(seqClassifierFlags0.appendLC);
      assertFalse(seqClassifierFlags0.useGEforSup);
      assertFalse(seqClassifierFlags0.useNegCTBDict4);
      assertFalse(seqClassifierFlags0.useNegCTBDict3);
      assertFalse(seqClassifierFlags0.useNegCTBDict2);
      assertEquals(0, seqClassifierFlags0.scaledSGDMethod);
      assertFalse(seqClassifierFlags0.useRad2);
      assertFalse(seqClassifierFlags0.twoStage);
      assertFalse(seqClassifierFlags0.normalizeTerms);
      assertEquals(0, seqClassifierFlags0.maxDocSize);
      assertEquals(0.0, seqClassifierFlags0.annealingRate, 0.01);
      assertFalse(seqClassifierFlags0.useWordn);
      assertFalse(seqClassifierFlags0.numberEquivalenceDistSim);
      assertFalse(seqClassifierFlags0.useFeaturesCpC6gram);
      assertEquals(25, seqClassifierFlags0.QNsize);
      assertFalse(seqClassifierFlags0.useTaggySequences);
      assertFalse(seqClassifierFlags0.useNoisyLabel);
      assertFalse(seqClassifierFlags0.usePKPre1);
      assertFalse(seqClassifierFlags0.useNegHKDict4);
      assertFalse(seqClassifierFlags0.useNegHKDict3);
      assertFalse(seqClassifierFlags0.useNegHKDict2);
      assertEquals(0, seqClassifierFlags0.maxAdditionalKnownLCWords);
      assertEquals(1.0, seqClassifierFlags0.lambdaCH, 0.01);
      assertFalse(seqClassifierFlags0.useHybrid);
      assertTrue(seqClassifierFlags0.restrictLabels);
      assertFalse(seqClassifierFlags0.weightByEntropy);
      assertFalse(seqClassifierFlags0.augmentedDateChars);
      assertFalse(seqClassifierFlags0.testObjFunction);
      assertFalse(seqClassifierFlags0.printNR);
      assertFalse(seqClassifierFlags0.usePhraseWordTags);
      assertFalse(seqClassifierFlags0.usePrediction2);
      assertEquals(0, seqClassifierFlags0.hybridCutoffIteration);
      assertFalse(seqClassifierFlags0.strictlyZeroethOrder);
      assertEquals(0, seqClassifierFlags0.numTimesPruneFeatures);
      assertFalse(seqClassifierFlags0.groupByFeatureTemplate);
      assertFalse(seqClassifierFlags0.useLastRealWord);
      assertEquals(1000, seqClassifierFlags0.wordSegBeamSize);
      assertFalse(seqClassifierFlags0.useRandomSeed);
      assertFalse(seqClassifierFlags0.announceObjectBankEntries);
      assertFalse(seqClassifierFlags0.estimateInitial);
      assertFalse(seqClassifierFlags0.useNegASBCDict4);
      assertFalse(seqClassifierFlags0.transitionEdgeOnly);
      assertFalse(seqClassifierFlags0.useNumberFeature);
      assertFalse(seqClassifierFlags0.useNegASBCDict2);
      assertFalse(seqClassifierFlags0.useNegASBCDict3);
      assertFalse(seqClassifierFlags0.lowercaseNGrams);
      assertFalse(seqClassifierFlags0.memoryThrift);
      assertEquals(100, seqClassifierFlags0.numSamples);
      assertTrue(seqClassifierFlags0.applyNERPenalty);
      assertFalse(seqClassifierFlags0.addBiasToEmbedding);
      assertEquals(2, seqClassifierFlags0.maxLeft);
      assertFalse(seqClassifierFlags0.groupByInput);
      assertFalse(seqClassifierFlags0.printTrainLabels);
      assertFalse(seqClassifierFlags0.printWeights);
      assertFalse(seqClassifierFlags0.intern2);
      assertFalse(seqClassifierFlags0.combo);
      assertEquals(0.0, seqClassifierFlags0.priorLambda, 0.01);
      assertFalse(seqClassifierFlags0.useGoodForNamesCpC);
      assertFalse(seqClassifierFlags0.casedDistSim);
      assertEquals(1.0, seqClassifierFlags0.sigma, 0.01);
      assertTrue(seqClassifierFlags0.useDenero);
      assertTrue(seqClassifierFlags0.keepOBInMemory);
      assertEquals(0, seqClassifierFlags0.interimOutputFreq);
      assertFalse(seqClassifierFlags0.printXML);
      assertFalse(seqClassifierFlags0.useHKChar2);
      assertFalse(seqClassifierFlags0.useAdaDelta);
      assertFalse(seqClassifierFlags0.dontExtendTaggy);
      assertFalse(seqClassifierFlags0.regularizeSoftmaxTieParam);
      assertEquals(0.1, seqClassifierFlags0.initialGain, 0.01);
      assertFalse(seqClassifierFlags0.useABSTR);
      assertFalse(seqClassifierFlags0.useASBCSuf1);
      assertFalse(seqClassifierFlags0.strictlySecondOrder);
      assertFalse(seqClassifierFlags0.useDict2);
      assertFalse(seqClassifierFlags0.booleanFeatures);
      assertFalse(seqClassifierFlags0.useTopics);
      assertFalse(seqClassifierFlags0.useUnicodeType5gram);
      assertFalse(seqClassifierFlags0.useTOK);
      assertFalse(seqClassifierFlags0.retainEntitySubclassification);
      assertFalse(seqClassifierFlags0.saveFeatureIndexToDisk);
      assertFalse(seqClassifierFlags0.verboseForTrueCasing);
      assertFalse(seqClassifierFlags0.useABGENE);
      assertFalse(seqClassifierFlags0.terminateOnAvgImprovement);
      assertFalse(seqClassifierFlags0.strictlyThirdOrder);
      assertFalse(seqClassifierFlags0.useTypeSeqs2);
      assertFalse(seqClassifierFlags0.useTypeSeqs3);
      assertFalse(seqClassifierFlags0.splitOnHead);
      assertFalse(seqClassifierFlags0.useUnicodeType);
      assertEquals((-1), seqClassifierFlags0.numHiddenUnits);
      assertFalse(seqClassifierFlags0.useBigramInTwoClique);
      assertEquals(0.0, seqClassifierFlags0.removeTopNPercent, 0.01);
      assertFalse(seqClassifierFlags0.useSMD);
      assertFalse(seqClassifierFlags0.sighanPostProcessing);
      assertEquals(1, seqClassifierFlags0.nerSlowerTimes);
      assertFalse(seqClassifierFlags0.evaluateTrain);
      assertEquals(1.0, seqClassifierFlags0.unsupDropoutScale, 0.01);
      assertFalse(seqClassifierFlags0.ocrTrain);
      assertFalse(seqClassifierFlags0.useMoreAbbr);
      assertFalse(seqClassifierFlags0.useChunks);
      assertFalse(seqClassifierFlags0.useSymTags);
      assertEquals(8, seqClassifierFlags0.maxAllowedChromaticSize);
      assertEquals((-1), seqClassifierFlags0.QNPasses);
      assertFalse(seqClassifierFlags0.useNextSequences);
      assertFalse(seqClassifierFlags0.restrictTransitionsTimit);
      assertEquals(0.5, seqClassifierFlags0.alignmentDecodeThreshold, 0.01);
      assertTrue(seqClassifierFlags0.separateASCIIandRange);
      assertFalse(seqClassifierFlags0.secondOrderNonLinear);
      assertFalse(seqClassifierFlags0.use2W);
      assertFalse(seqClassifierFlags0.useEitherSideDisjunctive);
      assertFalse(seqClassifierFlags0.tieOutputLayer);
      assertFalse(seqClassifierFlags0.verboseMode);
      assertTrue(seqClassifierFlags0.includeC2EViterbi);
      assertFalse(seqClassifierFlags0.useDictPK2);
      assertFalse(seqClassifierFlags0.hardcodeSoftmaxOutputWeights);
      assertEquals(1, seqClassifierFlags0.kBest);
      assertFalse(seqClassifierFlags0.printFactorTable);
      assertTrue(seqClassifierFlags0.useMemoryEvaluator);
      assertFalse(seqClassifierFlags0.useVB);
      assertFalse(seqClassifierFlags0.useIfInteger);
      assertFalse(seqClassifierFlags0.useCommonWordsFeature);
      assertFalse(seqClassifierFlags0.useASBCPre1);
      assertEquals(0.0, seqClassifierFlags0.softmaxTieLambda, 0.01);
      assertTrue(seqClassifierFlags0.useHiddenLayer);
      assertFalse(seqClassifierFlags0.useBerkeleyAlignerForViterbi);
      assertFalse(seqClassifierFlags0.useTitle2);
      assertFalse(seqClassifierFlags0.useAdaGradFOBOS);
      assertFalse(seqClassifierFlags0.useMUCFeatures);
      assertFalse(seqClassifierFlags0.useNERPrior);
      assertFalse(seqClassifierFlags0.useABSTRFreq);
      assertFalse(seqClassifierFlags0.useMoreTags);
      assertEquals(1, seqClassifierFlags0.selfTrainWindowSize);
      assertFalse(seqClassifierFlags0.useBoundarySequences);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions3);
      assertEquals(0.95, seqClassifierFlags0.adaDeltaRho, 0.01);
      assertFalse(seqClassifierFlags0.useNGrams);
      assertFalse(seqClassifierFlags0.useSigmoid);
      assertFalse(seqClassifierFlags0.testHessSamples);
      assertFalse(seqClassifierFlags0.useLongSequences);
      assertFalse(seqClassifierFlags0.useTrainLexicon);
      assertFalse(seqClassifierFlags0.groupByHiddenUnit);
      assertFalse(seqClassifierFlags0.useNextRealWord);
      assertFalse(seqClassifierFlags0.useTypeSeqs);
      assertFalse(seqClassifierFlags0.geDebug);
      assertEquals(30, seqClassifierFlags0.beamSize);
      assertFalse(seqClassifierFlags0.use4Clique);
      assertEquals(1.0, seqClassifierFlags0.dropoutScale, 0.01);
      assertFalse(seqClassifierFlags0.useMinimalAbbr);
      assertFalse(seqClassifierFlags0.useUnicodeType4gram);
      assertEquals(0, seqClassifierFlags0.numOfFeatureSlices);
      assertFalse(seqClassifierFlags0.mergeTags);
      assertFalse(seqClassifierFlags0.useNPGovernor);
      assertFalse(seqClassifierFlags0.checkGradient);
      assertFalse(seqClassifierFlags0.useURLSequences);
      assertFalse(seqClassifierFlags0.useEntityRule);
      assertEquals(1, seqClassifierFlags0.numRuns);
      assertFalse(seqClassifierFlags0.useRule2);
      assertFalse(seqClassifierFlags0.useSGDtoQN);
      assertFalse(seqClassifierFlags0.useASBCChar2);
      assertFalse(seqClassifierFlags0.noEdgeFeature);
      assertFalse(seqClassifierFlags0.noMidNGrams);
      assertFalse(seqClassifierFlags0.normalize);
      assertFalse(seqClassifierFlags0.useSuf);
      assertFalse(seqClassifierFlags0.useUnicodeBlock);
      assertFalse(seqClassifierFlags0.useAcqPrior);
      assertEquals(4, seqClassifierFlags0.disjunctionWidth);
      assertFalse(seqClassifierFlags0.useOutDict2);
      assertFalse(seqClassifierFlags0.keepAllWhitespaces);
      assertFalse(seqClassifierFlags0.softmaxOutputLayer);
      assertEquals(0.1, seqClassifierFlags0.gainSGD, 0.01);
      assertFalse(seqClassifierFlags0.useGazettePhrases);
      assertEquals(10, seqClassifierFlags0.totalFeatureSlice);
      assertFalse(seqClassifierFlags0.testVariance);
      assertFalse(seqClassifierFlags0.usePrevNextLemmas);
      assertFalse(seqClassifierFlags0.useHKSuf1);
      assertEquals(0.0, seqClassifierFlags0.pctSegmenterScale, 0.01);
      assertFalse(seqClassifierFlags0.cacheNGrams);
      assertEquals((-1), seqClassifierFlags0.wordShape);
      assertEquals(1, seqClassifierFlags0.multiThreadPerceptron);
      assertFalse(seqClassifierFlags0.useChromaticSampling);
      assertFalse(seqClassifierFlags0.useFeaturesC4gram);
      assertFalse(seqClassifierFlags0.matchNERIncentive);
      assertFalse(seqClassifierFlags0.useUndirectedDisjunctive);
      assertFalse(seqClassifierFlags0.doGibbs);
      assertFalse(seqClassifierFlags0.factorInBiEdgePotential);
      assertFalse(seqClassifierFlags0.useStochasticQN);
      assertFalse(seqClassifierFlags0.outputIterationsToFile);
      assertFalse(seqClassifierFlags0.useDualDecomp);
      assertEquals(0.1, seqClassifierFlags0.initRate, 0.01);
      assertEquals(1, seqClassifierFlags0.CRForder);
      assertFalse(seqClassifierFlags0.useFloat);
      assertFalse(seqClassifierFlags0.useYear);
      assertFalse(seqClassifierFlags0.useTags);
      assertFalse(seqClassifierFlags0.useAbbr);
      assertFalse(seqClassifierFlags0.useBeginSent);
      assertFalse(seqClassifierFlags0.useSum);
      assertFalse(seqClassifierFlags0.expandMidDot);
      assertEquals(25, seqClassifierFlags0.QNsize2);
      assertFalse(seqClassifierFlags0.useQuartic);
      assertEquals(0.01, seqClassifierFlags0.epsilon, 0.01);
      assertFalse(seqClassifierFlags0.usePrevSequences);
      assertFalse(seqClassifierFlags0.useDictCTB2);
      assertFalse(seqClassifierFlags0.useShapeStrings4);
      assertFalse(seqClassifierFlags0.usePKChar2);
      assertFalse(seqClassifierFlags0.useShapeStrings5);
      assertEquals(1, seqClassifierFlags0.numFolds);
      assertFalse(seqClassifierFlags0.useShapeStrings3);
      assertFalse(seqClassifierFlags0.useDisjunctive);
      assertFalse(seqClassifierFlags0.useShapeStrings1);
      assertFalse(seqClassifierFlags0.subCWGaz);
      assertTrue(seqClassifierFlags0.learnCHBasedOnEN);
      assertFalse(seqClassifierFlags0.useRad2b);
      assertEquals(0, seqClassifierFlags0.multiThreadGibbs);
      assertEquals(15, seqClassifierFlags0.stochasticBatchSize);
      assertFalse(seqClassifierFlags0.doAdaptation);
      assertFalse(seqClassifierFlags0.removeBackgroundSingletonFeatures);
      assertFalse(seqClassifierFlags0.useLemmas);
      assertFalse(seqClassifierFlags0.blockInitialize);
      assertFalse(seqClassifierFlags0.includeFullCRFInLOP);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSize, 0.01);
      assertFalse(seqClassifierFlags0.useOrdinal);
      assertFalse(seqClassifierFlags0.useMinimalAbbr1);
      assertFalse(seqClassifierFlags0.useBagOfWords);
      assertFalse(seqClassifierFlags0.showNCCInfo);
      assertFalse(seqClassifierFlags0.useOWLQN);
      assertFalse(seqClassifierFlags0.useWordPairs);
      assertFalse(seqClassifierFlags0.useMoreGazFeatures);
      assertFalse(seqClassifierFlags0.dualDecompDebug);
      assertFalse(seqClassifierFlags0.doFeatureDiscovery);
      assertFalse(seqClassifierFlags0.normalizeTimex);
      assertFalse(seqClassifierFlags0.usePre);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions2);
      assertFalse(seqClassifierFlags0.nonLinearCRF);
      assertFalse(seqClassifierFlags0.useSegmentation);
      assertFalse(seqClassifierFlags0.useEitherSideWord);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions3);
      assertEquals(100, seqClassifierFlags0.printClassifierParam);
      assertFalse(seqClassifierFlags0.useRadical);
      assertFalse(seqClassifierFlags0.dump);
      assertTrue(seqClassifierFlags0.initWithPosterior);
      assertTrue(seqClassifierFlags0.splitDocuments);
      assertFalse(seqClassifierFlags0.useHeadGov);
      assertFalse(seqClassifierFlags0.useFeaturesC6gram);
      assertFalse(seqClassifierFlags0.factorInAlignmentProb);
      assertEquals(0.0, seqClassifierFlags0.l1reg, 0.01);
      assertFalse(seqClassifierFlags0.useAbbr1);
      assertEquals((-1), seqClassifierFlags0.maxNGramLeng);
      assertFalse(seqClassifierFlags0.useEntityTypes);
      assertFalse(seqClassifierFlags0.useSentenceNumber);
      assertFalse(seqClassifierFlags0.useWordnetFeatures);
      assertEquals(3, seqClassifierFlags0.charHalfWindow);
      assertFalse(seqClassifierFlags0.dehyphenateNGrams);
      assertEquals((-1), seqClassifierFlags0.maxIterations);
      assertFalse(seqClassifierFlags0.useWEBFreqDict);
      assertEquals(0.0, seqClassifierFlags0.dropoutRate, 0.01);
      assertFalse(seqClassifierFlags0.useShapeConjunctions);
      assertFalse(seqClassifierFlags0.useCRFforUnsup);
      assertFalse(seqClassifierFlags0.useTaggySequencesShapeInteraction);
      assertFalse(seqClassifierFlags0.useGazettes);
      assertFalse(seqClassifierFlags0.lowerNewgeneThreshold);
      assertEquals(1, seqClassifierFlags0.endFold);
      assertFalse(seqClassifierFlags0.usePrediction);
      assertFalse(seqClassifierFlags0.usePhraseFeatures);
      assertEquals(0, seqClassifierFlags0.featureCountThreshold);
      assertFalse(seqClassifierFlags0.useEntityTypeSequences);
      assertFalse(seqClassifierFlags0.useRule);
      assertEquals((-1), seqClassifierFlags0.labelDictionaryCutoff);
      assertEquals(10, seqClassifierFlags0.totalDataSlice);
      assertFalse(seqClassifierFlags0.useExtraTaggySequences);
      assertTrue(seqClassifierFlags0.useQN);
      assertFalse(seqClassifierFlags0.usePhraseWordSpecialTags);
      assertEquals(1.0, seqClassifierFlags0.alignDDAlpha, 0.01);
      assertFalse(seqClassifierFlags0.dampDDStepSizeWithAlignmentProb);
      assertFalse(seqClassifierFlags0.pctSegmenterScaleByCRF);
      assertFalse(seqClassifierFlags0.powerAlignProbAsAddition);
      assertEquals(10, seqClassifierFlags0.wideDisjunctionWidth);
      assertTrue(seqClassifierFlags0.useOutputLayer);
      assertFalse(seqClassifierFlags0.useDictleng);
      assertFalse(seqClassifierFlags0.useSUTime);
      assertFalse(seqClassifierFlags0.dropoutApprox);
      assertFalse(seqClassifierFlags0.useDisjunctiveShapeInteraction);
      assertTrue(seqClassifierFlags0.useExternal);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions2);
      assertFalse(seqClassifierFlags0.alternateTraining);
      assertFalse(seqClassifierFlags0.greekifyNGrams);
      assertEquals(1.0E-4, seqClassifierFlags0.tolerance, 0.01);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions3);
      assertFalse(seqClassifierFlags0.useParenMatching);
      assertFalse(seqClassifierFlags0.intern);
      assertFalse(seqClassifierFlags0.printProbs);
      assertEquals((-1), seqClassifierFlags0.arbitraryInputLayerSize);
      assertFalse(seqClassifierFlags0.useKBest);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSizeAlignment, 0.01);
      assertFalse(seqClassifierFlags0.useNext);
      assertEquals(1, seqClassifierFlags0.numDatasetsPerFile);
      assertFalse(seqClassifierFlags0.dualDecompNotBIO);
      assertFalse(seqClassifierFlags0.bioSubmitOutput);
      assertFalse(seqClassifierFlags0.useChunkySequences);
      assertFalse(seqClassifierFlags0.evaluateBackground);
      assertFalse(seqClassifierFlags0.useNoisyNonNoisyFeature);
      assertFalse(seqClassifierFlags0.useReverseAffix);
      assertFalse(seqClassifierFlags0.useYetMoreCpCShapes);
      assertFalse(seqClassifierFlags0.useMoreNeighborNGrams);
      assertFalse(seqClassifierFlags0.useHk);
      assertTrue(seqClassifierFlags0.useKnownLCWords);
      assertTrue(seqClassifierFlags0.useInternal);
      assertFalse(seqClassifierFlags0.useSemPrior);
      assertFalse(seqClassifierFlags0.useANTE);
      assertFalse(seqClassifierFlags0.usePKSuf1);
      assertFalse(seqClassifierFlags0.useTypeySequences);
      assertFalse(seqClassifierFlags0.usePhraseWords);
      assertFalse(seqClassifierFlags0.useMSRChar2);
      assertTrue(seqClassifierFlags0.useSequences);
      assertFalse(seqClassifierFlags0.randomLopFeatureSplit);
      assertFalse(seqClassifierFlags0.readStdin);
      assertFalse(seqClassifierFlags0.useRobustQN);
      assertFalse(seqClassifierFlags0.useIsDateRange);
      assertEquals(0, seqClassifierFlags0.maxRight);
      assertFalse(seqClassifierFlags0.useWEB);
      assertEquals((-1), seqClassifierFlags0.purgeFeatures);
      assertFalse(seqClassifierFlags0.printFirstOrderProbs);
      assertFalse(seqClassifierFlags0.makeConsistent);
      assertFalse(seqClassifierFlags0.useBig5);
      assertFalse(seqClassifierFlags0.initWithNERPosterior);
      assertFalse(seqClassifierFlags0.removeStrictGoodCoNLLDuplicates);
      assertFalse(seqClassifierFlags0.dualDecompAlignment);
      assertFalse(seqClassifierFlags0.useFeaturesCpC5gram);
      assertFalse(seqClassifierFlags0.suppressTestDebug);
      assertFalse(seqClassifierFlags0.useOccurrencePatterns);
      assertFalse(seqClassifierFlags0.sloppyGazette);
      assertFalse(seqClassifierFlags0.useGazFeatures);
      assertFalse(seqClassifierFlags0.useNextVB);
      assertFalse(seqClassifierFlags0.useMidDotShape);
      assertEquals(Integer.MAX_VALUE, seqClassifierFlags0.printFeaturesUpto);
      assertEquals(1, seqClassifierFlags0.featureThreshold);
      assertEquals(0.0, seqClassifierFlags0.featureDiffThresh, 0.01);
      assertFalse(seqClassifierFlags0.useNERPriorBIO);
      assertFalse(seqClassifierFlags0.useGENIA);
      assertFalse(seqClassifierFlags0.useNegPKDict3);
      assertFalse(seqClassifierFlags0.useNegPKDict2);
      assertFalse(seqClassifierFlags0.deleteBlankLines);
      assertFalse(seqClassifierFlags0.useNegPKDict4);
      assertFalse(seqClassifierFlags0.sparseOutputLayer);
      assertEquals(1.0, seqClassifierFlags0.lambdaEN, 0.01);
      assertEquals(0, seqClassifierFlags0.featureCountThresh);
      assertFalse(seqClassifierFlags0.useDictHK2);
      assertFalse(seqClassifierFlags0.useObservedFeaturesOnly);
      assertFalse(seqClassifierFlags0.useGenericFeatures);
      assertFalse(seqClassifierFlags0.iobWrapper);
      assertEquals(0, seqClassifierFlags0.nerSkipFirstK);
      assertEquals(1.0, seqClassifierFlags0.adaptSigma, 0.01);
      assertFalse(seqClassifierFlags0.useClassFeature);
      assertEquals(0, seqClassifierFlags0.startEvaluateIters);
      assertFalse(seqClassifierFlags0.useMsr);
      assertFalse(seqClassifierFlags0.useHKPre1);
      assertFalse(seqClassifierFlags0.useAs);
      assertEquals(Double.POSITIVE_INFINITY, seqClassifierFlags0.searchGraphPrune, 0.01);
      assertFalse(seqClassifierFlags0.useUnknown);
      assertFalse(seqClassifierFlags0.useBerkeleyCompetitivePosterior);
      assertFalse(seqClassifierFlags0.useObservedSequencesOnly);
      assertFalse(seqClassifierFlags0.doFE);
      assertEquals(0.0, seqClassifierFlags0.newgeneThreshold, 0.01);
      assertEquals(0, seqClassifierFlags0.dualDecompMaxItr);
      assertFalse(seqClassifierFlags0.strictlyFirstOrder);
      assertFalse(seqClassifierFlags0.useFeaturesC5gram);
      assertEquals((-1), seqClassifierFlags0.tuneSampleSize);
      assertFalse(seqClassifierFlags0.purgeDatasets);
      assertTrue(seqClassifierFlags0.biAlignmentPriorIsPMI);
      assertFalse(seqClassifierFlags0.useDictASBC2);
      assertFalse(seqClassifierFlags0.addCapitalFeatures);
      assertEquals(1.0, seqClassifierFlags0.randomizedRatio, 0.01);
      assertFalse(seqClassifierFlags0.useInPlaceSGD);
      assertFalse(seqClassifierFlags0.useDistSim);
      assertEquals(1, seqClassifierFlags0.terminateOnEvalImprovementNumOfEpoch);
      assertFalse(seqClassifierFlags0.useEmbedding);
      assertEquals(1, seqClassifierFlags0.bisequencePriorType);
      assertFalse(seqClassifierFlags0.gradientDebug);
      assertFalse(seqClassifierFlags0.selfTest);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesBigram);
      assertEquals(2, seqClassifierFlags0.CRFwindow);
      assertEquals(1, seqClassifierFlags0.multiThreadGrad);
      assertFalse(seqClassifierFlags0.useNPHead);
      assertFalse(seqClassifierFlags0.useAltGazFeatures);
      assertFalse(seqClassifierFlags0.showCCInfo);
      assertEquals(50, seqClassifierFlags0.SGD2QNhessSamples);
      assertFalse(seqClassifierFlags0.useHuber);
      assertEquals(0.001, seqClassifierFlags0.adaGradEps, 0.01);
      assertFalse(seqClassifierFlags0.timitDatum);
      assertFalse(seqClassifierFlags0.useFeaturesCpC4gram);
      assertFalse(seqClassifierFlags0.useWordTag);
      assertFalse(seqClassifierFlags0.useLemmaAsWord);
      
      CoreLabel coreLabel0 = seqClassifierFlags0.pad;
      assertEquals(0, coreLabel0.size());
      assertNotNull(coreLabel0);
      
      WordTag wordTag0 = new WordTag(coreLabel0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertEquals("", seqClassifierFlags0.toString());
      assertEquals(0, coreLabel0.size());
      assertNull(wordTag0.tag());
      assertNull(wordTag0.word());
      assertNull(wordTag0.value());
      assertNotNull(wordTag0);
      assertTrue(properties0.equals((Object)properties1));
      assertTrue(properties1.equals((Object)properties0));
      assertFalse(seqClassifierFlags0.useScaledSGD);
      assertFalse(seqClassifierFlags0.useDisjShape);
      assertFalse(seqClassifierFlags0.useCTBSuf1);
      assertEquals(1, seqClassifierFlags0.numLopExpert);
      assertFalse(seqClassifierFlags0.useLabelSource);
      assertFalse(seqClassifierFlags0.useShapeStrings);
      assertEquals(0, seqClassifierFlags0.multiThreadClassifier);
      assertFalse(seqClassifierFlags0.printLabelValue);
      assertFalse(seqClassifierFlags0.useOnlySeenWeights);
      assertFalse(seqClassifierFlags0.useCorefFeatures);
      assertFalse(seqClassifierFlags0.noNeighborConstraints);
      assertFalse(seqClassifierFlags0.backpropLopTraining);
      assertFalse(seqClassifierFlags0.terminateOnEvalImprovement);
      assertFalse(seqClassifierFlags0.suppressMidDotPostprocessing);
      assertFalse(seqClassifierFlags0.checkNameList);
      assertEquals(0, seqClassifierFlags0.maxQNItr);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesAll);
      assertFalse(seqClassifierFlags0.keepEnglishWhitespaces);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions);
      assertFalse(seqClassifierFlags0.perceptronDebug);
      assertFalse(seqClassifierFlags0.justify);
      assertFalse(seqClassifierFlags0.splitSlashHyphenWords);
      assertEquals(1, seqClassifierFlags0.selfTrainIterations);
      assertFalse(seqClassifierFlags0.baseline);
      assertFalse(seqClassifierFlags0.useCTBChar2);
      assertFalse(seqClassifierFlags0.iobTags);
      assertTrue(seqClassifierFlags0.useCWSFeatures);
      assertFalse(seqClassifierFlags0.usePk);
      assertFalse(seqClassifierFlags0.useABSTRFreqDict);
      assertFalse(seqClassifierFlags0.useFREQ);
      assertEquals(0.0, seqClassifierFlags0.featureWeightThreshold, 0.01);
      assertEquals(0, seqClassifierFlags0.evaluateIters);
      assertTrue(seqClassifierFlags0.useViterbi);
      assertFalse(seqClassifierFlags0.usePrevVB);
      assertFalse(seqClassifierFlags0.lazyUpdate);
      assertFalse(seqClassifierFlags0.skipOutputRegularization);
      assertFalse(seqClassifierFlags0.learnENBasedOnCH);
      assertEquals(1, seqClassifierFlags0.numTimesRemoveTopN);
      assertFalse(seqClassifierFlags0.strictGoodCoNLL);
      assertFalse(seqClassifierFlags0.powerAlignProb);
      assertFalse(seqClassifierFlags0.useWordShapeGaz);
      assertTrue(seqClassifierFlags0.initViterbi);
      assertFalse(seqClassifierFlags0.largeChSegFile);
      assertFalse(seqClassifierFlags0.useNeighborNGrams);
      assertFalse(seqClassifierFlags0.usePosition);
      assertTrue(seqClassifierFlags0.averagePerceptron);
      assertEquals(0.0, seqClassifierFlags0.priorAlpha, 0.01);
      assertFalse(seqClassifierFlags0.keepEmptySentences);
      assertFalse(seqClassifierFlags0.usePrev);
      assertEquals(1, seqClassifierFlags0.startFold);
      assertFalse(seqClassifierFlags0.useNegDict2);
      assertFalse(seqClassifierFlags0.useFirstWord);
      assertFalse(seqClassifierFlags0.useIsURL);
      assertFalse(seqClassifierFlags0.useAdaDiff);
      assertFalse(seqClassifierFlags0.useWord1);
      assertFalse(seqClassifierFlags0.useWord2);
      assertFalse(seqClassifierFlags0.useWord3);
      assertEquals(8, seqClassifierFlags0.distSimMaxBits);
      assertFalse(seqClassifierFlags0.useWord4);
      assertFalse(seqClassifierFlags0.useWideDisjunctive);
      assertFalse(seqClassifierFlags0.useCTBPre1);
      assertFalse(seqClassifierFlags0.useNegDict4);
      assertFalse(seqClassifierFlags0.useProtoFeatures);
      assertFalse(seqClassifierFlags0.useNegDict3);
      assertEquals(0.9, seqClassifierFlags0.selfTrainConfidenceThreshold, 0.01);
      assertFalse(seqClassifierFlags0.useUniformPrior);
      assertFalse(seqClassifierFlags0.useLC);
      assertFalse(seqClassifierFlags0.groupByOutputClass);
      assertEquals(0.0, seqClassifierFlags0.alignmentPruneThreshold, 0.01);
      assertFalse(seqClassifierFlags0.useFilter);
      assertFalse(seqClassifierFlags0.useKL);
      assertEquals(0, seqClassifierFlags0.removeTopN);
      assertFalse(seqClassifierFlags0.conjoinShapeNGrams);
      assertFalse(seqClassifierFlags0.cleanGazette);
      assertFalse(seqClassifierFlags0.prependEmbedding);
      assertEquals(0, seqClassifierFlags0.numOfSlices);
      assertFalse(seqClassifierFlags0.useCWSWordFeatures);
      assertFalse(seqClassifierFlags0.applyNumericClassifiers);
      assertFalse(seqClassifierFlags0.useACR);
      assertFalse(seqClassifierFlags0.useSGD);
      assertEquals((-1), seqClassifierFlags0.samplingSpeedUpThreshold);
      assertFalse(seqClassifierFlags0.useBilingualNERPrior);
      assertFalse(seqClassifierFlags0.pctSegmenterLenAdjust);
      assertFalse(seqClassifierFlags0.useReverse);
      assertFalse(seqClassifierFlags0.useHardGE);
      assertFalse(seqClassifierFlags0.tuneSGD);
      assertFalse(seqClassifierFlags0.useTitle);
      assertTrue(seqClassifierFlags0.useWord);
      assertFalse(seqClassifierFlags0.useSequentialScanSampling);
      assertFalse(seqClassifierFlags0.randomLopWeights);
      assertEquals(1, seqClassifierFlags0.numStartLayers);
      assertEquals((-1), seqClassifierFlags0.SGDPasses);
      assertFalse(seqClassifierFlags0.useNB);
      assertEquals(0, seqClassifierFlags0.ocrFold);
      assertFalse(seqClassifierFlags0.useRad1);
      assertFalse(seqClassifierFlags0.fakeDataset);
      assertFalse(seqClassifierFlags0.useSeenFeaturesOnly);
      assertFalse(seqClassifierFlags0.useChPos);
      assertFalse(seqClassifierFlags0.useSymWordPairs);
      assertFalse(seqClassifierFlags0.appendLC);
      assertFalse(seqClassifierFlags0.useGEforSup);
      assertFalse(seqClassifierFlags0.useNegCTBDict4);
      assertFalse(seqClassifierFlags0.useNegCTBDict3);
      assertFalse(seqClassifierFlags0.useNegCTBDict2);
      assertEquals(0, seqClassifierFlags0.scaledSGDMethod);
      assertFalse(seqClassifierFlags0.useRad2);
      assertFalse(seqClassifierFlags0.twoStage);
      assertFalse(seqClassifierFlags0.normalizeTerms);
      assertEquals(0, seqClassifierFlags0.maxDocSize);
      assertEquals(0.0, seqClassifierFlags0.annealingRate, 0.01);
      assertFalse(seqClassifierFlags0.useWordn);
      assertFalse(seqClassifierFlags0.numberEquivalenceDistSim);
      assertFalse(seqClassifierFlags0.useFeaturesCpC6gram);
      assertEquals(25, seqClassifierFlags0.QNsize);
      assertFalse(seqClassifierFlags0.useTaggySequences);
      assertFalse(seqClassifierFlags0.useNoisyLabel);
      assertFalse(seqClassifierFlags0.usePKPre1);
      assertFalse(seqClassifierFlags0.useNegHKDict4);
      assertFalse(seqClassifierFlags0.useNegHKDict3);
      assertFalse(seqClassifierFlags0.useNegHKDict2);
      assertEquals(0, seqClassifierFlags0.maxAdditionalKnownLCWords);
      assertEquals(1.0, seqClassifierFlags0.lambdaCH, 0.01);
      assertFalse(seqClassifierFlags0.useHybrid);
      assertTrue(seqClassifierFlags0.restrictLabels);
      assertFalse(seqClassifierFlags0.weightByEntropy);
      assertFalse(seqClassifierFlags0.augmentedDateChars);
      assertFalse(seqClassifierFlags0.testObjFunction);
      assertFalse(seqClassifierFlags0.printNR);
      assertFalse(seqClassifierFlags0.usePhraseWordTags);
      assertFalse(seqClassifierFlags0.usePrediction2);
      assertEquals(0, seqClassifierFlags0.hybridCutoffIteration);
      assertFalse(seqClassifierFlags0.strictlyZeroethOrder);
      assertEquals(0, seqClassifierFlags0.numTimesPruneFeatures);
      assertFalse(seqClassifierFlags0.groupByFeatureTemplate);
      assertFalse(seqClassifierFlags0.useLastRealWord);
      assertEquals(1000, seqClassifierFlags0.wordSegBeamSize);
      assertFalse(seqClassifierFlags0.useRandomSeed);
      assertFalse(seqClassifierFlags0.announceObjectBankEntries);
      assertFalse(seqClassifierFlags0.estimateInitial);
      assertFalse(seqClassifierFlags0.useNegASBCDict4);
      assertFalse(seqClassifierFlags0.transitionEdgeOnly);
      assertFalse(seqClassifierFlags0.useNumberFeature);
      assertFalse(seqClassifierFlags0.useNegASBCDict2);
      assertFalse(seqClassifierFlags0.useNegASBCDict3);
      assertFalse(seqClassifierFlags0.lowercaseNGrams);
      assertFalse(seqClassifierFlags0.memoryThrift);
      assertEquals(100, seqClassifierFlags0.numSamples);
      assertTrue(seqClassifierFlags0.applyNERPenalty);
      assertFalse(seqClassifierFlags0.addBiasToEmbedding);
      assertEquals(2, seqClassifierFlags0.maxLeft);
      assertFalse(seqClassifierFlags0.groupByInput);
      assertFalse(seqClassifierFlags0.printTrainLabels);
      assertFalse(seqClassifierFlags0.printWeights);
      assertFalse(seqClassifierFlags0.intern2);
      assertFalse(seqClassifierFlags0.combo);
      assertEquals(0.0, seqClassifierFlags0.priorLambda, 0.01);
      assertFalse(seqClassifierFlags0.useGoodForNamesCpC);
      assertFalse(seqClassifierFlags0.casedDistSim);
      assertEquals(1.0, seqClassifierFlags0.sigma, 0.01);
      assertTrue(seqClassifierFlags0.useDenero);
      assertTrue(seqClassifierFlags0.keepOBInMemory);
      assertEquals(0, seqClassifierFlags0.interimOutputFreq);
      assertFalse(seqClassifierFlags0.printXML);
      assertFalse(seqClassifierFlags0.useHKChar2);
      assertFalse(seqClassifierFlags0.useAdaDelta);
      assertFalse(seqClassifierFlags0.dontExtendTaggy);
      assertFalse(seqClassifierFlags0.regularizeSoftmaxTieParam);
      assertEquals(0.1, seqClassifierFlags0.initialGain, 0.01);
      assertFalse(seqClassifierFlags0.useABSTR);
      assertFalse(seqClassifierFlags0.useASBCSuf1);
      assertFalse(seqClassifierFlags0.strictlySecondOrder);
      assertFalse(seqClassifierFlags0.useDict2);
      assertFalse(seqClassifierFlags0.booleanFeatures);
      assertFalse(seqClassifierFlags0.useTopics);
      assertFalse(seqClassifierFlags0.useUnicodeType5gram);
      assertFalse(seqClassifierFlags0.useTOK);
      assertFalse(seqClassifierFlags0.retainEntitySubclassification);
      assertFalse(seqClassifierFlags0.saveFeatureIndexToDisk);
      assertFalse(seqClassifierFlags0.verboseForTrueCasing);
      assertFalse(seqClassifierFlags0.useABGENE);
      assertFalse(seqClassifierFlags0.terminateOnAvgImprovement);
      assertFalse(seqClassifierFlags0.strictlyThirdOrder);
      assertFalse(seqClassifierFlags0.useTypeSeqs2);
      assertFalse(seqClassifierFlags0.useTypeSeqs3);
      assertFalse(seqClassifierFlags0.splitOnHead);
      assertFalse(seqClassifierFlags0.useUnicodeType);
      assertEquals((-1), seqClassifierFlags0.numHiddenUnits);
      assertFalse(seqClassifierFlags0.useBigramInTwoClique);
      assertEquals(0.0, seqClassifierFlags0.removeTopNPercent, 0.01);
      assertFalse(seqClassifierFlags0.useSMD);
      assertFalse(seqClassifierFlags0.sighanPostProcessing);
      assertEquals(1, seqClassifierFlags0.nerSlowerTimes);
      assertFalse(seqClassifierFlags0.evaluateTrain);
      assertEquals(1.0, seqClassifierFlags0.unsupDropoutScale, 0.01);
      assertFalse(seqClassifierFlags0.ocrTrain);
      assertFalse(seqClassifierFlags0.useMoreAbbr);
      assertFalse(seqClassifierFlags0.useChunks);
      assertFalse(seqClassifierFlags0.useSymTags);
      assertEquals(8, seqClassifierFlags0.maxAllowedChromaticSize);
      assertEquals((-1), seqClassifierFlags0.QNPasses);
      assertFalse(seqClassifierFlags0.useNextSequences);
      assertFalse(seqClassifierFlags0.restrictTransitionsTimit);
      assertEquals(0.5, seqClassifierFlags0.alignmentDecodeThreshold, 0.01);
      assertTrue(seqClassifierFlags0.separateASCIIandRange);
      assertFalse(seqClassifierFlags0.secondOrderNonLinear);
      assertFalse(seqClassifierFlags0.use2W);
      assertFalse(seqClassifierFlags0.useEitherSideDisjunctive);
      assertFalse(seqClassifierFlags0.tieOutputLayer);
      assertFalse(seqClassifierFlags0.verboseMode);
      assertTrue(seqClassifierFlags0.includeC2EViterbi);
      assertFalse(seqClassifierFlags0.useDictPK2);
      assertFalse(seqClassifierFlags0.hardcodeSoftmaxOutputWeights);
      assertEquals(1, seqClassifierFlags0.kBest);
      assertFalse(seqClassifierFlags0.printFactorTable);
      assertTrue(seqClassifierFlags0.useMemoryEvaluator);
      assertFalse(seqClassifierFlags0.useVB);
      assertFalse(seqClassifierFlags0.useIfInteger);
      assertFalse(seqClassifierFlags0.useCommonWordsFeature);
      assertFalse(seqClassifierFlags0.useASBCPre1);
      assertEquals(0.0, seqClassifierFlags0.softmaxTieLambda, 0.01);
      assertTrue(seqClassifierFlags0.useHiddenLayer);
      assertFalse(seqClassifierFlags0.useBerkeleyAlignerForViterbi);
      assertFalse(seqClassifierFlags0.useTitle2);
      assertFalse(seqClassifierFlags0.useAdaGradFOBOS);
      assertFalse(seqClassifierFlags0.useMUCFeatures);
      assertFalse(seqClassifierFlags0.useNERPrior);
      assertFalse(seqClassifierFlags0.useABSTRFreq);
      assertFalse(seqClassifierFlags0.useMoreTags);
      assertEquals(1, seqClassifierFlags0.selfTrainWindowSize);
      assertFalse(seqClassifierFlags0.useBoundarySequences);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions3);
      assertEquals(0.95, seqClassifierFlags0.adaDeltaRho, 0.01);
      assertFalse(seqClassifierFlags0.useNGrams);
      assertFalse(seqClassifierFlags0.useSigmoid);
      assertFalse(seqClassifierFlags0.testHessSamples);
      assertFalse(seqClassifierFlags0.useLongSequences);
      assertFalse(seqClassifierFlags0.useTrainLexicon);
      assertFalse(seqClassifierFlags0.groupByHiddenUnit);
      assertFalse(seqClassifierFlags0.useNextRealWord);
      assertFalse(seqClassifierFlags0.useTypeSeqs);
      assertFalse(seqClassifierFlags0.geDebug);
      assertEquals(30, seqClassifierFlags0.beamSize);
      assertFalse(seqClassifierFlags0.use4Clique);
      assertEquals(1.0, seqClassifierFlags0.dropoutScale, 0.01);
      assertFalse(seqClassifierFlags0.useMinimalAbbr);
      assertFalse(seqClassifierFlags0.useUnicodeType4gram);
      assertEquals(0, seqClassifierFlags0.numOfFeatureSlices);
      assertFalse(seqClassifierFlags0.mergeTags);
      assertFalse(seqClassifierFlags0.useNPGovernor);
      assertFalse(seqClassifierFlags0.checkGradient);
      assertFalse(seqClassifierFlags0.useURLSequences);
      assertFalse(seqClassifierFlags0.useEntityRule);
      assertEquals(1, seqClassifierFlags0.numRuns);
      assertFalse(seqClassifierFlags0.useRule2);
      assertFalse(seqClassifierFlags0.useSGDtoQN);
      assertFalse(seqClassifierFlags0.useASBCChar2);
      assertFalse(seqClassifierFlags0.noEdgeFeature);
      assertFalse(seqClassifierFlags0.noMidNGrams);
      assertFalse(seqClassifierFlags0.normalize);
      assertFalse(seqClassifierFlags0.useSuf);
      assertFalse(seqClassifierFlags0.useUnicodeBlock);
      assertFalse(seqClassifierFlags0.useAcqPrior);
      assertEquals(4, seqClassifierFlags0.disjunctionWidth);
      assertFalse(seqClassifierFlags0.useOutDict2);
      assertFalse(seqClassifierFlags0.keepAllWhitespaces);
      assertFalse(seqClassifierFlags0.softmaxOutputLayer);
      assertEquals(0.1, seqClassifierFlags0.gainSGD, 0.01);
      assertFalse(seqClassifierFlags0.useGazettePhrases);
      assertEquals(10, seqClassifierFlags0.totalFeatureSlice);
      assertFalse(seqClassifierFlags0.testVariance);
      assertFalse(seqClassifierFlags0.usePrevNextLemmas);
      assertFalse(seqClassifierFlags0.useHKSuf1);
      assertEquals(0.0, seqClassifierFlags0.pctSegmenterScale, 0.01);
      assertFalse(seqClassifierFlags0.cacheNGrams);
      assertEquals((-1), seqClassifierFlags0.wordShape);
      assertEquals(1, seqClassifierFlags0.multiThreadPerceptron);
      assertFalse(seqClassifierFlags0.useChromaticSampling);
      assertFalse(seqClassifierFlags0.useFeaturesC4gram);
      assertFalse(seqClassifierFlags0.matchNERIncentive);
      assertFalse(seqClassifierFlags0.useUndirectedDisjunctive);
      assertFalse(seqClassifierFlags0.doGibbs);
      assertFalse(seqClassifierFlags0.factorInBiEdgePotential);
      assertFalse(seqClassifierFlags0.useStochasticQN);
      assertFalse(seqClassifierFlags0.outputIterationsToFile);
      assertFalse(seqClassifierFlags0.useDualDecomp);
      assertEquals(0.1, seqClassifierFlags0.initRate, 0.01);
      assertEquals(1, seqClassifierFlags0.CRForder);
      assertFalse(seqClassifierFlags0.useFloat);
      assertFalse(seqClassifierFlags0.useYear);
      assertFalse(seqClassifierFlags0.useTags);
      assertFalse(seqClassifierFlags0.useAbbr);
      assertFalse(seqClassifierFlags0.useBeginSent);
      assertFalse(seqClassifierFlags0.useSum);
      assertFalse(seqClassifierFlags0.expandMidDot);
      assertEquals(25, seqClassifierFlags0.QNsize2);
      assertFalse(seqClassifierFlags0.useQuartic);
      assertEquals(0.01, seqClassifierFlags0.epsilon, 0.01);
      assertFalse(seqClassifierFlags0.usePrevSequences);
      assertFalse(seqClassifierFlags0.useDictCTB2);
      assertFalse(seqClassifierFlags0.useShapeStrings4);
      assertFalse(seqClassifierFlags0.usePKChar2);
      assertFalse(seqClassifierFlags0.useShapeStrings5);
      assertEquals(1, seqClassifierFlags0.numFolds);
      assertFalse(seqClassifierFlags0.useShapeStrings3);
      assertFalse(seqClassifierFlags0.useDisjunctive);
      assertFalse(seqClassifierFlags0.useShapeStrings1);
      assertFalse(seqClassifierFlags0.subCWGaz);
      assertTrue(seqClassifierFlags0.learnCHBasedOnEN);
      assertFalse(seqClassifierFlags0.useRad2b);
      assertEquals(0, seqClassifierFlags0.multiThreadGibbs);
      assertEquals(15, seqClassifierFlags0.stochasticBatchSize);
      assertFalse(seqClassifierFlags0.doAdaptation);
      assertFalse(seqClassifierFlags0.removeBackgroundSingletonFeatures);
      assertFalse(seqClassifierFlags0.useLemmas);
      assertFalse(seqClassifierFlags0.blockInitialize);
      assertFalse(seqClassifierFlags0.includeFullCRFInLOP);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSize, 0.01);
      assertFalse(seqClassifierFlags0.useOrdinal);
      assertFalse(seqClassifierFlags0.useMinimalAbbr1);
      assertFalse(seqClassifierFlags0.useBagOfWords);
      assertFalse(seqClassifierFlags0.showNCCInfo);
      assertFalse(seqClassifierFlags0.useOWLQN);
      assertFalse(seqClassifierFlags0.useWordPairs);
      assertFalse(seqClassifierFlags0.useMoreGazFeatures);
      assertFalse(seqClassifierFlags0.dualDecompDebug);
      assertFalse(seqClassifierFlags0.doFeatureDiscovery);
      assertFalse(seqClassifierFlags0.normalizeTimex);
      assertFalse(seqClassifierFlags0.usePre);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions2);
      assertFalse(seqClassifierFlags0.nonLinearCRF);
      assertFalse(seqClassifierFlags0.useSegmentation);
      assertFalse(seqClassifierFlags0.useEitherSideWord);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions3);
      assertEquals(100, seqClassifierFlags0.printClassifierParam);
      assertFalse(seqClassifierFlags0.useRadical);
      assertFalse(seqClassifierFlags0.dump);
      assertTrue(seqClassifierFlags0.initWithPosterior);
      assertTrue(seqClassifierFlags0.splitDocuments);
      assertFalse(seqClassifierFlags0.useHeadGov);
      assertFalse(seqClassifierFlags0.useFeaturesC6gram);
      assertFalse(seqClassifierFlags0.factorInAlignmentProb);
      assertEquals(0.0, seqClassifierFlags0.l1reg, 0.01);
      assertFalse(seqClassifierFlags0.useAbbr1);
      assertEquals((-1), seqClassifierFlags0.maxNGramLeng);
      assertFalse(seqClassifierFlags0.useEntityTypes);
      assertFalse(seqClassifierFlags0.useSentenceNumber);
      assertFalse(seqClassifierFlags0.useWordnetFeatures);
      assertEquals(3, seqClassifierFlags0.charHalfWindow);
      assertFalse(seqClassifierFlags0.dehyphenateNGrams);
      assertEquals((-1), seqClassifierFlags0.maxIterations);
      assertFalse(seqClassifierFlags0.useWEBFreqDict);
      assertEquals(0.0, seqClassifierFlags0.dropoutRate, 0.01);
      assertFalse(seqClassifierFlags0.useShapeConjunctions);
      assertFalse(seqClassifierFlags0.useCRFforUnsup);
      assertFalse(seqClassifierFlags0.useTaggySequencesShapeInteraction);
      assertFalse(seqClassifierFlags0.useGazettes);
      assertFalse(seqClassifierFlags0.lowerNewgeneThreshold);
      assertEquals(1, seqClassifierFlags0.endFold);
      assertFalse(seqClassifierFlags0.usePrediction);
      assertFalse(seqClassifierFlags0.usePhraseFeatures);
      assertEquals(0, seqClassifierFlags0.featureCountThreshold);
      assertFalse(seqClassifierFlags0.useEntityTypeSequences);
      assertFalse(seqClassifierFlags0.useRule);
      assertEquals((-1), seqClassifierFlags0.labelDictionaryCutoff);
      assertEquals(10, seqClassifierFlags0.totalDataSlice);
      assertFalse(seqClassifierFlags0.useExtraTaggySequences);
      assertTrue(seqClassifierFlags0.useQN);
      assertFalse(seqClassifierFlags0.usePhraseWordSpecialTags);
      assertEquals(1.0, seqClassifierFlags0.alignDDAlpha, 0.01);
      assertFalse(seqClassifierFlags0.dampDDStepSizeWithAlignmentProb);
      assertFalse(seqClassifierFlags0.pctSegmenterScaleByCRF);
      assertFalse(seqClassifierFlags0.powerAlignProbAsAddition);
      assertEquals(10, seqClassifierFlags0.wideDisjunctionWidth);
      assertTrue(seqClassifierFlags0.useOutputLayer);
      assertFalse(seqClassifierFlags0.useDictleng);
      assertFalse(seqClassifierFlags0.useSUTime);
      assertFalse(seqClassifierFlags0.dropoutApprox);
      assertFalse(seqClassifierFlags0.useDisjunctiveShapeInteraction);
      assertTrue(seqClassifierFlags0.useExternal);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions2);
      assertFalse(seqClassifierFlags0.alternateTraining);
      assertFalse(seqClassifierFlags0.greekifyNGrams);
      assertEquals(1.0E-4, seqClassifierFlags0.tolerance, 0.01);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions3);
      assertFalse(seqClassifierFlags0.useParenMatching);
      assertFalse(seqClassifierFlags0.intern);
      assertFalse(seqClassifierFlags0.printProbs);
      assertEquals((-1), seqClassifierFlags0.arbitraryInputLayerSize);
      assertFalse(seqClassifierFlags0.useKBest);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSizeAlignment, 0.01);
      assertFalse(seqClassifierFlags0.useNext);
      assertEquals(1, seqClassifierFlags0.numDatasetsPerFile);
      assertFalse(seqClassifierFlags0.dualDecompNotBIO);
      assertFalse(seqClassifierFlags0.bioSubmitOutput);
      assertFalse(seqClassifierFlags0.useChunkySequences);
      assertFalse(seqClassifierFlags0.evaluateBackground);
      assertFalse(seqClassifierFlags0.useNoisyNonNoisyFeature);
      assertFalse(seqClassifierFlags0.useReverseAffix);
      assertFalse(seqClassifierFlags0.useYetMoreCpCShapes);
      assertFalse(seqClassifierFlags0.useMoreNeighborNGrams);
      assertFalse(seqClassifierFlags0.useHk);
      assertTrue(seqClassifierFlags0.useKnownLCWords);
      assertTrue(seqClassifierFlags0.useInternal);
      assertFalse(seqClassifierFlags0.useSemPrior);
      assertFalse(seqClassifierFlags0.useANTE);
      assertFalse(seqClassifierFlags0.usePKSuf1);
      assertFalse(seqClassifierFlags0.useTypeySequences);
      assertFalse(seqClassifierFlags0.usePhraseWords);
      assertFalse(seqClassifierFlags0.useMSRChar2);
      assertTrue(seqClassifierFlags0.useSequences);
      assertFalse(seqClassifierFlags0.randomLopFeatureSplit);
      assertFalse(seqClassifierFlags0.readStdin);
      assertFalse(seqClassifierFlags0.useRobustQN);
      assertFalse(seqClassifierFlags0.useIsDateRange);
      assertEquals(0, seqClassifierFlags0.maxRight);
      assertFalse(seqClassifierFlags0.useWEB);
      assertEquals((-1), seqClassifierFlags0.purgeFeatures);
      assertFalse(seqClassifierFlags0.printFirstOrderProbs);
      assertFalse(seqClassifierFlags0.makeConsistent);
      assertFalse(seqClassifierFlags0.useBig5);
      assertFalse(seqClassifierFlags0.initWithNERPosterior);
      assertFalse(seqClassifierFlags0.removeStrictGoodCoNLLDuplicates);
      assertFalse(seqClassifierFlags0.dualDecompAlignment);
      assertFalse(seqClassifierFlags0.useFeaturesCpC5gram);
      assertFalse(seqClassifierFlags0.suppressTestDebug);
      assertFalse(seqClassifierFlags0.useOccurrencePatterns);
      assertFalse(seqClassifierFlags0.sloppyGazette);
      assertFalse(seqClassifierFlags0.useGazFeatures);
      assertFalse(seqClassifierFlags0.useNextVB);
      assertFalse(seqClassifierFlags0.useMidDotShape);
      assertEquals(Integer.MAX_VALUE, seqClassifierFlags0.printFeaturesUpto);
      assertEquals(1, seqClassifierFlags0.featureThreshold);
      assertEquals(0.0, seqClassifierFlags0.featureDiffThresh, 0.01);
      assertFalse(seqClassifierFlags0.useNERPriorBIO);
      assertFalse(seqClassifierFlags0.useGENIA);
      assertFalse(seqClassifierFlags0.useNegPKDict3);
      assertFalse(seqClassifierFlags0.useNegPKDict2);
      assertFalse(seqClassifierFlags0.deleteBlankLines);
      assertFalse(seqClassifierFlags0.useNegPKDict4);
      assertFalse(seqClassifierFlags0.sparseOutputLayer);
      assertEquals(1.0, seqClassifierFlags0.lambdaEN, 0.01);
      assertEquals(0, seqClassifierFlags0.featureCountThresh);
      assertFalse(seqClassifierFlags0.useDictHK2);
      assertFalse(seqClassifierFlags0.useObservedFeaturesOnly);
      assertFalse(seqClassifierFlags0.useGenericFeatures);
      assertFalse(seqClassifierFlags0.iobWrapper);
      assertEquals(0, seqClassifierFlags0.nerSkipFirstK);
      assertEquals(1.0, seqClassifierFlags0.adaptSigma, 0.01);
      assertFalse(seqClassifierFlags0.useClassFeature);
      assertEquals(0, seqClassifierFlags0.startEvaluateIters);
      assertFalse(seqClassifierFlags0.useMsr);
      assertFalse(seqClassifierFlags0.useHKPre1);
      assertFalse(seqClassifierFlags0.useAs);
      assertEquals(Double.POSITIVE_INFINITY, seqClassifierFlags0.searchGraphPrune, 0.01);
      assertFalse(seqClassifierFlags0.useUnknown);
      assertFalse(seqClassifierFlags0.useBerkeleyCompetitivePosterior);
      assertFalse(seqClassifierFlags0.useObservedSequencesOnly);
      assertFalse(seqClassifierFlags0.doFE);
      assertEquals(0.0, seqClassifierFlags0.newgeneThreshold, 0.01);
      assertEquals(0, seqClassifierFlags0.dualDecompMaxItr);
      assertFalse(seqClassifierFlags0.strictlyFirstOrder);
      assertFalse(seqClassifierFlags0.useFeaturesC5gram);
      assertEquals((-1), seqClassifierFlags0.tuneSampleSize);
      assertFalse(seqClassifierFlags0.purgeDatasets);
      assertTrue(seqClassifierFlags0.biAlignmentPriorIsPMI);
      assertFalse(seqClassifierFlags0.useDictASBC2);
      assertFalse(seqClassifierFlags0.addCapitalFeatures);
      assertEquals(1.0, seqClassifierFlags0.randomizedRatio, 0.01);
      assertFalse(seqClassifierFlags0.useInPlaceSGD);
      assertFalse(seqClassifierFlags0.useDistSim);
      assertEquals(1, seqClassifierFlags0.terminateOnEvalImprovementNumOfEpoch);
      assertFalse(seqClassifierFlags0.useEmbedding);
      assertEquals(1, seqClassifierFlags0.bisequencePriorType);
      assertFalse(seqClassifierFlags0.gradientDebug);
      assertFalse(seqClassifierFlags0.selfTest);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesBigram);
      assertEquals(2, seqClassifierFlags0.CRFwindow);
      assertEquals(1, seqClassifierFlags0.multiThreadGrad);
      assertFalse(seqClassifierFlags0.useNPHead);
      assertFalse(seqClassifierFlags0.useAltGazFeatures);
      assertFalse(seqClassifierFlags0.showCCInfo);
      assertEquals(50, seqClassifierFlags0.SGD2QNhessSamples);
      assertFalse(seqClassifierFlags0.useHuber);
      assertEquals(0.001, seqClassifierFlags0.adaGradEps, 0.01);
      assertFalse(seqClassifierFlags0.timitDatum);
      assertFalse(seqClassifierFlags0.useFeaturesCpC4gram);
      assertFalse(seqClassifierFlags0.useWordTag);
      assertFalse(seqClassifierFlags0.useLemmaAsWord);
      
      int int0 = coreLabel0.endPosition();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertEquals("", seqClassifierFlags0.toString());
      assertEquals(0, coreLabel0.size());
      assertTrue(properties0.equals((Object)properties1));
      assertTrue(properties1.equals((Object)properties0));
      assertEquals((-1), int0);
      assertNotSame(properties0, properties1);
      assertNotSame(properties1, properties0);
      assertFalse(seqClassifierFlags0.useScaledSGD);
      assertFalse(seqClassifierFlags0.useDisjShape);
      assertFalse(seqClassifierFlags0.useCTBSuf1);
      assertEquals(1, seqClassifierFlags0.numLopExpert);
      assertFalse(seqClassifierFlags0.useLabelSource);
      assertFalse(seqClassifierFlags0.useShapeStrings);
      assertEquals(0, seqClassifierFlags0.multiThreadClassifier);
      assertFalse(seqClassifierFlags0.printLabelValue);
      assertFalse(seqClassifierFlags0.useOnlySeenWeights);
      assertFalse(seqClassifierFlags0.useCorefFeatures);
      assertFalse(seqClassifierFlags0.noNeighborConstraints);
      assertFalse(seqClassifierFlags0.backpropLopTraining);
      assertFalse(seqClassifierFlags0.terminateOnEvalImprovement);
      assertFalse(seqClassifierFlags0.suppressMidDotPostprocessing);
      assertFalse(seqClassifierFlags0.checkNameList);
      assertEquals(0, seqClassifierFlags0.maxQNItr);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesAll);
      assertFalse(seqClassifierFlags0.keepEnglishWhitespaces);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions);
      assertFalse(seqClassifierFlags0.perceptronDebug);
      assertFalse(seqClassifierFlags0.justify);
      assertFalse(seqClassifierFlags0.splitSlashHyphenWords);
      assertEquals(1, seqClassifierFlags0.selfTrainIterations);
      assertFalse(seqClassifierFlags0.baseline);
      assertFalse(seqClassifierFlags0.useCTBChar2);
      assertFalse(seqClassifierFlags0.iobTags);
      assertTrue(seqClassifierFlags0.useCWSFeatures);
      assertFalse(seqClassifierFlags0.usePk);
      assertFalse(seqClassifierFlags0.useABSTRFreqDict);
      assertFalse(seqClassifierFlags0.useFREQ);
      assertEquals(0.0, seqClassifierFlags0.featureWeightThreshold, 0.01);
      assertEquals(0, seqClassifierFlags0.evaluateIters);
      assertTrue(seqClassifierFlags0.useViterbi);
      assertFalse(seqClassifierFlags0.usePrevVB);
      assertFalse(seqClassifierFlags0.lazyUpdate);
      assertFalse(seqClassifierFlags0.skipOutputRegularization);
      assertFalse(seqClassifierFlags0.learnENBasedOnCH);
      assertEquals(1, seqClassifierFlags0.numTimesRemoveTopN);
      assertFalse(seqClassifierFlags0.strictGoodCoNLL);
      assertFalse(seqClassifierFlags0.powerAlignProb);
      assertFalse(seqClassifierFlags0.useWordShapeGaz);
      assertTrue(seqClassifierFlags0.initViterbi);
      assertFalse(seqClassifierFlags0.largeChSegFile);
      assertFalse(seqClassifierFlags0.useNeighborNGrams);
      assertFalse(seqClassifierFlags0.usePosition);
      assertTrue(seqClassifierFlags0.averagePerceptron);
      assertEquals(0.0, seqClassifierFlags0.priorAlpha, 0.01);
      assertFalse(seqClassifierFlags0.keepEmptySentences);
      assertFalse(seqClassifierFlags0.usePrev);
      assertEquals(1, seqClassifierFlags0.startFold);
      assertFalse(seqClassifierFlags0.useNegDict2);
      assertFalse(seqClassifierFlags0.useFirstWord);
      assertFalse(seqClassifierFlags0.useIsURL);
      assertFalse(seqClassifierFlags0.useAdaDiff);
      assertFalse(seqClassifierFlags0.useWord1);
      assertFalse(seqClassifierFlags0.useWord2);
      assertFalse(seqClassifierFlags0.useWord3);
      assertEquals(8, seqClassifierFlags0.distSimMaxBits);
      assertFalse(seqClassifierFlags0.useWord4);
      assertFalse(seqClassifierFlags0.useWideDisjunctive);
      assertFalse(seqClassifierFlags0.useCTBPre1);
      assertFalse(seqClassifierFlags0.useNegDict4);
      assertFalse(seqClassifierFlags0.useProtoFeatures);
      assertFalse(seqClassifierFlags0.useNegDict3);
      assertEquals(0.9, seqClassifierFlags0.selfTrainConfidenceThreshold, 0.01);
      assertFalse(seqClassifierFlags0.useUniformPrior);
      assertFalse(seqClassifierFlags0.useLC);
      assertFalse(seqClassifierFlags0.groupByOutputClass);
      assertEquals(0.0, seqClassifierFlags0.alignmentPruneThreshold, 0.01);
      assertFalse(seqClassifierFlags0.useFilter);
      assertFalse(seqClassifierFlags0.useKL);
      assertEquals(0, seqClassifierFlags0.removeTopN);
      assertFalse(seqClassifierFlags0.conjoinShapeNGrams);
      assertFalse(seqClassifierFlags0.cleanGazette);
      assertFalse(seqClassifierFlags0.prependEmbedding);
      assertEquals(0, seqClassifierFlags0.numOfSlices);
      assertFalse(seqClassifierFlags0.useCWSWordFeatures);
      assertFalse(seqClassifierFlags0.applyNumericClassifiers);
      assertFalse(seqClassifierFlags0.useACR);
      assertFalse(seqClassifierFlags0.useSGD);
      assertEquals((-1), seqClassifierFlags0.samplingSpeedUpThreshold);
      assertFalse(seqClassifierFlags0.useBilingualNERPrior);
      assertFalse(seqClassifierFlags0.pctSegmenterLenAdjust);
      assertFalse(seqClassifierFlags0.useReverse);
      assertFalse(seqClassifierFlags0.useHardGE);
      assertFalse(seqClassifierFlags0.tuneSGD);
      assertFalse(seqClassifierFlags0.useTitle);
      assertTrue(seqClassifierFlags0.useWord);
      assertFalse(seqClassifierFlags0.useSequentialScanSampling);
      assertFalse(seqClassifierFlags0.randomLopWeights);
      assertEquals(1, seqClassifierFlags0.numStartLayers);
      assertEquals((-1), seqClassifierFlags0.SGDPasses);
      assertFalse(seqClassifierFlags0.useNB);
      assertEquals(0, seqClassifierFlags0.ocrFold);
      assertFalse(seqClassifierFlags0.useRad1);
      assertFalse(seqClassifierFlags0.fakeDataset);
      assertFalse(seqClassifierFlags0.useSeenFeaturesOnly);
      assertFalse(seqClassifierFlags0.useChPos);
      assertFalse(seqClassifierFlags0.useSymWordPairs);
      assertFalse(seqClassifierFlags0.appendLC);
      assertFalse(seqClassifierFlags0.useGEforSup);
      assertFalse(seqClassifierFlags0.useNegCTBDict4);
      assertFalse(seqClassifierFlags0.useNegCTBDict3);
      assertFalse(seqClassifierFlags0.useNegCTBDict2);
      assertEquals(0, seqClassifierFlags0.scaledSGDMethod);
      assertFalse(seqClassifierFlags0.useRad2);
      assertFalse(seqClassifierFlags0.twoStage);
      assertFalse(seqClassifierFlags0.normalizeTerms);
      assertEquals(0, seqClassifierFlags0.maxDocSize);
      assertEquals(0.0, seqClassifierFlags0.annealingRate, 0.01);
      assertFalse(seqClassifierFlags0.useWordn);
      assertFalse(seqClassifierFlags0.numberEquivalenceDistSim);
      assertFalse(seqClassifierFlags0.useFeaturesCpC6gram);
      assertEquals(25, seqClassifierFlags0.QNsize);
      assertFalse(seqClassifierFlags0.useTaggySequences);
      assertFalse(seqClassifierFlags0.useNoisyLabel);
      assertFalse(seqClassifierFlags0.usePKPre1);
      assertFalse(seqClassifierFlags0.useNegHKDict4);
      assertFalse(seqClassifierFlags0.useNegHKDict3);
      assertFalse(seqClassifierFlags0.useNegHKDict2);
      assertEquals(0, seqClassifierFlags0.maxAdditionalKnownLCWords);
      assertEquals(1.0, seqClassifierFlags0.lambdaCH, 0.01);
      assertFalse(seqClassifierFlags0.useHybrid);
      assertTrue(seqClassifierFlags0.restrictLabels);
      assertFalse(seqClassifierFlags0.weightByEntropy);
      assertFalse(seqClassifierFlags0.augmentedDateChars);
      assertFalse(seqClassifierFlags0.testObjFunction);
      assertFalse(seqClassifierFlags0.printNR);
      assertFalse(seqClassifierFlags0.usePhraseWordTags);
      assertFalse(seqClassifierFlags0.usePrediction2);
      assertEquals(0, seqClassifierFlags0.hybridCutoffIteration);
      assertFalse(seqClassifierFlags0.strictlyZeroethOrder);
      assertEquals(0, seqClassifierFlags0.numTimesPruneFeatures);
      assertFalse(seqClassifierFlags0.groupByFeatureTemplate);
      assertFalse(seqClassifierFlags0.useLastRealWord);
      assertEquals(1000, seqClassifierFlags0.wordSegBeamSize);
      assertFalse(seqClassifierFlags0.useRandomSeed);
      assertFalse(seqClassifierFlags0.announceObjectBankEntries);
      assertFalse(seqClassifierFlags0.estimateInitial);
      assertFalse(seqClassifierFlags0.useNegASBCDict4);
      assertFalse(seqClassifierFlags0.transitionEdgeOnly);
      assertFalse(seqClassifierFlags0.useNumberFeature);
      assertFalse(seqClassifierFlags0.useNegASBCDict2);
      assertFalse(seqClassifierFlags0.useNegASBCDict3);
      assertFalse(seqClassifierFlags0.lowercaseNGrams);
      assertFalse(seqClassifierFlags0.memoryThrift);
      assertEquals(100, seqClassifierFlags0.numSamples);
      assertTrue(seqClassifierFlags0.applyNERPenalty);
      assertFalse(seqClassifierFlags0.addBiasToEmbedding);
      assertEquals(2, seqClassifierFlags0.maxLeft);
      assertFalse(seqClassifierFlags0.groupByInput);
      assertFalse(seqClassifierFlags0.printTrainLabels);
      assertFalse(seqClassifierFlags0.printWeights);
      assertFalse(seqClassifierFlags0.intern2);
      assertFalse(seqClassifierFlags0.combo);
      assertEquals(0.0, seqClassifierFlags0.priorLambda, 0.01);
      assertFalse(seqClassifierFlags0.useGoodForNamesCpC);
      assertFalse(seqClassifierFlags0.casedDistSim);
      assertEquals(1.0, seqClassifierFlags0.sigma, 0.01);
      assertTrue(seqClassifierFlags0.useDenero);
      assertTrue(seqClassifierFlags0.keepOBInMemory);
      assertEquals(0, seqClassifierFlags0.interimOutputFreq);
      assertFalse(seqClassifierFlags0.printXML);
      assertFalse(seqClassifierFlags0.useHKChar2);
      assertFalse(seqClassifierFlags0.useAdaDelta);
      assertFalse(seqClassifierFlags0.dontExtendTaggy);
      assertFalse(seqClassifierFlags0.regularizeSoftmaxTieParam);
      assertEquals(0.1, seqClassifierFlags0.initialGain, 0.01);
      assertFalse(seqClassifierFlags0.useABSTR);
      assertFalse(seqClassifierFlags0.useASBCSuf1);
      assertFalse(seqClassifierFlags0.strictlySecondOrder);
      assertFalse(seqClassifierFlags0.useDict2);
      assertFalse(seqClassifierFlags0.booleanFeatures);
      assertFalse(seqClassifierFlags0.useTopics);
      assertFalse(seqClassifierFlags0.useUnicodeType5gram);
      assertFalse(seqClassifierFlags0.useTOK);
      assertFalse(seqClassifierFlags0.retainEntitySubclassification);
      assertFalse(seqClassifierFlags0.saveFeatureIndexToDisk);
      assertFalse(seqClassifierFlags0.verboseForTrueCasing);
      assertFalse(seqClassifierFlags0.useABGENE);
      assertFalse(seqClassifierFlags0.terminateOnAvgImprovement);
      assertFalse(seqClassifierFlags0.strictlyThirdOrder);
      assertFalse(seqClassifierFlags0.useTypeSeqs2);
      assertFalse(seqClassifierFlags0.useTypeSeqs3);
      assertFalse(seqClassifierFlags0.splitOnHead);
      assertFalse(seqClassifierFlags0.useUnicodeType);
      assertEquals((-1), seqClassifierFlags0.numHiddenUnits);
      assertFalse(seqClassifierFlags0.useBigramInTwoClique);
      assertEquals(0.0, seqClassifierFlags0.removeTopNPercent, 0.01);
      assertFalse(seqClassifierFlags0.useSMD);
      assertFalse(seqClassifierFlags0.sighanPostProcessing);
      assertEquals(1, seqClassifierFlags0.nerSlowerTimes);
      assertFalse(seqClassifierFlags0.evaluateTrain);
      assertEquals(1.0, seqClassifierFlags0.unsupDropoutScale, 0.01);
      assertFalse(seqClassifierFlags0.ocrTrain);
      assertFalse(seqClassifierFlags0.useMoreAbbr);
      assertFalse(seqClassifierFlags0.useChunks);
      assertFalse(seqClassifierFlags0.useSymTags);
      assertEquals(8, seqClassifierFlags0.maxAllowedChromaticSize);
      assertEquals((-1), seqClassifierFlags0.QNPasses);
      assertFalse(seqClassifierFlags0.useNextSequences);
      assertFalse(seqClassifierFlags0.restrictTransitionsTimit);
      assertEquals(0.5, seqClassifierFlags0.alignmentDecodeThreshold, 0.01);
      assertTrue(seqClassifierFlags0.separateASCIIandRange);
      assertFalse(seqClassifierFlags0.secondOrderNonLinear);
      assertFalse(seqClassifierFlags0.use2W);
      assertFalse(seqClassifierFlags0.useEitherSideDisjunctive);
      assertFalse(seqClassifierFlags0.tieOutputLayer);
      assertFalse(seqClassifierFlags0.verboseMode);
      assertTrue(seqClassifierFlags0.includeC2EViterbi);
      assertFalse(seqClassifierFlags0.useDictPK2);
      assertFalse(seqClassifierFlags0.hardcodeSoftmaxOutputWeights);
      assertEquals(1, seqClassifierFlags0.kBest);
      assertFalse(seqClassifierFlags0.printFactorTable);
      assertTrue(seqClassifierFlags0.useMemoryEvaluator);
      assertFalse(seqClassifierFlags0.useVB);
      assertFalse(seqClassifierFlags0.useIfInteger);
      assertFalse(seqClassifierFlags0.useCommonWordsFeature);
      assertFalse(seqClassifierFlags0.useASBCPre1);
      assertEquals(0.0, seqClassifierFlags0.softmaxTieLambda, 0.01);
      assertTrue(seqClassifierFlags0.useHiddenLayer);
      assertFalse(seqClassifierFlags0.useBerkeleyAlignerForViterbi);
      assertFalse(seqClassifierFlags0.useTitle2);
      assertFalse(seqClassifierFlags0.useAdaGradFOBOS);
      assertFalse(seqClassifierFlags0.useMUCFeatures);
      assertFalse(seqClassifierFlags0.useNERPrior);
      assertFalse(seqClassifierFlags0.useABSTRFreq);
      assertFalse(seqClassifierFlags0.useMoreTags);
      assertEquals(1, seqClassifierFlags0.selfTrainWindowSize);
      assertFalse(seqClassifierFlags0.useBoundarySequences);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions3);
      assertEquals(0.95, seqClassifierFlags0.adaDeltaRho, 0.01);
      assertFalse(seqClassifierFlags0.useNGrams);
      assertFalse(seqClassifierFlags0.useSigmoid);
      assertFalse(seqClassifierFlags0.testHessSamples);
      assertFalse(seqClassifierFlags0.useLongSequences);
      assertFalse(seqClassifierFlags0.useTrainLexicon);
      assertFalse(seqClassifierFlags0.groupByHiddenUnit);
      assertFalse(seqClassifierFlags0.useNextRealWord);
      assertFalse(seqClassifierFlags0.useTypeSeqs);
      assertFalse(seqClassifierFlags0.geDebug);
      assertEquals(30, seqClassifierFlags0.beamSize);
      assertFalse(seqClassifierFlags0.use4Clique);
      assertEquals(1.0, seqClassifierFlags0.dropoutScale, 0.01);
      assertFalse(seqClassifierFlags0.useMinimalAbbr);
      assertFalse(seqClassifierFlags0.useUnicodeType4gram);
      assertEquals(0, seqClassifierFlags0.numOfFeatureSlices);
      assertFalse(seqClassifierFlags0.mergeTags);
      assertFalse(seqClassifierFlags0.useNPGovernor);
      assertFalse(seqClassifierFlags0.checkGradient);
      assertFalse(seqClassifierFlags0.useURLSequences);
      assertFalse(seqClassifierFlags0.useEntityRule);
      assertEquals(1, seqClassifierFlags0.numRuns);
      assertFalse(seqClassifierFlags0.useRule2);
      assertFalse(seqClassifierFlags0.useSGDtoQN);
      assertFalse(seqClassifierFlags0.useASBCChar2);
      assertFalse(seqClassifierFlags0.noEdgeFeature);
      assertFalse(seqClassifierFlags0.noMidNGrams);
      assertFalse(seqClassifierFlags0.normalize);
      assertFalse(seqClassifierFlags0.useSuf);
      assertFalse(seqClassifierFlags0.useUnicodeBlock);
      assertFalse(seqClassifierFlags0.useAcqPrior);
      assertEquals(4, seqClassifierFlags0.disjunctionWidth);
      assertFalse(seqClassifierFlags0.useOutDict2);
      assertFalse(seqClassifierFlags0.keepAllWhitespaces);
      assertFalse(seqClassifierFlags0.softmaxOutputLayer);
      assertEquals(0.1, seqClassifierFlags0.gainSGD, 0.01);
      assertFalse(seqClassifierFlags0.useGazettePhrases);
      assertEquals(10, seqClassifierFlags0.totalFeatureSlice);
      assertFalse(seqClassifierFlags0.testVariance);
      assertFalse(seqClassifierFlags0.usePrevNextLemmas);
      assertFalse(seqClassifierFlags0.useHKSuf1);
      assertEquals(0.0, seqClassifierFlags0.pctSegmenterScale, 0.01);
      assertFalse(seqClassifierFlags0.cacheNGrams);
      assertEquals((-1), seqClassifierFlags0.wordShape);
      assertEquals(1, seqClassifierFlags0.multiThreadPerceptron);
      assertFalse(seqClassifierFlags0.useChromaticSampling);
      assertFalse(seqClassifierFlags0.useFeaturesC4gram);
      assertFalse(seqClassifierFlags0.matchNERIncentive);
      assertFalse(seqClassifierFlags0.useUndirectedDisjunctive);
      assertFalse(seqClassifierFlags0.doGibbs);
      assertFalse(seqClassifierFlags0.factorInBiEdgePotential);
      assertFalse(seqClassifierFlags0.useStochasticQN);
      assertFalse(seqClassifierFlags0.outputIterationsToFile);
      assertFalse(seqClassifierFlags0.useDualDecomp);
      assertEquals(0.1, seqClassifierFlags0.initRate, 0.01);
      assertEquals(1, seqClassifierFlags0.CRForder);
      assertFalse(seqClassifierFlags0.useFloat);
      assertFalse(seqClassifierFlags0.useYear);
      assertFalse(seqClassifierFlags0.useTags);
      assertFalse(seqClassifierFlags0.useAbbr);
      assertFalse(seqClassifierFlags0.useBeginSent);
      assertFalse(seqClassifierFlags0.useSum);
      assertFalse(seqClassifierFlags0.expandMidDot);
      assertEquals(25, seqClassifierFlags0.QNsize2);
      assertFalse(seqClassifierFlags0.useQuartic);
      assertEquals(0.01, seqClassifierFlags0.epsilon, 0.01);
      assertFalse(seqClassifierFlags0.usePrevSequences);
      assertFalse(seqClassifierFlags0.useDictCTB2);
      assertFalse(seqClassifierFlags0.useShapeStrings4);
      assertFalse(seqClassifierFlags0.usePKChar2);
      assertFalse(seqClassifierFlags0.useShapeStrings5);
      assertEquals(1, seqClassifierFlags0.numFolds);
      assertFalse(seqClassifierFlags0.useShapeStrings3);
      assertFalse(seqClassifierFlags0.useDisjunctive);
      assertFalse(seqClassifierFlags0.useShapeStrings1);
      assertFalse(seqClassifierFlags0.subCWGaz);
      assertTrue(seqClassifierFlags0.learnCHBasedOnEN);
      assertFalse(seqClassifierFlags0.useRad2b);
      assertEquals(0, seqClassifierFlags0.multiThreadGibbs);
      assertEquals(15, seqClassifierFlags0.stochasticBatchSize);
      assertFalse(seqClassifierFlags0.doAdaptation);
      assertFalse(seqClassifierFlags0.removeBackgroundSingletonFeatures);
      assertFalse(seqClassifierFlags0.useLemmas);
      assertFalse(seqClassifierFlags0.blockInitialize);
      assertFalse(seqClassifierFlags0.includeFullCRFInLOP);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSize, 0.01);
      assertFalse(seqClassifierFlags0.useOrdinal);
      assertFalse(seqClassifierFlags0.useMinimalAbbr1);
      assertFalse(seqClassifierFlags0.useBagOfWords);
      assertFalse(seqClassifierFlags0.showNCCInfo);
      assertFalse(seqClassifierFlags0.useOWLQN);
      assertFalse(seqClassifierFlags0.useWordPairs);
      assertFalse(seqClassifierFlags0.useMoreGazFeatures);
      assertFalse(seqClassifierFlags0.dualDecompDebug);
      assertFalse(seqClassifierFlags0.doFeatureDiscovery);
      assertFalse(seqClassifierFlags0.normalizeTimex);
      assertFalse(seqClassifierFlags0.usePre);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions2);
      assertFalse(seqClassifierFlags0.nonLinearCRF);
      assertFalse(seqClassifierFlags0.useSegmentation);
      assertFalse(seqClassifierFlags0.useEitherSideWord);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions3);
      assertEquals(100, seqClassifierFlags0.printClassifierParam);
      assertFalse(seqClassifierFlags0.useRadical);
      assertFalse(seqClassifierFlags0.dump);
      assertTrue(seqClassifierFlags0.initWithPosterior);
      assertTrue(seqClassifierFlags0.splitDocuments);
      assertFalse(seqClassifierFlags0.useHeadGov);
      assertFalse(seqClassifierFlags0.useFeaturesC6gram);
      assertFalse(seqClassifierFlags0.factorInAlignmentProb);
      assertEquals(0.0, seqClassifierFlags0.l1reg, 0.01);
      assertFalse(seqClassifierFlags0.useAbbr1);
      assertEquals((-1), seqClassifierFlags0.maxNGramLeng);
      assertFalse(seqClassifierFlags0.useEntityTypes);
      assertFalse(seqClassifierFlags0.useSentenceNumber);
      assertFalse(seqClassifierFlags0.useWordnetFeatures);
      assertEquals(3, seqClassifierFlags0.charHalfWindow);
      assertFalse(seqClassifierFlags0.dehyphenateNGrams);
      assertEquals((-1), seqClassifierFlags0.maxIterations);
      assertFalse(seqClassifierFlags0.useWEBFreqDict);
      assertEquals(0.0, seqClassifierFlags0.dropoutRate, 0.01);
      assertFalse(seqClassifierFlags0.useShapeConjunctions);
      assertFalse(seqClassifierFlags0.useCRFforUnsup);
      assertFalse(seqClassifierFlags0.useTaggySequencesShapeInteraction);
      assertFalse(seqClassifierFlags0.useGazettes);
      assertFalse(seqClassifierFlags0.lowerNewgeneThreshold);
      assertEquals(1, seqClassifierFlags0.endFold);
      assertFalse(seqClassifierFlags0.usePrediction);
      assertFalse(seqClassifierFlags0.usePhraseFeatures);
      assertEquals(0, seqClassifierFlags0.featureCountThreshold);
      assertFalse(seqClassifierFlags0.useEntityTypeSequences);
      assertFalse(seqClassifierFlags0.useRule);
      assertEquals((-1), seqClassifierFlags0.labelDictionaryCutoff);
      assertEquals(10, seqClassifierFlags0.totalDataSlice);
      assertFalse(seqClassifierFlags0.useExtraTaggySequences);
      assertTrue(seqClassifierFlags0.useQN);
      assertFalse(seqClassifierFlags0.usePhraseWordSpecialTags);
      assertEquals(1.0, seqClassifierFlags0.alignDDAlpha, 0.01);
      assertFalse(seqClassifierFlags0.dampDDStepSizeWithAlignmentProb);
      assertFalse(seqClassifierFlags0.pctSegmenterScaleByCRF);
      assertFalse(seqClassifierFlags0.powerAlignProbAsAddition);
      assertEquals(10, seqClassifierFlags0.wideDisjunctionWidth);
      assertTrue(seqClassifierFlags0.useOutputLayer);
      assertFalse(seqClassifierFlags0.useDictleng);
      assertFalse(seqClassifierFlags0.useSUTime);
      assertFalse(seqClassifierFlags0.dropoutApprox);
      assertFalse(seqClassifierFlags0.useDisjunctiveShapeInteraction);
      assertTrue(seqClassifierFlags0.useExternal);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions2);
      assertFalse(seqClassifierFlags0.alternateTraining);
      assertFalse(seqClassifierFlags0.greekifyNGrams);
      assertEquals(1.0E-4, seqClassifierFlags0.tolerance, 0.01);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions3);
      assertFalse(seqClassifierFlags0.useParenMatching);
      assertFalse(seqClassifierFlags0.intern);
      assertFalse(seqClassifierFlags0.printProbs);
      assertEquals((-1), seqClassifierFlags0.arbitraryInputLayerSize);
      assertFalse(seqClassifierFlags0.useKBest);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSizeAlignment, 0.01);
      assertFalse(seqClassifierFlags0.useNext);
      assertEquals(1, seqClassifierFlags0.numDatasetsPerFile);
      assertFalse(seqClassifierFlags0.dualDecompNotBIO);
      assertFalse(seqClassifierFlags0.bioSubmitOutput);
      assertFalse(seqClassifierFlags0.useChunkySequences);
      assertFalse(seqClassifierFlags0.evaluateBackground);
      assertFalse(seqClassifierFlags0.useNoisyNonNoisyFeature);
      assertFalse(seqClassifierFlags0.useReverseAffix);
      assertFalse(seqClassifierFlags0.useYetMoreCpCShapes);
      assertFalse(seqClassifierFlags0.useMoreNeighborNGrams);
      assertFalse(seqClassifierFlags0.useHk);
      assertTrue(seqClassifierFlags0.useKnownLCWords);
      assertTrue(seqClassifierFlags0.useInternal);
      assertFalse(seqClassifierFlags0.useSemPrior);
      assertFalse(seqClassifierFlags0.useANTE);
      assertFalse(seqClassifierFlags0.usePKSuf1);
      assertFalse(seqClassifierFlags0.useTypeySequences);
      assertFalse(seqClassifierFlags0.usePhraseWords);
      assertFalse(seqClassifierFlags0.useMSRChar2);
      assertTrue(seqClassifierFlags0.useSequences);
      assertFalse(seqClassifierFlags0.randomLopFeatureSplit);
      assertFalse(seqClassifierFlags0.readStdin);
      assertFalse(seqClassifierFlags0.useRobustQN);
      assertFalse(seqClassifierFlags0.useIsDateRange);
      assertEquals(0, seqClassifierFlags0.maxRight);
      assertFalse(seqClassifierFlags0.useWEB);
      assertEquals((-1), seqClassifierFlags0.purgeFeatures);
      assertFalse(seqClassifierFlags0.printFirstOrderProbs);
      assertFalse(seqClassifierFlags0.makeConsistent);
      assertFalse(seqClassifierFlags0.useBig5);
      assertFalse(seqClassifierFlags0.initWithNERPosterior);
      assertFalse(seqClassifierFlags0.removeStrictGoodCoNLLDuplicates);
      assertFalse(seqClassifierFlags0.dualDecompAlignment);
      assertFalse(seqClassifierFlags0.useFeaturesCpC5gram);
      assertFalse(seqClassifierFlags0.suppressTestDebug);
      assertFalse(seqClassifierFlags0.useOccurrencePatterns);
      assertFalse(seqClassifierFlags0.sloppyGazette);
      assertFalse(seqClassifierFlags0.useGazFeatures);
      assertFalse(seqClassifierFlags0.useNextVB);
      assertFalse(seqClassifierFlags0.useMidDotShape);
      assertEquals(Integer.MAX_VALUE, seqClassifierFlags0.printFeaturesUpto);
      assertEquals(1, seqClassifierFlags0.featureThreshold);
      assertEquals(0.0, seqClassifierFlags0.featureDiffThresh, 0.01);
      assertFalse(seqClassifierFlags0.useNERPriorBIO);
      assertFalse(seqClassifierFlags0.useGENIA);
      assertFalse(seqClassifierFlags0.useNegPKDict3);
      assertFalse(seqClassifierFlags0.useNegPKDict2);
      assertFalse(seqClassifierFlags0.deleteBlankLines);
      assertFalse(seqClassifierFlags0.useNegPKDict4);
      assertFalse(seqClassifierFlags0.sparseOutputLayer);
      assertEquals(1.0, seqClassifierFlags0.lambdaEN, 0.01);
      assertEquals(0, seqClassifierFlags0.featureCountThresh);
      assertFalse(seqClassifierFlags0.useDictHK2);
      assertFalse(seqClassifierFlags0.useObservedFeaturesOnly);
      assertFalse(seqClassifierFlags0.useGenericFeatures);
      assertFalse(seqClassifierFlags0.iobWrapper);
      assertEquals(0, seqClassifierFlags0.nerSkipFirstK);
      assertEquals(1.0, seqClassifierFlags0.adaptSigma, 0.01);
      assertFalse(seqClassifierFlags0.useClassFeature);
      assertEquals(0, seqClassifierFlags0.startEvaluateIters);
      assertFalse(seqClassifierFlags0.useMsr);
      assertFalse(seqClassifierFlags0.useHKPre1);
      assertFalse(seqClassifierFlags0.useAs);
      assertEquals(Double.POSITIVE_INFINITY, seqClassifierFlags0.searchGraphPrune, 0.01);
      assertFalse(seqClassifierFlags0.useUnknown);
      assertFalse(seqClassifierFlags0.useBerkeleyCompetitivePosterior);
      assertFalse(seqClassifierFlags0.useObservedSequencesOnly);
      assertFalse(seqClassifierFlags0.doFE);
      assertEquals(0.0, seqClassifierFlags0.newgeneThreshold, 0.01);
      assertEquals(0, seqClassifierFlags0.dualDecompMaxItr);
      assertFalse(seqClassifierFlags0.strictlyFirstOrder);
      assertFalse(seqClassifierFlags0.useFeaturesC5gram);
      assertEquals((-1), seqClassifierFlags0.tuneSampleSize);
      assertFalse(seqClassifierFlags0.purgeDatasets);
      assertTrue(seqClassifierFlags0.biAlignmentPriorIsPMI);
      assertFalse(seqClassifierFlags0.useDictASBC2);
      assertFalse(seqClassifierFlags0.addCapitalFeatures);
      assertEquals(1.0, seqClassifierFlags0.randomizedRatio, 0.01);
      assertFalse(seqClassifierFlags0.useInPlaceSGD);
      assertFalse(seqClassifierFlags0.useDistSim);
      assertEquals(1, seqClassifierFlags0.terminateOnEvalImprovementNumOfEpoch);
      assertFalse(seqClassifierFlags0.useEmbedding);
      assertEquals(1, seqClassifierFlags0.bisequencePriorType);
      assertFalse(seqClassifierFlags0.gradientDebug);
      assertFalse(seqClassifierFlags0.selfTest);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesBigram);
      assertEquals(2, seqClassifierFlags0.CRFwindow);
      assertEquals(1, seqClassifierFlags0.multiThreadGrad);
      assertFalse(seqClassifierFlags0.useNPHead);
      assertFalse(seqClassifierFlags0.useAltGazFeatures);
      assertFalse(seqClassifierFlags0.showCCInfo);
      assertEquals(50, seqClassifierFlags0.SGD2QNhessSamples);
      assertFalse(seqClassifierFlags0.useHuber);
      assertEquals(0.001, seqClassifierFlags0.adaGradEps, 0.01);
      assertFalse(seqClassifierFlags0.timitDatum);
      assertFalse(seqClassifierFlags0.useFeaturesCpC4gram);
      assertFalse(seqClassifierFlags0.useWordTag);
      assertFalse(seqClassifierFlags0.useLemmaAsWord);
      
      CoreAnnotations.TokensAnnotation coreAnnotations_TokensAnnotation0 = new CoreAnnotations.TokensAnnotation();
      assertNotNull(coreAnnotations_TokensAnnotation0);
      
      Class<List<CoreLabel>> class0 = coreAnnotations_TokensAnnotation0.getType();
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isInterface());
      assertEquals("interface java.util.List", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(1537, class0.getModifiers());
      assertFalse(class0.isPrimitive());
      assertNotNull(class0);
      
      Class<List<CoreLabel>> class1 = coreAnnotations_TokensAnnotation0.getType();
      assertTrue(class1.isInterface());
      assertEquals("interface java.util.List", class1.toString());
      assertEquals(1537, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      assertSame(class1, class0);
      
      Class<List<CoreLabel>> class2 = coreAnnotations_TokensAnnotation0.getType();
      assertEquals(1537, class2.getModifiers());
      assertEquals("interface java.util.List", class2.toString());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isInterface());
      assertNotNull(class2);
      assertSame(class2, class1);
      assertSame(class2, class0);
      
      TaggedWord taggedWord0 = new TaggedWord("");
      assertNull(taggedWord0.tag());
      assertEquals("", taggedWord0.value());
      assertEquals((-1), taggedWord0.endPosition());
      assertEquals("", taggedWord0.word());
      assertEquals((-1), taggedWord0.beginPosition());
      assertNotNull(taggedWord0);
      
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = properties0.computeIfPresent(taggedWord0, biFunction0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNull(taggedWord0.tag());
      assertEquals("", taggedWord0.value());
      assertEquals((-1), taggedWord0.endPosition());
      assertEquals("", taggedWord0.word());
      assertEquals((-1), taggedWord0.beginPosition());
      assertNull(object0);
      assertTrue(properties0.equals((Object)properties1));
      assertNotSame(properties0, properties1);
      
      Object object1 = properties0.put(wordTag0, coreAnnotations_TokensAnnotation0);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertEquals("", seqClassifierFlags0.toString());
      assertEquals(0, coreLabel0.size());
      assertNull(wordTag0.tag());
      assertNull(wordTag0.word());
      assertNull(wordTag0.value());
      assertNull(object1);
      assertFalse(properties0.equals((Object)properties1));
      assertFalse(properties1.equals((Object)properties0));
      assertNotSame(properties0, properties1);
      assertNotSame(properties1, properties0);
      assertFalse(seqClassifierFlags0.useScaledSGD);
      assertFalse(seqClassifierFlags0.useDisjShape);
      assertFalse(seqClassifierFlags0.useCTBSuf1);
      assertEquals(1, seqClassifierFlags0.numLopExpert);
      assertFalse(seqClassifierFlags0.useLabelSource);
      assertFalse(seqClassifierFlags0.useShapeStrings);
      assertEquals(0, seqClassifierFlags0.multiThreadClassifier);
      assertFalse(seqClassifierFlags0.printLabelValue);
      assertFalse(seqClassifierFlags0.useOnlySeenWeights);
      assertFalse(seqClassifierFlags0.useCorefFeatures);
      assertFalse(seqClassifierFlags0.noNeighborConstraints);
      assertFalse(seqClassifierFlags0.backpropLopTraining);
      assertFalse(seqClassifierFlags0.terminateOnEvalImprovement);
      assertFalse(seqClassifierFlags0.suppressMidDotPostprocessing);
      assertFalse(seqClassifierFlags0.checkNameList);
      assertEquals(0, seqClassifierFlags0.maxQNItr);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesAll);
      assertFalse(seqClassifierFlags0.keepEnglishWhitespaces);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions);
      assertFalse(seqClassifierFlags0.perceptronDebug);
      assertFalse(seqClassifierFlags0.justify);
      assertFalse(seqClassifierFlags0.splitSlashHyphenWords);
      assertEquals(1, seqClassifierFlags0.selfTrainIterations);
      assertFalse(seqClassifierFlags0.baseline);
      assertFalse(seqClassifierFlags0.useCTBChar2);
      assertFalse(seqClassifierFlags0.iobTags);
      assertTrue(seqClassifierFlags0.useCWSFeatures);
      assertFalse(seqClassifierFlags0.usePk);
      assertFalse(seqClassifierFlags0.useABSTRFreqDict);
      assertFalse(seqClassifierFlags0.useFREQ);
      assertEquals(0.0, seqClassifierFlags0.featureWeightThreshold, 0.01);
      assertEquals(0, seqClassifierFlags0.evaluateIters);
      assertTrue(seqClassifierFlags0.useViterbi);
      assertFalse(seqClassifierFlags0.usePrevVB);
      assertFalse(seqClassifierFlags0.lazyUpdate);
      assertFalse(seqClassifierFlags0.skipOutputRegularization);
      assertFalse(seqClassifierFlags0.learnENBasedOnCH);
      assertEquals(1, seqClassifierFlags0.numTimesRemoveTopN);
      assertFalse(seqClassifierFlags0.strictGoodCoNLL);
      assertFalse(seqClassifierFlags0.powerAlignProb);
      assertFalse(seqClassifierFlags0.useWordShapeGaz);
      assertTrue(seqClassifierFlags0.initViterbi);
      assertFalse(seqClassifierFlags0.largeChSegFile);
      assertFalse(seqClassifierFlags0.useNeighborNGrams);
      assertFalse(seqClassifierFlags0.usePosition);
      assertTrue(seqClassifierFlags0.averagePerceptron);
      assertEquals(0.0, seqClassifierFlags0.priorAlpha, 0.01);
      assertFalse(seqClassifierFlags0.keepEmptySentences);
      assertFalse(seqClassifierFlags0.usePrev);
      assertEquals(1, seqClassifierFlags0.startFold);
      assertFalse(seqClassifierFlags0.useNegDict2);
      assertFalse(seqClassifierFlags0.useFirstWord);
      assertFalse(seqClassifierFlags0.useIsURL);
      assertFalse(seqClassifierFlags0.useAdaDiff);
      assertFalse(seqClassifierFlags0.useWord1);
      assertFalse(seqClassifierFlags0.useWord2);
      assertFalse(seqClassifierFlags0.useWord3);
      assertEquals(8, seqClassifierFlags0.distSimMaxBits);
      assertFalse(seqClassifierFlags0.useWord4);
      assertFalse(seqClassifierFlags0.useWideDisjunctive);
      assertFalse(seqClassifierFlags0.useCTBPre1);
      assertFalse(seqClassifierFlags0.useNegDict4);
      assertFalse(seqClassifierFlags0.useProtoFeatures);
      assertFalse(seqClassifierFlags0.useNegDict3);
      assertEquals(0.9, seqClassifierFlags0.selfTrainConfidenceThreshold, 0.01);
      assertFalse(seqClassifierFlags0.useUniformPrior);
      assertFalse(seqClassifierFlags0.useLC);
      assertFalse(seqClassifierFlags0.groupByOutputClass);
      assertEquals(0.0, seqClassifierFlags0.alignmentPruneThreshold, 0.01);
      assertFalse(seqClassifierFlags0.useFilter);
      assertFalse(seqClassifierFlags0.useKL);
      assertEquals(0, seqClassifierFlags0.removeTopN);
      assertFalse(seqClassifierFlags0.conjoinShapeNGrams);
      assertFalse(seqClassifierFlags0.cleanGazette);
      assertFalse(seqClassifierFlags0.prependEmbedding);
      assertEquals(0, seqClassifierFlags0.numOfSlices);
      assertFalse(seqClassifierFlags0.useCWSWordFeatures);
      assertFalse(seqClassifierFlags0.applyNumericClassifiers);
      assertFalse(seqClassifierFlags0.useACR);
      assertFalse(seqClassifierFlags0.useSGD);
      assertEquals((-1), seqClassifierFlags0.samplingSpeedUpThreshold);
      assertFalse(seqClassifierFlags0.useBilingualNERPrior);
      assertFalse(seqClassifierFlags0.pctSegmenterLenAdjust);
      assertFalse(seqClassifierFlags0.useReverse);
      assertFalse(seqClassifierFlags0.useHardGE);
      assertFalse(seqClassifierFlags0.tuneSGD);
      assertFalse(seqClassifierFlags0.useTitle);
      assertTrue(seqClassifierFlags0.useWord);
      assertFalse(seqClassifierFlags0.useSequentialScanSampling);
      assertFalse(seqClassifierFlags0.randomLopWeights);
      assertEquals(1, seqClassifierFlags0.numStartLayers);
      assertEquals((-1), seqClassifierFlags0.SGDPasses);
      assertFalse(seqClassifierFlags0.useNB);
      assertEquals(0, seqClassifierFlags0.ocrFold);
      assertFalse(seqClassifierFlags0.useRad1);
      assertFalse(seqClassifierFlags0.fakeDataset);
      assertFalse(seqClassifierFlags0.useSeenFeaturesOnly);
      assertFalse(seqClassifierFlags0.useChPos);
      assertFalse(seqClassifierFlags0.useSymWordPairs);
      assertFalse(seqClassifierFlags0.appendLC);
      assertFalse(seqClassifierFlags0.useGEforSup);
      assertFalse(seqClassifierFlags0.useNegCTBDict4);
      assertFalse(seqClassifierFlags0.useNegCTBDict3);
      assertFalse(seqClassifierFlags0.useNegCTBDict2);
      assertEquals(0, seqClassifierFlags0.scaledSGDMethod);
      assertFalse(seqClassifierFlags0.useRad2);
      assertFalse(seqClassifierFlags0.twoStage);
      assertFalse(seqClassifierFlags0.normalizeTerms);
      assertEquals(0, seqClassifierFlags0.maxDocSize);
      assertEquals(0.0, seqClassifierFlags0.annealingRate, 0.01);
      assertFalse(seqClassifierFlags0.useWordn);
      assertFalse(seqClassifierFlags0.numberEquivalenceDistSim);
      assertFalse(seqClassifierFlags0.useFeaturesCpC6gram);
      assertEquals(25, seqClassifierFlags0.QNsize);
      assertFalse(seqClassifierFlags0.useTaggySequences);
      assertFalse(seqClassifierFlags0.useNoisyLabel);
      assertFalse(seqClassifierFlags0.usePKPre1);
      assertFalse(seqClassifierFlags0.useNegHKDict4);
      assertFalse(seqClassifierFlags0.useNegHKDict3);
      assertFalse(seqClassifierFlags0.useNegHKDict2);
      assertEquals(0, seqClassifierFlags0.maxAdditionalKnownLCWords);
      assertEquals(1.0, seqClassifierFlags0.lambdaCH, 0.01);
      assertFalse(seqClassifierFlags0.useHybrid);
      assertTrue(seqClassifierFlags0.restrictLabels);
      assertFalse(seqClassifierFlags0.weightByEntropy);
      assertFalse(seqClassifierFlags0.augmentedDateChars);
      assertFalse(seqClassifierFlags0.testObjFunction);
      assertFalse(seqClassifierFlags0.printNR);
      assertFalse(seqClassifierFlags0.usePhraseWordTags);
      assertFalse(seqClassifierFlags0.usePrediction2);
      assertEquals(0, seqClassifierFlags0.hybridCutoffIteration);
      assertFalse(seqClassifierFlags0.strictlyZeroethOrder);
      assertEquals(0, seqClassifierFlags0.numTimesPruneFeatures);
      assertFalse(seqClassifierFlags0.groupByFeatureTemplate);
      assertFalse(seqClassifierFlags0.useLastRealWord);
      assertEquals(1000, seqClassifierFlags0.wordSegBeamSize);
      assertFalse(seqClassifierFlags0.useRandomSeed);
      assertFalse(seqClassifierFlags0.announceObjectBankEntries);
      assertFalse(seqClassifierFlags0.estimateInitial);
      assertFalse(seqClassifierFlags0.useNegASBCDict4);
      assertFalse(seqClassifierFlags0.transitionEdgeOnly);
      assertFalse(seqClassifierFlags0.useNumberFeature);
      assertFalse(seqClassifierFlags0.useNegASBCDict2);
      assertFalse(seqClassifierFlags0.useNegASBCDict3);
      assertFalse(seqClassifierFlags0.lowercaseNGrams);
      assertFalse(seqClassifierFlags0.memoryThrift);
      assertEquals(100, seqClassifierFlags0.numSamples);
      assertTrue(seqClassifierFlags0.applyNERPenalty);
      assertFalse(seqClassifierFlags0.addBiasToEmbedding);
      assertEquals(2, seqClassifierFlags0.maxLeft);
      assertFalse(seqClassifierFlags0.groupByInput);
      assertFalse(seqClassifierFlags0.printTrainLabels);
      assertFalse(seqClassifierFlags0.printWeights);
      assertFalse(seqClassifierFlags0.intern2);
      assertFalse(seqClassifierFlags0.combo);
      assertEquals(0.0, seqClassifierFlags0.priorLambda, 0.01);
      assertFalse(seqClassifierFlags0.useGoodForNamesCpC);
      assertFalse(seqClassifierFlags0.casedDistSim);
      assertEquals(1.0, seqClassifierFlags0.sigma, 0.01);
      assertTrue(seqClassifierFlags0.useDenero);
      assertTrue(seqClassifierFlags0.keepOBInMemory);
      assertEquals(0, seqClassifierFlags0.interimOutputFreq);
      assertFalse(seqClassifierFlags0.printXML);
      assertFalse(seqClassifierFlags0.useHKChar2);
      assertFalse(seqClassifierFlags0.useAdaDelta);
      assertFalse(seqClassifierFlags0.dontExtendTaggy);
      assertFalse(seqClassifierFlags0.regularizeSoftmaxTieParam);
      assertEquals(0.1, seqClassifierFlags0.initialGain, 0.01);
      assertFalse(seqClassifierFlags0.useABSTR);
      assertFalse(seqClassifierFlags0.useASBCSuf1);
      assertFalse(seqClassifierFlags0.strictlySecondOrder);
      assertFalse(seqClassifierFlags0.useDict2);
      assertFalse(seqClassifierFlags0.booleanFeatures);
      assertFalse(seqClassifierFlags0.useTopics);
      assertFalse(seqClassifierFlags0.useUnicodeType5gram);
      assertFalse(seqClassifierFlags0.useTOK);
      assertFalse(seqClassifierFlags0.retainEntitySubclassification);
      assertFalse(seqClassifierFlags0.saveFeatureIndexToDisk);
      assertFalse(seqClassifierFlags0.verboseForTrueCasing);
      assertFalse(seqClassifierFlags0.useABGENE);
      assertFalse(seqClassifierFlags0.terminateOnAvgImprovement);
      assertFalse(seqClassifierFlags0.strictlyThirdOrder);
      assertFalse(seqClassifierFlags0.useTypeSeqs2);
      assertFalse(seqClassifierFlags0.useTypeSeqs3);
      assertFalse(seqClassifierFlags0.splitOnHead);
      assertFalse(seqClassifierFlags0.useUnicodeType);
      assertEquals((-1), seqClassifierFlags0.numHiddenUnits);
      assertFalse(seqClassifierFlags0.useBigramInTwoClique);
      assertEquals(0.0, seqClassifierFlags0.removeTopNPercent, 0.01);
      assertFalse(seqClassifierFlags0.useSMD);
      assertFalse(seqClassifierFlags0.sighanPostProcessing);
      assertEquals(1, seqClassifierFlags0.nerSlowerTimes);
      assertFalse(seqClassifierFlags0.evaluateTrain);
      assertEquals(1.0, seqClassifierFlags0.unsupDropoutScale, 0.01);
      assertFalse(seqClassifierFlags0.ocrTrain);
      assertFalse(seqClassifierFlags0.useMoreAbbr);
      assertFalse(seqClassifierFlags0.useChunks);
      assertFalse(seqClassifierFlags0.useSymTags);
      assertEquals(8, seqClassifierFlags0.maxAllowedChromaticSize);
      assertEquals((-1), seqClassifierFlags0.QNPasses);
      assertFalse(seqClassifierFlags0.useNextSequences);
      assertFalse(seqClassifierFlags0.restrictTransitionsTimit);
      assertEquals(0.5, seqClassifierFlags0.alignmentDecodeThreshold, 0.01);
      assertTrue(seqClassifierFlags0.separateASCIIandRange);
      assertFalse(seqClassifierFlags0.secondOrderNonLinear);
      assertFalse(seqClassifierFlags0.use2W);
      assertFalse(seqClassifierFlags0.useEitherSideDisjunctive);
      assertFalse(seqClassifierFlags0.tieOutputLayer);
      assertFalse(seqClassifierFlags0.verboseMode);
      assertTrue(seqClassifierFlags0.includeC2EViterbi);
      assertFalse(seqClassifierFlags0.useDictPK2);
      assertFalse(seqClassifierFlags0.hardcodeSoftmaxOutputWeights);
      assertEquals(1, seqClassifierFlags0.kBest);
      assertFalse(seqClassifierFlags0.printFactorTable);
      assertTrue(seqClassifierFlags0.useMemoryEvaluator);
      assertFalse(seqClassifierFlags0.useVB);
      assertFalse(seqClassifierFlags0.useIfInteger);
      assertFalse(seqClassifierFlags0.useCommonWordsFeature);
      assertFalse(seqClassifierFlags0.useASBCPre1);
      assertEquals(0.0, seqClassifierFlags0.softmaxTieLambda, 0.01);
      assertTrue(seqClassifierFlags0.useHiddenLayer);
      assertFalse(seqClassifierFlags0.useBerkeleyAlignerForViterbi);
      assertFalse(seqClassifierFlags0.useTitle2);
      assertFalse(seqClassifierFlags0.useAdaGradFOBOS);
      assertFalse(seqClassifierFlags0.useMUCFeatures);
      assertFalse(seqClassifierFlags0.useNERPrior);
      assertFalse(seqClassifierFlags0.useABSTRFreq);
      assertFalse(seqClassifierFlags0.useMoreTags);
      assertEquals(1, seqClassifierFlags0.selfTrainWindowSize);
      assertFalse(seqClassifierFlags0.useBoundarySequences);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions3);
      assertEquals(0.95, seqClassifierFlags0.adaDeltaRho, 0.01);
      assertFalse(seqClassifierFlags0.useNGrams);
      assertFalse(seqClassifierFlags0.useSigmoid);
      assertFalse(seqClassifierFlags0.testHessSamples);
      assertFalse(seqClassifierFlags0.useLongSequences);
      assertFalse(seqClassifierFlags0.useTrainLexicon);
      assertFalse(seqClassifierFlags0.groupByHiddenUnit);
      assertFalse(seqClassifierFlags0.useNextRealWord);
      assertFalse(seqClassifierFlags0.useTypeSeqs);
      assertFalse(seqClassifierFlags0.geDebug);
      assertEquals(30, seqClassifierFlags0.beamSize);
      assertFalse(seqClassifierFlags0.use4Clique);
      assertEquals(1.0, seqClassifierFlags0.dropoutScale, 0.01);
      assertFalse(seqClassifierFlags0.useMinimalAbbr);
      assertFalse(seqClassifierFlags0.useUnicodeType4gram);
      assertEquals(0, seqClassifierFlags0.numOfFeatureSlices);
      assertFalse(seqClassifierFlags0.mergeTags);
      assertFalse(seqClassifierFlags0.useNPGovernor);
      assertFalse(seqClassifierFlags0.checkGradient);
      assertFalse(seqClassifierFlags0.useURLSequences);
      assertFalse(seqClassifierFlags0.useEntityRule);
      assertEquals(1, seqClassifierFlags0.numRuns);
      assertFalse(seqClassifierFlags0.useRule2);
      assertFalse(seqClassifierFlags0.useSGDtoQN);
      assertFalse(seqClassifierFlags0.useASBCChar2);
      assertFalse(seqClassifierFlags0.noEdgeFeature);
      assertFalse(seqClassifierFlags0.noMidNGrams);
      assertFalse(seqClassifierFlags0.normalize);
      assertFalse(seqClassifierFlags0.useSuf);
      assertFalse(seqClassifierFlags0.useUnicodeBlock);
      assertFalse(seqClassifierFlags0.useAcqPrior);
      assertEquals(4, seqClassifierFlags0.disjunctionWidth);
      assertFalse(seqClassifierFlags0.useOutDict2);
      assertFalse(seqClassifierFlags0.keepAllWhitespaces);
      assertFalse(seqClassifierFlags0.softmaxOutputLayer);
      assertEquals(0.1, seqClassifierFlags0.gainSGD, 0.01);
      assertFalse(seqClassifierFlags0.useGazettePhrases);
      assertEquals(10, seqClassifierFlags0.totalFeatureSlice);
      assertFalse(seqClassifierFlags0.testVariance);
      assertFalse(seqClassifierFlags0.usePrevNextLemmas);
      assertFalse(seqClassifierFlags0.useHKSuf1);
      assertEquals(0.0, seqClassifierFlags0.pctSegmenterScale, 0.01);
      assertFalse(seqClassifierFlags0.cacheNGrams);
      assertEquals((-1), seqClassifierFlags0.wordShape);
      assertEquals(1, seqClassifierFlags0.multiThreadPerceptron);
      assertFalse(seqClassifierFlags0.useChromaticSampling);
      assertFalse(seqClassifierFlags0.useFeaturesC4gram);
      assertFalse(seqClassifierFlags0.matchNERIncentive);
      assertFalse(seqClassifierFlags0.useUndirectedDisjunctive);
      assertFalse(seqClassifierFlags0.doGibbs);
      assertFalse(seqClassifierFlags0.factorInBiEdgePotential);
      assertFalse(seqClassifierFlags0.useStochasticQN);
      assertFalse(seqClassifierFlags0.outputIterationsToFile);
      assertFalse(seqClassifierFlags0.useDualDecomp);
      assertEquals(0.1, seqClassifierFlags0.initRate, 0.01);
      assertEquals(1, seqClassifierFlags0.CRForder);
      assertFalse(seqClassifierFlags0.useFloat);
      assertFalse(seqClassifierFlags0.useYear);
      assertFalse(seqClassifierFlags0.useTags);
      assertFalse(seqClassifierFlags0.useAbbr);
      assertFalse(seqClassifierFlags0.useBeginSent);
      assertFalse(seqClassifierFlags0.useSum);
      assertFalse(seqClassifierFlags0.expandMidDot);
      assertEquals(25, seqClassifierFlags0.QNsize2);
      assertFalse(seqClassifierFlags0.useQuartic);
      assertEquals(0.01, seqClassifierFlags0.epsilon, 0.01);
      assertFalse(seqClassifierFlags0.usePrevSequences);
      assertFalse(seqClassifierFlags0.useDictCTB2);
      assertFalse(seqClassifierFlags0.useShapeStrings4);
      assertFalse(seqClassifierFlags0.usePKChar2);
      assertFalse(seqClassifierFlags0.useShapeStrings5);
      assertEquals(1, seqClassifierFlags0.numFolds);
      assertFalse(seqClassifierFlags0.useShapeStrings3);
      assertFalse(seqClassifierFlags0.useDisjunctive);
      assertFalse(seqClassifierFlags0.useShapeStrings1);
      assertFalse(seqClassifierFlags0.subCWGaz);
      assertTrue(seqClassifierFlags0.learnCHBasedOnEN);
      assertFalse(seqClassifierFlags0.useRad2b);
      assertEquals(0, seqClassifierFlags0.multiThreadGibbs);
      assertEquals(15, seqClassifierFlags0.stochasticBatchSize);
      assertFalse(seqClassifierFlags0.doAdaptation);
      assertFalse(seqClassifierFlags0.removeBackgroundSingletonFeatures);
      assertFalse(seqClassifierFlags0.useLemmas);
      assertFalse(seqClassifierFlags0.blockInitialize);
      assertFalse(seqClassifierFlags0.includeFullCRFInLOP);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSize, 0.01);
      assertFalse(seqClassifierFlags0.useOrdinal);
      assertFalse(seqClassifierFlags0.useMinimalAbbr1);
      assertFalse(seqClassifierFlags0.useBagOfWords);
      assertFalse(seqClassifierFlags0.showNCCInfo);
      assertFalse(seqClassifierFlags0.useOWLQN);
      assertFalse(seqClassifierFlags0.useWordPairs);
      assertFalse(seqClassifierFlags0.useMoreGazFeatures);
      assertFalse(seqClassifierFlags0.dualDecompDebug);
      assertFalse(seqClassifierFlags0.doFeatureDiscovery);
      assertFalse(seqClassifierFlags0.normalizeTimex);
      assertFalse(seqClassifierFlags0.usePre);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions2);
      assertFalse(seqClassifierFlags0.nonLinearCRF);
      assertFalse(seqClassifierFlags0.useSegmentation);
      assertFalse(seqClassifierFlags0.useEitherSideWord);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions3);
      assertEquals(100, seqClassifierFlags0.printClassifierParam);
      assertFalse(seqClassifierFlags0.useRadical);
      assertFalse(seqClassifierFlags0.dump);
      assertTrue(seqClassifierFlags0.initWithPosterior);
      assertTrue(seqClassifierFlags0.splitDocuments);
      assertFalse(seqClassifierFlags0.useHeadGov);
      assertFalse(seqClassifierFlags0.useFeaturesC6gram);
      assertFalse(seqClassifierFlags0.factorInAlignmentProb);
      assertEquals(0.0, seqClassifierFlags0.l1reg, 0.01);
      assertFalse(seqClassifierFlags0.useAbbr1);
      assertEquals((-1), seqClassifierFlags0.maxNGramLeng);
      assertFalse(seqClassifierFlags0.useEntityTypes);
      assertFalse(seqClassifierFlags0.useSentenceNumber);
      assertFalse(seqClassifierFlags0.useWordnetFeatures);
      assertEquals(3, seqClassifierFlags0.charHalfWindow);
      assertFalse(seqClassifierFlags0.dehyphenateNGrams);
      assertEquals((-1), seqClassifierFlags0.maxIterations);
      assertFalse(seqClassifierFlags0.useWEBFreqDict);
      assertEquals(0.0, seqClassifierFlags0.dropoutRate, 0.01);
      assertFalse(seqClassifierFlags0.useShapeConjunctions);
      assertFalse(seqClassifierFlags0.useCRFforUnsup);
      assertFalse(seqClassifierFlags0.useTaggySequencesShapeInteraction);
      assertFalse(seqClassifierFlags0.useGazettes);
      assertFalse(seqClassifierFlags0.lowerNewgeneThreshold);
      assertEquals(1, seqClassifierFlags0.endFold);
      assertFalse(seqClassifierFlags0.usePrediction);
      assertFalse(seqClassifierFlags0.usePhraseFeatures);
      assertEquals(0, seqClassifierFlags0.featureCountThreshold);
      assertFalse(seqClassifierFlags0.useEntityTypeSequences);
      assertFalse(seqClassifierFlags0.useRule);
      assertEquals((-1), seqClassifierFlags0.labelDictionaryCutoff);
      assertEquals(10, seqClassifierFlags0.totalDataSlice);
      assertFalse(seqClassifierFlags0.useExtraTaggySequences);
      assertTrue(seqClassifierFlags0.useQN);
      assertFalse(seqClassifierFlags0.usePhraseWordSpecialTags);
      assertEquals(1.0, seqClassifierFlags0.alignDDAlpha, 0.01);
      assertFalse(seqClassifierFlags0.dampDDStepSizeWithAlignmentProb);
      assertFalse(seqClassifierFlags0.pctSegmenterScaleByCRF);
      assertFalse(seqClassifierFlags0.powerAlignProbAsAddition);
      assertEquals(10, seqClassifierFlags0.wideDisjunctionWidth);
      assertTrue(seqClassifierFlags0.useOutputLayer);
      assertFalse(seqClassifierFlags0.useDictleng);
      assertFalse(seqClassifierFlags0.useSUTime);
      assertFalse(seqClassifierFlags0.dropoutApprox);
      assertFalse(seqClassifierFlags0.useDisjunctiveShapeInteraction);
      assertTrue(seqClassifierFlags0.useExternal);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions2);
      assertFalse(seqClassifierFlags0.alternateTraining);
      assertFalse(seqClassifierFlags0.greekifyNGrams);
      assertEquals(1.0E-4, seqClassifierFlags0.tolerance, 0.01);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions3);
      assertFalse(seqClassifierFlags0.useParenMatching);
      assertFalse(seqClassifierFlags0.intern);
      assertFalse(seqClassifierFlags0.printProbs);
      assertEquals((-1), seqClassifierFlags0.arbitraryInputLayerSize);
      assertFalse(seqClassifierFlags0.useKBest);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSizeAlignment, 0.01);
      assertFalse(seqClassifierFlags0.useNext);
      assertEquals(1, seqClassifierFlags0.numDatasetsPerFile);
      assertFalse(seqClassifierFlags0.dualDecompNotBIO);
      assertFalse(seqClassifierFlags0.bioSubmitOutput);
      assertFalse(seqClassifierFlags0.useChunkySequences);
      assertFalse(seqClassifierFlags0.evaluateBackground);
      assertFalse(seqClassifierFlags0.useNoisyNonNoisyFeature);
      assertFalse(seqClassifierFlags0.useReverseAffix);
      assertFalse(seqClassifierFlags0.useYetMoreCpCShapes);
      assertFalse(seqClassifierFlags0.useMoreNeighborNGrams);
      assertFalse(seqClassifierFlags0.useHk);
      assertTrue(seqClassifierFlags0.useKnownLCWords);
      assertTrue(seqClassifierFlags0.useInternal);
      assertFalse(seqClassifierFlags0.useSemPrior);
      assertFalse(seqClassifierFlags0.useANTE);
      assertFalse(seqClassifierFlags0.usePKSuf1);
      assertFalse(seqClassifierFlags0.useTypeySequences);
      assertFalse(seqClassifierFlags0.usePhraseWords);
      assertFalse(seqClassifierFlags0.useMSRChar2);
      assertTrue(seqClassifierFlags0.useSequences);
      assertFalse(seqClassifierFlags0.randomLopFeatureSplit);
      assertFalse(seqClassifierFlags0.readStdin);
      assertFalse(seqClassifierFlags0.useRobustQN);
      assertFalse(seqClassifierFlags0.useIsDateRange);
      assertEquals(0, seqClassifierFlags0.maxRight);
      assertFalse(seqClassifierFlags0.useWEB);
      assertEquals((-1), seqClassifierFlags0.purgeFeatures);
      assertFalse(seqClassifierFlags0.printFirstOrderProbs);
      assertFalse(seqClassifierFlags0.makeConsistent);
      assertFalse(seqClassifierFlags0.useBig5);
      assertFalse(seqClassifierFlags0.initWithNERPosterior);
      assertFalse(seqClassifierFlags0.removeStrictGoodCoNLLDuplicates);
      assertFalse(seqClassifierFlags0.dualDecompAlignment);
      assertFalse(seqClassifierFlags0.useFeaturesCpC5gram);
      assertFalse(seqClassifierFlags0.suppressTestDebug);
      assertFalse(seqClassifierFlags0.useOccurrencePatterns);
      assertFalse(seqClassifierFlags0.sloppyGazette);
      assertFalse(seqClassifierFlags0.useGazFeatures);
      assertFalse(seqClassifierFlags0.useNextVB);
      assertFalse(seqClassifierFlags0.useMidDotShape);
      assertEquals(Integer.MAX_VALUE, seqClassifierFlags0.printFeaturesUpto);
      assertEquals(1, seqClassifierFlags0.featureThreshold);
      assertEquals(0.0, seqClassifierFlags0.featureDiffThresh, 0.01);
      assertFalse(seqClassifierFlags0.useNERPriorBIO);
      assertFalse(seqClassifierFlags0.useGENIA);
      assertFalse(seqClassifierFlags0.useNegPKDict3);
      assertFalse(seqClassifierFlags0.useNegPKDict2);
      assertFalse(seqClassifierFlags0.deleteBlankLines);
      assertFalse(seqClassifierFlags0.useNegPKDict4);
      assertFalse(seqClassifierFlags0.sparseOutputLayer);
      assertEquals(1.0, seqClassifierFlags0.lambdaEN, 0.01);
      assertEquals(0, seqClassifierFlags0.featureCountThresh);
      assertFalse(seqClassifierFlags0.useDictHK2);
      assertFalse(seqClassifierFlags0.useObservedFeaturesOnly);
      assertFalse(seqClassifierFlags0.useGenericFeatures);
      assertFalse(seqClassifierFlags0.iobWrapper);
      assertEquals(0, seqClassifierFlags0.nerSkipFirstK);
      assertEquals(1.0, seqClassifierFlags0.adaptSigma, 0.01);
      assertFalse(seqClassifierFlags0.useClassFeature);
      assertEquals(0, seqClassifierFlags0.startEvaluateIters);
      assertFalse(seqClassifierFlags0.useMsr);
      assertFalse(seqClassifierFlags0.useHKPre1);
      assertFalse(seqClassifierFlags0.useAs);
      assertEquals(Double.POSITIVE_INFINITY, seqClassifierFlags0.searchGraphPrune, 0.01);
      assertFalse(seqClassifierFlags0.useUnknown);
      assertFalse(seqClassifierFlags0.useBerkeleyCompetitivePosterior);
      assertFalse(seqClassifierFlags0.useObservedSequencesOnly);
      assertFalse(seqClassifierFlags0.doFE);
      assertEquals(0.0, seqClassifierFlags0.newgeneThreshold, 0.01);
      assertEquals(0, seqClassifierFlags0.dualDecompMaxItr);
      assertFalse(seqClassifierFlags0.strictlyFirstOrder);
      assertFalse(seqClassifierFlags0.useFeaturesC5gram);
      assertEquals((-1), seqClassifierFlags0.tuneSampleSize);
      assertFalse(seqClassifierFlags0.purgeDatasets);
      assertTrue(seqClassifierFlags0.biAlignmentPriorIsPMI);
      assertFalse(seqClassifierFlags0.useDictASBC2);
      assertFalse(seqClassifierFlags0.addCapitalFeatures);
      assertEquals(1.0, seqClassifierFlags0.randomizedRatio, 0.01);
      assertFalse(seqClassifierFlags0.useInPlaceSGD);
      assertFalse(seqClassifierFlags0.useDistSim);
      assertEquals(1, seqClassifierFlags0.terminateOnEvalImprovementNumOfEpoch);
      assertFalse(seqClassifierFlags0.useEmbedding);
      assertEquals(1, seqClassifierFlags0.bisequencePriorType);
      assertFalse(seqClassifierFlags0.gradientDebug);
      assertFalse(seqClassifierFlags0.selfTest);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesBigram);
      assertEquals(2, seqClassifierFlags0.CRFwindow);
      assertEquals(1, seqClassifierFlags0.multiThreadGrad);
      assertFalse(seqClassifierFlags0.useNPHead);
      assertFalse(seqClassifierFlags0.useAltGazFeatures);
      assertFalse(seqClassifierFlags0.showCCInfo);
      assertEquals(50, seqClassifierFlags0.SGD2QNhessSamples);
      assertFalse(seqClassifierFlags0.useHuber);
      assertEquals(0.001, seqClassifierFlags0.adaGradEps, 0.01);
      assertFalse(seqClassifierFlags0.timitDatum);
      assertFalse(seqClassifierFlags0.useFeaturesCpC4gram);
      assertFalse(seqClassifierFlags0.useWordTag);
      assertFalse(seqClassifierFlags0.useLemmaAsWord);
      
      String string0 = StringUtils.pad((Object) wordTag0, 62);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertEquals("", seqClassifierFlags0.toString());
      assertEquals(0, coreLabel0.size());
      assertNull(wordTag0.tag());
      assertNull(wordTag0.word());
      assertNull(wordTag0.value());
      assertNotNull(string0);
      assertFalse(properties0.equals((Object)properties1));
      assertFalse(properties1.equals((Object)properties0));
      assertNotSame(properties0, properties1);
      assertNotSame(properties1, properties0);
      assertFalse(seqClassifierFlags0.useScaledSGD);
      assertFalse(seqClassifierFlags0.useDisjShape);
      assertFalse(seqClassifierFlags0.useCTBSuf1);
      assertEquals(1, seqClassifierFlags0.numLopExpert);
      assertFalse(seqClassifierFlags0.useLabelSource);
      assertFalse(seqClassifierFlags0.useShapeStrings);
      assertEquals(0, seqClassifierFlags0.multiThreadClassifier);
      assertFalse(seqClassifierFlags0.printLabelValue);
      assertFalse(seqClassifierFlags0.useOnlySeenWeights);
      assertFalse(seqClassifierFlags0.useCorefFeatures);
      assertFalse(seqClassifierFlags0.noNeighborConstraints);
      assertFalse(seqClassifierFlags0.backpropLopTraining);
      assertFalse(seqClassifierFlags0.terminateOnEvalImprovement);
      assertFalse(seqClassifierFlags0.suppressMidDotPostprocessing);
      assertFalse(seqClassifierFlags0.checkNameList);
      assertEquals(0, seqClassifierFlags0.maxQNItr);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesAll);
      assertFalse(seqClassifierFlags0.keepEnglishWhitespaces);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions);
      assertFalse(seqClassifierFlags0.perceptronDebug);
      assertFalse(seqClassifierFlags0.justify);
      assertFalse(seqClassifierFlags0.splitSlashHyphenWords);
      assertEquals(1, seqClassifierFlags0.selfTrainIterations);
      assertFalse(seqClassifierFlags0.baseline);
      assertFalse(seqClassifierFlags0.useCTBChar2);
      assertFalse(seqClassifierFlags0.iobTags);
      assertTrue(seqClassifierFlags0.useCWSFeatures);
      assertFalse(seqClassifierFlags0.usePk);
      assertFalse(seqClassifierFlags0.useABSTRFreqDict);
      assertFalse(seqClassifierFlags0.useFREQ);
      assertEquals(0.0, seqClassifierFlags0.featureWeightThreshold, 0.01);
      assertEquals(0, seqClassifierFlags0.evaluateIters);
      assertTrue(seqClassifierFlags0.useViterbi);
      assertFalse(seqClassifierFlags0.usePrevVB);
      assertFalse(seqClassifierFlags0.lazyUpdate);
      assertFalse(seqClassifierFlags0.skipOutputRegularization);
      assertFalse(seqClassifierFlags0.learnENBasedOnCH);
      assertEquals(1, seqClassifierFlags0.numTimesRemoveTopN);
      assertFalse(seqClassifierFlags0.strictGoodCoNLL);
      assertFalse(seqClassifierFlags0.powerAlignProb);
      assertFalse(seqClassifierFlags0.useWordShapeGaz);
      assertTrue(seqClassifierFlags0.initViterbi);
      assertFalse(seqClassifierFlags0.largeChSegFile);
      assertFalse(seqClassifierFlags0.useNeighborNGrams);
      assertFalse(seqClassifierFlags0.usePosition);
      assertTrue(seqClassifierFlags0.averagePerceptron);
      assertEquals(0.0, seqClassifierFlags0.priorAlpha, 0.01);
      assertFalse(seqClassifierFlags0.keepEmptySentences);
      assertFalse(seqClassifierFlags0.usePrev);
      assertEquals(1, seqClassifierFlags0.startFold);
      assertFalse(seqClassifierFlags0.useNegDict2);
      assertFalse(seqClassifierFlags0.useFirstWord);
      assertFalse(seqClassifierFlags0.useIsURL);
      assertFalse(seqClassifierFlags0.useAdaDiff);
      assertFalse(seqClassifierFlags0.useWord1);
      assertFalse(seqClassifierFlags0.useWord2);
      assertFalse(seqClassifierFlags0.useWord3);
      assertEquals(8, seqClassifierFlags0.distSimMaxBits);
      assertFalse(seqClassifierFlags0.useWord4);
      assertFalse(seqClassifierFlags0.useWideDisjunctive);
      assertFalse(seqClassifierFlags0.useCTBPre1);
      assertFalse(seqClassifierFlags0.useNegDict4);
      assertFalse(seqClassifierFlags0.useProtoFeatures);
      assertFalse(seqClassifierFlags0.useNegDict3);
      assertEquals(0.9, seqClassifierFlags0.selfTrainConfidenceThreshold, 0.01);
      assertFalse(seqClassifierFlags0.useUniformPrior);
      assertFalse(seqClassifierFlags0.useLC);
      assertFalse(seqClassifierFlags0.groupByOutputClass);
      assertEquals(0.0, seqClassifierFlags0.alignmentPruneThreshold, 0.01);
      assertFalse(seqClassifierFlags0.useFilter);
      assertFalse(seqClassifierFlags0.useKL);
      assertEquals(0, seqClassifierFlags0.removeTopN);
      assertFalse(seqClassifierFlags0.conjoinShapeNGrams);
      assertFalse(seqClassifierFlags0.cleanGazette);
      assertFalse(seqClassifierFlags0.prependEmbedding);
      assertEquals(0, seqClassifierFlags0.numOfSlices);
      assertFalse(seqClassifierFlags0.useCWSWordFeatures);
      assertFalse(seqClassifierFlags0.applyNumericClassifiers);
      assertFalse(seqClassifierFlags0.useACR);
      assertFalse(seqClassifierFlags0.useSGD);
      assertEquals((-1), seqClassifierFlags0.samplingSpeedUpThreshold);
      assertFalse(seqClassifierFlags0.useBilingualNERPrior);
      assertFalse(seqClassifierFlags0.pctSegmenterLenAdjust);
      assertFalse(seqClassifierFlags0.useReverse);
      assertFalse(seqClassifierFlags0.useHardGE);
      assertFalse(seqClassifierFlags0.tuneSGD);
      assertFalse(seqClassifierFlags0.useTitle);
      assertTrue(seqClassifierFlags0.useWord);
      assertFalse(seqClassifierFlags0.useSequentialScanSampling);
      assertFalse(seqClassifierFlags0.randomLopWeights);
      assertEquals(1, seqClassifierFlags0.numStartLayers);
      assertEquals((-1), seqClassifierFlags0.SGDPasses);
      assertFalse(seqClassifierFlags0.useNB);
      assertEquals(0, seqClassifierFlags0.ocrFold);
      assertFalse(seqClassifierFlags0.useRad1);
      assertFalse(seqClassifierFlags0.fakeDataset);
      assertFalse(seqClassifierFlags0.useSeenFeaturesOnly);
      assertFalse(seqClassifierFlags0.useChPos);
      assertFalse(seqClassifierFlags0.useSymWordPairs);
      assertFalse(seqClassifierFlags0.appendLC);
      assertFalse(seqClassifierFlags0.useGEforSup);
      assertFalse(seqClassifierFlags0.useNegCTBDict4);
      assertFalse(seqClassifierFlags0.useNegCTBDict3);
      assertFalse(seqClassifierFlags0.useNegCTBDict2);
      assertEquals(0, seqClassifierFlags0.scaledSGDMethod);
      assertFalse(seqClassifierFlags0.useRad2);
      assertFalse(seqClassifierFlags0.twoStage);
      assertFalse(seqClassifierFlags0.normalizeTerms);
      assertEquals(0, seqClassifierFlags0.maxDocSize);
      assertEquals(0.0, seqClassifierFlags0.annealingRate, 0.01);
      assertFalse(seqClassifierFlags0.useWordn);
      assertFalse(seqClassifierFlags0.numberEquivalenceDistSim);
      assertFalse(seqClassifierFlags0.useFeaturesCpC6gram);
      assertEquals(25, seqClassifierFlags0.QNsize);
      assertFalse(seqClassifierFlags0.useTaggySequences);
      assertFalse(seqClassifierFlags0.useNoisyLabel);
      assertFalse(seqClassifierFlags0.usePKPre1);
      assertFalse(seqClassifierFlags0.useNegHKDict4);
      assertFalse(seqClassifierFlags0.useNegHKDict3);
      assertFalse(seqClassifierFlags0.useNegHKDict2);
      assertEquals(0, seqClassifierFlags0.maxAdditionalKnownLCWords);
      assertEquals(1.0, seqClassifierFlags0.lambdaCH, 0.01);
      assertFalse(seqClassifierFlags0.useHybrid);
      assertTrue(seqClassifierFlags0.restrictLabels);
      assertFalse(seqClassifierFlags0.weightByEntropy);
      assertFalse(seqClassifierFlags0.augmentedDateChars);
      assertFalse(seqClassifierFlags0.testObjFunction);
      assertFalse(seqClassifierFlags0.printNR);
      assertFalse(seqClassifierFlags0.usePhraseWordTags);
      assertFalse(seqClassifierFlags0.usePrediction2);
      assertEquals(0, seqClassifierFlags0.hybridCutoffIteration);
      assertFalse(seqClassifierFlags0.strictlyZeroethOrder);
      assertEquals(0, seqClassifierFlags0.numTimesPruneFeatures);
      assertFalse(seqClassifierFlags0.groupByFeatureTemplate);
      assertFalse(seqClassifierFlags0.useLastRealWord);
      assertEquals(1000, seqClassifierFlags0.wordSegBeamSize);
      assertFalse(seqClassifierFlags0.useRandomSeed);
      assertFalse(seqClassifierFlags0.announceObjectBankEntries);
      assertFalse(seqClassifierFlags0.estimateInitial);
      assertFalse(seqClassifierFlags0.useNegASBCDict4);
      assertFalse(seqClassifierFlags0.transitionEdgeOnly);
      assertFalse(seqClassifierFlags0.useNumberFeature);
      assertFalse(seqClassifierFlags0.useNegASBCDict2);
      assertFalse(seqClassifierFlags0.useNegASBCDict3);
      assertFalse(seqClassifierFlags0.lowercaseNGrams);
      assertFalse(seqClassifierFlags0.memoryThrift);
      assertEquals(100, seqClassifierFlags0.numSamples);
      assertTrue(seqClassifierFlags0.applyNERPenalty);
      assertFalse(seqClassifierFlags0.addBiasToEmbedding);
      assertEquals(2, seqClassifierFlags0.maxLeft);
      assertFalse(seqClassifierFlags0.groupByInput);
      assertFalse(seqClassifierFlags0.printTrainLabels);
      assertFalse(seqClassifierFlags0.printWeights);
      assertFalse(seqClassifierFlags0.intern2);
      assertFalse(seqClassifierFlags0.combo);
      assertEquals(0.0, seqClassifierFlags0.priorLambda, 0.01);
      assertFalse(seqClassifierFlags0.useGoodForNamesCpC);
      assertFalse(seqClassifierFlags0.casedDistSim);
      assertEquals(1.0, seqClassifierFlags0.sigma, 0.01);
      assertTrue(seqClassifierFlags0.useDenero);
      assertTrue(seqClassifierFlags0.keepOBInMemory);
      assertEquals(0, seqClassifierFlags0.interimOutputFreq);
      assertFalse(seqClassifierFlags0.printXML);
      assertFalse(seqClassifierFlags0.useHKChar2);
      assertFalse(seqClassifierFlags0.useAdaDelta);
      assertFalse(seqClassifierFlags0.dontExtendTaggy);
      assertFalse(seqClassifierFlags0.regularizeSoftmaxTieParam);
      assertEquals(0.1, seqClassifierFlags0.initialGain, 0.01);
      assertFalse(seqClassifierFlags0.useABSTR);
      assertFalse(seqClassifierFlags0.useASBCSuf1);
      assertFalse(seqClassifierFlags0.strictlySecondOrder);
      assertFalse(seqClassifierFlags0.useDict2);
      assertFalse(seqClassifierFlags0.booleanFeatures);
      assertFalse(seqClassifierFlags0.useTopics);
      assertFalse(seqClassifierFlags0.useUnicodeType5gram);
      assertFalse(seqClassifierFlags0.useTOK);
      assertFalse(seqClassifierFlags0.retainEntitySubclassification);
      assertFalse(seqClassifierFlags0.saveFeatureIndexToDisk);
      assertFalse(seqClassifierFlags0.verboseForTrueCasing);
      assertFalse(seqClassifierFlags0.useABGENE);
      assertFalse(seqClassifierFlags0.terminateOnAvgImprovement);
      assertFalse(seqClassifierFlags0.strictlyThirdOrder);
      assertFalse(seqClassifierFlags0.useTypeSeqs2);
      assertFalse(seqClassifierFlags0.useTypeSeqs3);
      assertFalse(seqClassifierFlags0.splitOnHead);
      assertFalse(seqClassifierFlags0.useUnicodeType);
      assertEquals((-1), seqClassifierFlags0.numHiddenUnits);
      assertFalse(seqClassifierFlags0.useBigramInTwoClique);
      assertEquals(0.0, seqClassifierFlags0.removeTopNPercent, 0.01);
      assertFalse(seqClassifierFlags0.useSMD);
      assertFalse(seqClassifierFlags0.sighanPostProcessing);
      assertEquals(1, seqClassifierFlags0.nerSlowerTimes);
      assertFalse(seqClassifierFlags0.evaluateTrain);
      assertEquals(1.0, seqClassifierFlags0.unsupDropoutScale, 0.01);
      assertFalse(seqClassifierFlags0.ocrTrain);
      assertFalse(seqClassifierFlags0.useMoreAbbr);
      assertFalse(seqClassifierFlags0.useChunks);
      assertFalse(seqClassifierFlags0.useSymTags);
      assertEquals(8, seqClassifierFlags0.maxAllowedChromaticSize);
      assertEquals((-1), seqClassifierFlags0.QNPasses);
      assertFalse(seqClassifierFlags0.useNextSequences);
      assertFalse(seqClassifierFlags0.restrictTransitionsTimit);
      assertEquals(0.5, seqClassifierFlags0.alignmentDecodeThreshold, 0.01);
      assertTrue(seqClassifierFlags0.separateASCIIandRange);
      assertFalse(seqClassifierFlags0.secondOrderNonLinear);
      assertFalse(seqClassifierFlags0.use2W);
      assertFalse(seqClassifierFlags0.useEitherSideDisjunctive);
      assertFalse(seqClassifierFlags0.tieOutputLayer);
      assertFalse(seqClassifierFlags0.verboseMode);
      assertTrue(seqClassifierFlags0.includeC2EViterbi);
      assertFalse(seqClassifierFlags0.useDictPK2);
      assertFalse(seqClassifierFlags0.hardcodeSoftmaxOutputWeights);
      assertEquals(1, seqClassifierFlags0.kBest);
      assertFalse(seqClassifierFlags0.printFactorTable);
      assertTrue(seqClassifierFlags0.useMemoryEvaluator);
      assertFalse(seqClassifierFlags0.useVB);
      assertFalse(seqClassifierFlags0.useIfInteger);
      assertFalse(seqClassifierFlags0.useCommonWordsFeature);
      assertFalse(seqClassifierFlags0.useASBCPre1);
      assertEquals(0.0, seqClassifierFlags0.softmaxTieLambda, 0.01);
      assertTrue(seqClassifierFlags0.useHiddenLayer);
      assertFalse(seqClassifierFlags0.useBerkeleyAlignerForViterbi);
      assertFalse(seqClassifierFlags0.useTitle2);
      assertFalse(seqClassifierFlags0.useAdaGradFOBOS);
      assertFalse(seqClassifierFlags0.useMUCFeatures);
      assertFalse(seqClassifierFlags0.useNERPrior);
      assertFalse(seqClassifierFlags0.useABSTRFreq);
      assertFalse(seqClassifierFlags0.useMoreTags);
      assertEquals(1, seqClassifierFlags0.selfTrainWindowSize);
      assertFalse(seqClassifierFlags0.useBoundarySequences);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions3);
      assertEquals(0.95, seqClassifierFlags0.adaDeltaRho, 0.01);
      assertFalse(seqClassifierFlags0.useNGrams);
      assertFalse(seqClassifierFlags0.useSigmoid);
      assertFalse(seqClassifierFlags0.testHessSamples);
      assertFalse(seqClassifierFlags0.useLongSequences);
      assertFalse(seqClassifierFlags0.useTrainLexicon);
      assertFalse(seqClassifierFlags0.groupByHiddenUnit);
      assertFalse(seqClassifierFlags0.useNextRealWord);
      assertFalse(seqClassifierFlags0.useTypeSeqs);
      assertFalse(seqClassifierFlags0.geDebug);
      assertEquals(30, seqClassifierFlags0.beamSize);
      assertFalse(seqClassifierFlags0.use4Clique);
      assertEquals(1.0, seqClassifierFlags0.dropoutScale, 0.01);
      assertFalse(seqClassifierFlags0.useMinimalAbbr);
      assertFalse(seqClassifierFlags0.useUnicodeType4gram);
      assertEquals(0, seqClassifierFlags0.numOfFeatureSlices);
      assertFalse(seqClassifierFlags0.mergeTags);
      assertFalse(seqClassifierFlags0.useNPGovernor);
      assertFalse(seqClassifierFlags0.checkGradient);
      assertFalse(seqClassifierFlags0.useURLSequences);
      assertFalse(seqClassifierFlags0.useEntityRule);
      assertEquals(1, seqClassifierFlags0.numRuns);
      assertFalse(seqClassifierFlags0.useRule2);
      assertFalse(seqClassifierFlags0.useSGDtoQN);
      assertFalse(seqClassifierFlags0.useASBCChar2);
      assertFalse(seqClassifierFlags0.noEdgeFeature);
      assertFalse(seqClassifierFlags0.noMidNGrams);
      assertFalse(seqClassifierFlags0.normalize);
      assertFalse(seqClassifierFlags0.useSuf);
      assertFalse(seqClassifierFlags0.useUnicodeBlock);
      assertFalse(seqClassifierFlags0.useAcqPrior);
      assertEquals(4, seqClassifierFlags0.disjunctionWidth);
      assertFalse(seqClassifierFlags0.useOutDict2);
      assertFalse(seqClassifierFlags0.keepAllWhitespaces);
      assertFalse(seqClassifierFlags0.softmaxOutputLayer);
      assertEquals(0.1, seqClassifierFlags0.gainSGD, 0.01);
      assertFalse(seqClassifierFlags0.useGazettePhrases);
      assertEquals(10, seqClassifierFlags0.totalFeatureSlice);
      assertFalse(seqClassifierFlags0.testVariance);
      assertFalse(seqClassifierFlags0.usePrevNextLemmas);
      assertFalse(seqClassifierFlags0.useHKSuf1);
      assertEquals(0.0, seqClassifierFlags0.pctSegmenterScale, 0.01);
      assertFalse(seqClassifierFlags0.cacheNGrams);
      assertEquals((-1), seqClassifierFlags0.wordShape);
      assertEquals(1, seqClassifierFlags0.multiThreadPerceptron);
      assertFalse(seqClassifierFlags0.useChromaticSampling);
      assertFalse(seqClassifierFlags0.useFeaturesC4gram);
      assertFalse(seqClassifierFlags0.matchNERIncentive);
      assertFalse(seqClassifierFlags0.useUndirectedDisjunctive);
      assertFalse(seqClassifierFlags0.doGibbs);
      assertFalse(seqClassifierFlags0.factorInBiEdgePotential);
      assertFalse(seqClassifierFlags0.useStochasticQN);
      assertFalse(seqClassifierFlags0.outputIterationsToFile);
      assertFalse(seqClassifierFlags0.useDualDecomp);
      assertEquals(0.1, seqClassifierFlags0.initRate, 0.01);
      assertEquals(1, seqClassifierFlags0.CRForder);
      assertFalse(seqClassifierFlags0.useFloat);
      assertFalse(seqClassifierFlags0.useYear);
      assertFalse(seqClassifierFlags0.useTags);
      assertFalse(seqClassifierFlags0.useAbbr);
      assertFalse(seqClassifierFlags0.useBeginSent);
      assertFalse(seqClassifierFlags0.useSum);
      assertFalse(seqClassifierFlags0.expandMidDot);
      assertEquals(25, seqClassifierFlags0.QNsize2);
      assertFalse(seqClassifierFlags0.useQuartic);
      assertEquals(0.01, seqClassifierFlags0.epsilon, 0.01);
      assertFalse(seqClassifierFlags0.usePrevSequences);
      assertFalse(seqClassifierFlags0.useDictCTB2);
      assertFalse(seqClassifierFlags0.useShapeStrings4);
      assertFalse(seqClassifierFlags0.usePKChar2);
      assertFalse(seqClassifierFlags0.useShapeStrings5);
      assertEquals(1, seqClassifierFlags0.numFolds);
      assertFalse(seqClassifierFlags0.useShapeStrings3);
      assertFalse(seqClassifierFlags0.useDisjunctive);
      assertFalse(seqClassifierFlags0.useShapeStrings1);
      assertFalse(seqClassifierFlags0.subCWGaz);
      assertTrue(seqClassifierFlags0.learnCHBasedOnEN);
      assertFalse(seqClassifierFlags0.useRad2b);
      assertEquals(0, seqClassifierFlags0.multiThreadGibbs);
      assertEquals(15, seqClassifierFlags0.stochasticBatchSize);
      assertFalse(seqClassifierFlags0.doAdaptation);
      assertFalse(seqClassifierFlags0.removeBackgroundSingletonFeatures);
      assertFalse(seqClassifierFlags0.useLemmas);
      assertFalse(seqClassifierFlags0.blockInitialize);
      assertFalse(seqClassifierFlags0.includeFullCRFInLOP);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSize, 0.01);
      assertFalse(seqClassifierFlags0.useOrdinal);
      assertFalse(seqClassifierFlags0.useMinimalAbbr1);
      assertFalse(seqClassifierFlags0.useBagOfWords);
      assertFalse(seqClassifierFlags0.showNCCInfo);
      assertFalse(seqClassifierFlags0.useOWLQN);
      assertFalse(seqClassifierFlags0.useWordPairs);
      assertFalse(seqClassifierFlags0.useMoreGazFeatures);
      assertFalse(seqClassifierFlags0.dualDecompDebug);
      assertFalse(seqClassifierFlags0.doFeatureDiscovery);
      assertFalse(seqClassifierFlags0.normalizeTimex);
      assertFalse(seqClassifierFlags0.usePre);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions2);
      assertFalse(seqClassifierFlags0.nonLinearCRF);
      assertFalse(seqClassifierFlags0.useSegmentation);
      assertFalse(seqClassifierFlags0.useEitherSideWord);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions3);
      assertEquals(100, seqClassifierFlags0.printClassifierParam);
      assertFalse(seqClassifierFlags0.useRadical);
      assertFalse(seqClassifierFlags0.dump);
      assertTrue(seqClassifierFlags0.initWithPosterior);
      assertTrue(seqClassifierFlags0.splitDocuments);
      assertFalse(seqClassifierFlags0.useHeadGov);
      assertFalse(seqClassifierFlags0.useFeaturesC6gram);
      assertFalse(seqClassifierFlags0.factorInAlignmentProb);
      assertEquals(0.0, seqClassifierFlags0.l1reg, 0.01);
      assertFalse(seqClassifierFlags0.useAbbr1);
      assertEquals((-1), seqClassifierFlags0.maxNGramLeng);
      assertFalse(seqClassifierFlags0.useEntityTypes);
      assertFalse(seqClassifierFlags0.useSentenceNumber);
      assertFalse(seqClassifierFlags0.useWordnetFeatures);
      assertEquals(3, seqClassifierFlags0.charHalfWindow);
      assertFalse(seqClassifierFlags0.dehyphenateNGrams);
      assertEquals((-1), seqClassifierFlags0.maxIterations);
      assertFalse(seqClassifierFlags0.useWEBFreqDict);
      assertEquals(0.0, seqClassifierFlags0.dropoutRate, 0.01);
      assertFalse(seqClassifierFlags0.useShapeConjunctions);
      assertFalse(seqClassifierFlags0.useCRFforUnsup);
      assertFalse(seqClassifierFlags0.useTaggySequencesShapeInteraction);
      assertFalse(seqClassifierFlags0.useGazettes);
      assertFalse(seqClassifierFlags0.lowerNewgeneThreshold);
      assertEquals(1, seqClassifierFlags0.endFold);
      assertFalse(seqClassifierFlags0.usePrediction);
      assertFalse(seqClassifierFlags0.usePhraseFeatures);
      assertEquals(0, seqClassifierFlags0.featureCountThreshold);
      assertFalse(seqClassifierFlags0.useEntityTypeSequences);
      assertFalse(seqClassifierFlags0.useRule);
      assertEquals((-1), seqClassifierFlags0.labelDictionaryCutoff);
      assertEquals(10, seqClassifierFlags0.totalDataSlice);
      assertFalse(seqClassifierFlags0.useExtraTaggySequences);
      assertTrue(seqClassifierFlags0.useQN);
      assertFalse(seqClassifierFlags0.usePhraseWordSpecialTags);
      assertEquals(1.0, seqClassifierFlags0.alignDDAlpha, 0.01);
      assertFalse(seqClassifierFlags0.dampDDStepSizeWithAlignmentProb);
      assertFalse(seqClassifierFlags0.pctSegmenterScaleByCRF);
      assertFalse(seqClassifierFlags0.powerAlignProbAsAddition);
      assertEquals(10, seqClassifierFlags0.wideDisjunctionWidth);
      assertTrue(seqClassifierFlags0.useOutputLayer);
      assertFalse(seqClassifierFlags0.useDictleng);
      assertFalse(seqClassifierFlags0.useSUTime);
      assertFalse(seqClassifierFlags0.dropoutApprox);
      assertFalse(seqClassifierFlags0.useDisjunctiveShapeInteraction);
      assertTrue(seqClassifierFlags0.useExternal);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions2);
      assertFalse(seqClassifierFlags0.alternateTraining);
      assertFalse(seqClassifierFlags0.greekifyNGrams);
      assertEquals(1.0E-4, seqClassifierFlags0.tolerance, 0.01);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions3);
      assertFalse(seqClassifierFlags0.useParenMatching);
      assertFalse(seqClassifierFlags0.intern);
      assertFalse(seqClassifierFlags0.printProbs);
      assertEquals((-1), seqClassifierFlags0.arbitraryInputLayerSize);
      assertFalse(seqClassifierFlags0.useKBest);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSizeAlignment, 0.01);
      assertFalse(seqClassifierFlags0.useNext);
      assertEquals(1, seqClassifierFlags0.numDatasetsPerFile);
      assertFalse(seqClassifierFlags0.dualDecompNotBIO);
      assertFalse(seqClassifierFlags0.bioSubmitOutput);
      assertFalse(seqClassifierFlags0.useChunkySequences);
      assertFalse(seqClassifierFlags0.evaluateBackground);
      assertFalse(seqClassifierFlags0.useNoisyNonNoisyFeature);
      
      seqClassifierFlags0.announceObjectBankEntries = true;
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertEquals("", seqClassifierFlags0.toString());
      
      Class<StringUtils> class3 = StringUtils.class;
      // Undeclared exception!
      try { 
        StringUtils.joinFields((List<? extends CoreMap>) null, class3, "useTypeSeqs2", (String) null, 1278, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "Ub{s+gf";
      String string1 = StringUtils.getNotNullString("Ub{s+gf");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Ub{s+gf", string1);
      
      LabeledScoredTreeNode labeledScoredTreeNode0 = new LabeledScoredTreeNode();
      assertEquals(Double.NaN, labeledScoredTreeNode0.score(), 0.01);
      assertNotNull(labeledScoredTreeNode0);
      
      // Undeclared exception!
      try { 
        labeledScoredTreeNode0.yieldHasWord();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.ling.StringLabel", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = StringUtils.normalize("-");
      assertNotNull(string0);
      assertEquals("-", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-";
      stringArray0[1] = "-";
      stringArray0[2] = "-";
      String string1 = StringUtils.toCSVString(stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"-\",\"-\",\"-\"", string1);
      
      // Undeclared exception!
      try { 
        StringUtils.argsToMap(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.StringUtils", e);
      }
  }
  @Ignore
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      String string0 = StringUtils.padLeft("", (-755), '2');
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '2';
      String string1 = StringUtils.escapeString("", charArray0, 'o');
      assertArrayEquals(new char[] {'2'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      MockFile mockFile0 = new MockFile("rcmod");
      assertNotNull(mockFile0);
      
      StringUtils.printToFileLn((File) mockFile0, "Ny=c@uh", false);
      assertEquals(8L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("rcmod", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("rcmod", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "Ny=c@uh";
      stringArray0[3] = "";
      stringArray0[4] = "*_uk";
      stringArray0[5] = "rcmod";
      Properties properties0 = StringUtils.argsToPropertiesWithResolve(stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Class<StringUtils> class0 = StringUtils.class;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "!nl}";
      stringArray0[1] = "!nl}";
      stringArray0[2] = "`NxN SzB";
      stringArray0[3] = "!nl}";
      stringArray0[4] = "<";
      Object object2 = StringUtils.columnStringToObject((Class) class0, "!nl}", "!nl}", stringArray0);
      assertEquals(5, stringArray0.length);
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      
      objectArray0[3] = object3;
      Class<String> class1 = String.class;
      RegexStringFilter regexStringFilter0 = new RegexStringFilter("e2K");
      assertNotNull(regexStringFilter0);
      
      Pattern pattern0 = regexStringFilter0.pattern;
      assertEquals(0, pattern0.flags());
      assertEquals("e2K", pattern0.toString());
      assertEquals("e2K", pattern0.pattern());
      assertNotNull(pattern0);
      
      try { 
        StringUtils.columnStringToObject((Class<?>) class1, "`NxN SzB", pattern0, stringArray0);
        fail("Expecting exception: NoSuchFieldException");
      
      } catch(NoSuchFieldException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = StringUtils.truncate(923, 923, 923);
      assertNotNull(string0);
      assertEquals("0", string0);
      
      String string1 = StringUtils.getBaseName("", "\u00CB");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[][] stringArray0 = new String[9][7];
      String[] stringArray1 = new String[4];
      stringArray1[0] = "0";
      stringArray1[1] = "";
      stringArray1[2] = "\u00CB";
      stringArray1[3] = "";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[1];
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[7];
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      
      stringArray3[0] = "0";
      stringArray3[1] = "";
      stringArray3[2] = "";
      stringArray3[3] = "";
      stringArray3[4] = "";
      stringArray3[5] = "UnE?~)5lfQ";
      stringArray3[6] = "\u00CB";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[1];
      assertFalse(stringArray4.equals((Object)stringArray1));
      assertFalse(stringArray4.equals((Object)stringArray2));
      assertFalse(stringArray4.equals((Object)stringArray3));
      
      stringArray4[0] = "";
      stringArray0[3] = stringArray4;
      String[] stringArray5 = new String[9];
      assertFalse(stringArray5.equals((Object)stringArray1));
      assertFalse(stringArray5.equals((Object)stringArray2));
      assertFalse(stringArray5.equals((Object)stringArray4));
      assertFalse(stringArray5.equals((Object)stringArray3));
      
      stringArray5[0] = "";
      stringArray5[1] = "";
      stringArray5[2] = "";
      stringArray5[3] = "";
      stringArray5[4] = "UnE?~)5lfQ";
      stringArray5[5] = "0";
      stringArray5[6] = "";
      stringArray5[7] = "\u00CB";
      stringArray5[8] = "UnE?~)5lfQ";
      stringArray0[4] = stringArray5;
      String[] stringArray6 = new String[3];
      assertFalse(stringArray6.equals((Object)stringArray3));
      assertFalse(stringArray6.equals((Object)stringArray4));
      assertFalse(stringArray6.equals((Object)stringArray2));
      assertFalse(stringArray6.equals((Object)stringArray5));
      assertFalse(stringArray6.equals((Object)stringArray1));
      
      stringArray6[0] = "";
      stringArray6[1] = "0";
      stringArray6[2] = "";
      stringArray0[5] = stringArray6;
      String[] stringArray7 = new String[4];
      assertFalse(stringArray7.equals((Object)stringArray4));
      assertFalse(stringArray7.equals((Object)stringArray5));
      assertFalse(stringArray7.equals((Object)stringArray3));
      assertFalse(stringArray7.equals((Object)stringArray6));
      assertFalse(stringArray7.equals((Object)stringArray1));
      assertFalse(stringArray7.equals((Object)stringArray2));
      
      stringArray7[0] = "";
      stringArray7[1] = "";
      stringArray7[2] = "";
      stringArray7[3] = "UnE?~)5lfQ";
      stringArray0[6] = stringArray7;
      String[] stringArray8 = new String[9];
      assertFalse(stringArray8.equals((Object)stringArray3));
      assertFalse(stringArray8.equals((Object)stringArray4));
      assertFalse(stringArray8.equals((Object)stringArray7));
      assertFalse(stringArray8.equals((Object)stringArray6));
      assertFalse(stringArray8.equals((Object)stringArray5));
      assertFalse(stringArray8.equals((Object)stringArray1));
      assertFalse(stringArray8.equals((Object)stringArray2));
      
      stringArray8[0] = "";
      stringArray8[1] = "\u00CB";
      stringArray8[2] = "";
      stringArray8[3] = "UnE?~)5lfQ";
      stringArray8[4] = "";
      stringArray8[5] = "0";
      stringArray8[6] = "ocirc";
      stringArray8[7] = "";
      stringArray8[8] = "UnE?~)5lfQ";
      stringArray0[7] = stringArray8;
      String[] stringArray9 = new String[0];
      assertFalse(stringArray9.equals((Object)stringArray7));
      assertFalse(stringArray9.equals((Object)stringArray6));
      assertFalse(stringArray9.equals((Object)stringArray3));
      assertFalse(stringArray9.equals((Object)stringArray8));
      assertFalse(stringArray9.equals((Object)stringArray5));
      assertFalse(stringArray9.equals((Object)stringArray4));
      assertFalse(stringArray9.equals((Object)stringArray1));
      assertFalse(stringArray9.equals((Object)stringArray2));
      
      stringArray0[8] = stringArray9;
      String string2 = StringUtils.makeHTMLTable(stringArray0, stringArray8, stringArray8);
      assertEquals(9, stringArray0.length);
      assertEquals(9, stringArray8.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(stringArray8.equals((Object)stringArray3));
      assertFalse(stringArray8.equals((Object)stringArray9));
      assertFalse(stringArray8.equals((Object)stringArray4));
      assertFalse(stringArray8.equals((Object)stringArray7));
      assertFalse(stringArray8.equals((Object)stringArray6));
      assertFalse(stringArray8.equals((Object)stringArray5));
      assertFalse(stringArray8.equals((Object)stringArray1));
      assertFalse(stringArray8.equals((Object)stringArray2));
      assertNotSame(stringArray8, stringArray3);
      assertNotSame(stringArray8, stringArray9);
      assertNotSame(stringArray8, stringArray4);
      assertNotSame(stringArray8, stringArray7);
      assertNotSame(stringArray8, stringArray6);
      assertNotSame(stringArray8, stringArray5);
      assertNotSame(stringArray8, stringArray1);
      assertNotSame(stringArray8, stringArray2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        StringUtils.trim((String) null, 440);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[][] stringArray0 = new String[8][0];
      String[] stringArray1 = new String[5];
      stringArray1[0] = "+bqs.o@|Pb]o@";
      stringArray1[1] = "Oa+,$53E.|-AMN,A";
      stringArray1[2] = "propFileToProperties could not read properties file: ";
      stringArray1[3] = "v{rYJ";
      stringArray1[4] = "";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[0];
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[3];
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      
      stringArray3[0] = "v{rYJ";
      stringArray3[1] = "propFileToProperties could not read properties file: ";
      stringArray3[2] = "propFileToProperties could not read properties file: ";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[6];
      assertFalse(stringArray4.equals((Object)stringArray3));
      assertFalse(stringArray4.equals((Object)stringArray1));
      assertFalse(stringArray4.equals((Object)stringArray2));
      
      stringArray4[0] = "";
      stringArray4[1] = "propFileToProperties could not read properties file: ";
      stringArray4[2] = "Oa+,$53E.|-AMN,A";
      stringArray4[3] = "g3VG";
      stringArray4[4] = "v{rYJ";
      stringArray4[5] = "v{rYJ";
      stringArray0[3] = stringArray4;
      String[] stringArray5 = new String[3];
      assertFalse(stringArray5.equals((Object)stringArray2));
      assertFalse(stringArray5.equals((Object)stringArray3));
      assertFalse(stringArray5.equals((Object)stringArray1));
      assertFalse(stringArray5.equals((Object)stringArray4));
      
      stringArray5[0] = "+bqs.o@|Pb]o@";
      stringArray5[1] = "+bqs.o@|Pb]o@";
      stringArray5[2] = "v{rYJ";
      stringArray0[4] = stringArray5;
      String[] stringArray6 = new String[0];
      assertFalse(stringArray6.equals((Object)stringArray4));
      assertFalse(stringArray6.equals((Object)stringArray5));
      assertFalse(stringArray6.equals((Object)stringArray2));
      assertFalse(stringArray6.equals((Object)stringArray1));
      assertFalse(stringArray6.equals((Object)stringArray3));
      
      stringArray0[5] = stringArray6;
      String[] stringArray7 = new String[5];
      assertFalse(stringArray7.equals((Object)stringArray5));
      assertFalse(stringArray7.equals((Object)stringArray1));
      assertFalse(stringArray7.equals((Object)stringArray3));
      assertFalse(stringArray7.equals((Object)stringArray2));
      assertFalse(stringArray7.equals((Object)stringArray6));
      assertFalse(stringArray7.equals((Object)stringArray4));
      
      stringArray7[0] = "+bqs.o@|Pb]o@";
      stringArray7[1] = "v{rYJ";
      stringArray7[2] = "";
      stringArray7[3] = "propFileToProperties could not read properties file: ";
      stringArray7[4] = "Oa+,$53E.|-AMN,A";
      stringArray0[6] = stringArray7;
      String[] stringArray8 = new String[4];
      assertFalse(stringArray8.equals((Object)stringArray6));
      assertFalse(stringArray8.equals((Object)stringArray2));
      assertFalse(stringArray8.equals((Object)stringArray1));
      assertFalse(stringArray8.equals((Object)stringArray4));
      assertFalse(stringArray8.equals((Object)stringArray7));
      assertFalse(stringArray8.equals((Object)stringArray5));
      assertFalse(stringArray8.equals((Object)stringArray3));
      
      stringArray8[0] = "propFileToProperties could not read properties file: ";
      stringArray8[1] = "not";
      stringArray8[2] = "";
      stringArray8[3] = "";
      stringArray0[7] = stringArray8;
      // Undeclared exception!
      try { 
        StringUtils.makeHTMLTable(stringArray0, stringArray7, stringArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("edu.stanford.nlp.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object[][] objectArray0 = new Object[2][2];
      Object[] objectArray1 = new Object[4];
      Class<TreeGraphNode> class0 = TreeGraphNode.class;
      Pattern pattern0 = Pattern.compile("");
      assertEquals("", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertNotNull(pattern0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      try { 
        StringUtils.columnStringToObject((Class<?>) class0, "", pattern0, stringArray0);
        fail("Expecting exception: InstantiationException");
      
      } catch(InstantiationException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = "(PcXsf\"[l";
      stringArray0[0] = "(PcXsf\"[l";
      stringArray0[1] = "C9xA DV0";
      stringArray0[2] = "";
      stringArray0[3] = "),3yXE";
      stringArray0[4] = "G";
      stringArray0[5] = "row";
      stringArray0[6] = "L}=(B<<+JXujX-";
      stringArray0[7] = "! JY|;_k";
      stringArray0[8] = "";
      String string1 = StringUtils.toCSVString(stringArray0);
      assertEquals(9, stringArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"(PcXsf\"\"[l\",\"C9xA DV0\",\"\",\"),3yXE\",\"G\",\"row\",\"L}=(B<<+JXujX-\",\"! JY|;_k\",\"\"", string1);
      
      SemanticGraph semanticGraph0 = new SemanticGraph();
      assertNotNull(semanticGraph0);
      assertFalse(SemanticGraph.addSRLArcs);
      
      List<String> list0 = semanticGraph0.getComments();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains("G"));
      assertFalse(SemanticGraph.addSRLArcs);
      
      IndexedWord indexedWord0 = IndexedWord.NO_WORD;
      assertEquals(0, indexedWord0.copyCount());
      assertEquals(3, indexedWord0.size());
      assertNotNull(indexedWord0);
      
      // Undeclared exception!
      try { 
        semanticGraph0.attachedNegatedVerb(indexedWord0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.semgraph.SemanticGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 933;
      int int1 = 740;
      String string0 = StringUtils.padLeft(933, 740);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[7];
      stringArrayjava.lang.Integer@0000000001";
      stringArrayjava.lang.Integer@0000000001";
      stringArray0[2] = "g}K1-U2egx\"pV96y";
      stringArrayjava.lang.Integer@0000000001";
      stringArray0[4] = "!Q";
      stringArrayjava.lang.Integer@0000000001";
      stringArrayjava.lang.Integer@0000000001";
      Map<String, Object> map0 = StringUtils.parseCommandLineArguments(stringArray0, false);
      assertEquals(7, stringArray0.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      Supplier<List<CharBuffer>> supplier0 = (Supplier<List<CharBuffer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      Supplier<Map<CharBuffer, Integer>> supplier1 = (Supplier<Map<CharBuffer, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      HashIndex<CharBuffer> hashIndex0 = new HashIndex<CharBuffer>(supplier0, supplier1);
      assertFalse(hashIndex0.isLocked());
      assertNotNull(hashIndex0);
      
      DeltaIndex<CharBuffer> deltaIndex0 = null;
      try {
        deltaIndex0 = new DeltaIndex<CharBuffer>(hashIndex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.HashIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 0;
      Collection<String> collection0 = StringUtils.getCharacterNgrams("", 0, 0);
      assertNotNull(collection0);
      assertFalse(collection0.contains(""));
      
      String[] stringArray0 = StringUtils.splitOnChar("", 'E');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.longestCommonSubstring("", "oA0HcPJ:'^=5Y*xp");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string0 = StringUtils.getShortClassName("oA0HcPJ:'^=5Y*xp");
      assertNotNull(string0);
      assertEquals("String", string0);
      
      String string1 = "pt";
      Locale locale0 = Locale.US;
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      
      String[] stringArray1 = new String[4];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "oA0HcPJ:'^=5Y*xp";
      stringArray1[1] = "String";
      stringArray1[2] = "String";
      stringArray1[3] = "oA0HcPJ:'^=5Y*xp";
      Properties properties0 = StringUtils.argsToProperties(stringArray1);
      assertEquals(4, stringArray1.length);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotNull(properties0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      // Undeclared exception!
      try { 
        NERClassifierCombiner.createNERClassifierCombiner("pt", set0, properties0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Couldn't load classifier from edu/stanford/nlp/models/ner/english.all.3class.distsim.crf.ser.gz
         //
         verifyException("edu.stanford.nlp.ie.NERClassifierCombiner", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = StringUtils.getBaseName("8l,C");
      assertNotNull(string0);
      assertEquals("8l,C", string0);
      
      Properties properties0 = StringUtils.stringToProperties("props");
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertNotNull(properties0);
      
      try { 
        NERClassifierCombiner.getClassifier("8l,C", properties0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unable to open \"8l,C\" as class path, filename or URL
         //
         verifyException("edu.stanford.nlp.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "MIf{&!IHJPsTL7jLp";
      int int0 = StringUtils.nthIndex("MIf{&!IHJPsTL7jLp", '#', 3398);
      assertEquals((-1), int0);
      
      String string1 = "";
      int int1 = StringUtils.editDistance("", "MIf{&!IHJPsTL7jLp");
      assertFalse(int1 == int0);
      assertEquals(17, int1);
      
      // Undeclared exception!
      try { 
        StringUtils.isCapitalized("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      WordFactory wordFactory0 = new WordFactory();
      assertNotNull(wordFactory0);
      
      StringLabel stringLabel0 = new StringLabel();
      assertEquals((-1), stringLabel0.beginPosition());
      assertNull(stringLabel0.value());
      assertEquals((-1), stringLabel0.endPosition());
      assertNotNull(stringLabel0);
      
      Word word0 = (Word)wordFactory0.newLabel((Label) stringLabel0);
      assertEquals((-1), stringLabel0.beginPosition());
      assertNull(stringLabel0.value());
      assertEquals((-1), stringLabel0.endPosition());
      assertNull(word0.word());
      assertNull(word0.value());
      assertEquals((-1), word0.endPosition());
      assertEquals((-1), word0.beginPosition());
      assertNotNull(word0);
      
      LabeledScoredTreeNode labeledScoredTreeNode0 = new LabeledScoredTreeNode(word0);
      assertEquals((-1), stringLabel0.beginPosition());
      assertNull(stringLabel0.value());
      assertEquals((-1), stringLabel0.endPosition());
      assertNull(word0.word());
      assertNull(word0.value());
      assertEquals((-1), word0.endPosition());
      assertEquals((-1), word0.beginPosition());
      assertEquals(Double.NaN, labeledScoredTreeNode0.score(), 0.01);
      assertNotNull(labeledScoredTreeNode0);
      
      ArrayList<CoreLabel> arrayList0 = new ArrayList<CoreLabel>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ArrayList<CoreLabel> arrayList1 = labeledScoredTreeNode0.yieldHasWord(arrayList0);
      assertEquals((-1), stringLabel0.beginPosition());
      assertNull(stringLabel0.value());
      assertEquals((-1), stringLabel0.endPosition());
      assertNull(word0.word());
      assertNull(word0.value());
      assertEquals((-1), word0.endPosition());
      assertEquals((-1), word0.beginPosition());
      assertEquals(Double.NaN, labeledScoredTreeNode0.score(), 0.01);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      assertSame(arrayList0, arrayList1);
      assertSame(arrayList1, arrayList0);
      
      ArrayList<CoreLabel> arrayList2 = labeledScoredTreeNode0.yieldHasWord(arrayList1);
      assertEquals((-1), stringLabel0.beginPosition());
      assertNull(stringLabel0.value());
      assertEquals((-1), stringLabel0.endPosition());
      assertNull(word0.word());
      assertNull(word0.value());
      assertEquals((-1), word0.endPosition());
      assertEquals((-1), word0.beginPosition());
      assertEquals(Double.NaN, labeledScoredTreeNode0.score(), 0.01);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(arrayList1.isEmpty());
      assertEquals(2, arrayList1.size());
      assertFalse(arrayList2.isEmpty());
      assertEquals(2, arrayList2.size());
      assertNotNull(arrayList2);
      assertSame(arrayList0, arrayList1);
      assertSame(arrayList0, arrayList2);
      assertSame(arrayList1, arrayList0);
      assertSame(arrayList1, arrayList2);
      assertSame(arrayList2, arrayList1);
      assertSame(arrayList2, arrayList0);
      
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 9);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Class<Object> class3 = Object.class;
      classArray0[3] = class3;
      Class<Object> class4 = Object.class;
      classArray0[4] = class4;
      Class<Object> class5 = Object.class;
      classArray0[5] = class5;
      Class<Object> class6 = Object.class;
      classArray0[6] = class6;
      Class<Object> class7 = Object.class;
      classArray0[7] = class7;
      Class<Object> class8 = Object.class;
      classArray0[8] = class8;
      Morphology morphology0 = new Morphology();
      assertNotNull(morphology0);
      
      // Undeclared exception!
      try { 
        StringUtils.joinMultipleFields((List<? extends CoreMap>) arrayList2, (Class[]) classArray0, (Function<Object, String>) morphology0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // edu.stanford.nlp.ling.Word cannot be cast to edu.stanford.nlp.util.CoreMap
         //
         verifyException("edu.stanford.nlp.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = StringUtils.isCapitalized("]]GIHn{ ");
      assertFalse(boolean0);
      
      Redwood.RedwoodChannels redwood_RedwoodChannels0 = new Redwood.RedwoodChannels((Object[]) null);
      assertNotNull(redwood_RedwoodChannels0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "]]GIHn{ ";
      stringArray0[1] = "]]GIHn{ ";
      stringArray0[2] = "]]GIHn{ ";
      stringArray0[3] = "]]GIHn{ ";
      stringArray0[4] = "]]GIHn{ ";
      stringArray0[5] = "]]GIHn{ ";
      // Undeclared exception!
      try { 
        StringUtils.logInvocationString(redwood_RedwoodChannels0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.logging.Redwood$RedwoodChannels", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = StringUtils.nthIndex("", '/', 1578);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      String string0 = StringUtils.searchAndReplace("", "edu.stanford.nlp.trees.NamedDependency", "dN<TF5?<r Gog");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CategoryWordTag categoryWordTag0 = new CategoryWordTag("y#{l,%>7dDXu", "", "dN<TF5?<r Gog");
      assertEquals("y#{l,%>7dDXu", categoryWordTag0.value());
      assertEquals((-1), categoryWordTag0.endPosition());
      assertEquals("", categoryWordTag0.word());
      assertEquals("dN<TF5?<r Gog", categoryWordTag0.tag());
      assertEquals("y#{l,%>7dDXu", categoryWordTag0.category());
      assertEquals((-1), categoryWordTag0.beginPosition());
      assertNotNull(categoryWordTag0);
      assertTrue(CategoryWordTag.printWordTag);
      assertFalse(CategoryWordTag.suppressTerminalDetails);
      
      String string1 = StringUtils.trimWithEllipsis((Object) categoryWordTag0, 1958);
      assertEquals("y#{l,%>7dDXu", categoryWordTag0.value());
      assertEquals((-1), categoryWordTag0.endPosition());
      assertEquals("", categoryWordTag0.word());
      assertEquals("dN<TF5?<r Gog", categoryWordTag0.tag());
      assertEquals("y#{l,%>7dDXu", categoryWordTag0.category());
      assertEquals((-1), categoryWordTag0.beginPosition());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(CategoryWordTag.printWordTag);
      assertFalse(CategoryWordTag.suppressTerminalDetails);
  }
  @Ignore
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ObjectBank.PathToFileFunction objectBank_PathToFileFunction0 = new ObjectBank.PathToFileFunction();
      assertNotNull(objectBank_PathToFileFunction0);
      
      File file0 = objectBank_PathToFileFunction0.apply("edu.stanford.nlp.ling.CoreAnnotations$ExceptionAnnotation");
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertEquals("edu.stanford.nlp.ling.CoreAnnotations$ExceptionAnnotation", file0.toString());
      assertNull(file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.exists());
      assertEquals("edu.stanford.nlp.ling.CoreAnnotations$ExceptionAnnotation", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile(file0, "edu.stanford.nlp.ling.CoreAnnotations$ExceptionAnnotation");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.equals((Object)file0));
      
      StringUtils.printToFile((File) mockFile0, "edu.stanford.nlp.ling.CoreAnnotations$ExceptionAnnotation", false);
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("edu.stanford.nlp.ling.CoreAnnotations$ExceptionAnnotation", file0.toString());
      assertNull(file0.getParent());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("edu.stanford.nlp.ling.CoreAnnotations$ExceptionAnnotation", file0.getName());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/samu/GitHub/CoreNLP/edu.stanford.nlp.ling.CoreAnnotations$ExceptionAnnotation/edu.stanford.nlp.ling.CoreAnnotations$ExceptionAnnotation", mockFile0.toString());
      assertEquals(57L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals("edu.stanford.nlp.ling.CoreAnnotations$ExceptionAnnotation", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/samu/GitHub/CoreNLP/edu.stanford.nlp.ling.CoreAnnotations$ExceptionAnnotation", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
      
      AbstractSequenceClassifier<CoreLabel>[] abstractSequenceClassifierArray0 = (AbstractSequenceClassifier<CoreLabel>[]) Array.newInstance(AbstractSequenceClassifier.class, 0);
      NERClassifierCombiner nERClassifierCombiner0 = null;
      try {
        nERClassifierCombiner0 = new NERClassifierCombiner(abstractSequenceClassifierArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "printWeights";
      stringArray0[1] = "\u00E7";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "roadrun";
      stringArray0[5] = "T,3";
      stringArray0[6] = "";
      stringArray0[7] = "<";
      stringArray0[8] = "M\"OaL5>-";
      int int0 = StringUtils.levenshteinDistance(stringArray0, stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 879;
      // Undeclared exception!
      try { 
        StringUtils.trimWithEllipsis((String) null, 879);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.stripNonAlphaNumerics("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        StringUtils.mapStringToMap("je{(l/W");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Map<String, String> map0 = StringUtils.decodeMap("");
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      // Undeclared exception!
      try { 
        StringUtils.parseCommandLineArguments(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Rjb{B[";
      stringArray0[1] = "(YM;MY-1+G5";
      stringArray0[2] = "\u00D3";
      stringArray0[3] = "p.";
      stringArray0[4] = "0lukT>)";
      String string0 = StringUtils.join(stringArray0, "0lukT>)");
      assertEquals(5, stringArray0.length);
      assertNotNull(string0);
      assertEquals("Rjb{B[0lukT>)(YM;MY-1+G50lukT>)\u00D30lukT>)p.0lukT>)0lukT>)", string0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, 603, 603, "Rjb{B[");
      assertEquals(5, stringArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "Rjb{B[";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "\u00D3";
      objectArray0[4] = (Object) "\u00D3";
      objectArray0[5] = (Object) "Rjb{B[";
      String string2 = StringUtils.join(objectArray0, 113, 0, "Rjb{B[");
      assertEquals(6, objectArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "set";
      stringArray0[2] = "[D";
      MapFactory<CoreLabel, Pattern> mapFactory0 = MapFactory.weakHashMapFactory();
      assertNotNull(mapFactory0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Map<String, Integer> map0 = mapFactory0.setMap((Map<String, Integer>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      Properties properties0 = StringUtils.argsToProperties(stringArray0, map0);
      assertEquals(3, stringArray0.length);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotNull(properties0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = (-1340);
      Pattern pattern0 = Pattern.compile("", (-1340));
      assertEquals((-1340), pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertNotNull(pattern0);
      
      String[] stringArray0 = pattern0.split((CharSequence) "");
      assertEquals(1, stringArray0.length);
      assertEquals((-1340), pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertNotNull(stringArray0);
      
      Stream<String> stream0 = pattern0.splitAsStream("");
      assertEquals((-1340), pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertNotNull(stream0);
      
      List<String> list0 = StringUtils.regexGroups(pattern0, "");
      assertEquals((-1340), pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains(""));
      
      Pattern pattern1 = Pattern.compile("");
      assertEquals("", pattern1.toString());
      assertEquals("", pattern1.pattern());
      assertEquals(0, pattern1.flags());
      assertNotNull(pattern1);
      assertFalse(pattern1.equals((Object)pattern0));
      assertNotSame(pattern1, pattern0);
      
      int int1 = 0;
      Stream<String> stream1 = pattern0.splitAsStream("");
      assertEquals((-1340), pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertNotNull(stream1);
      assertFalse(pattern0.equals((Object)pattern1));
      assertFalse(stream1.equals((Object)stream0));
      assertNotSame(pattern0, pattern1);
      assertNotSame(stream1, stream0);
      
      String[] stringArray1 = pattern0.split((CharSequence) ";;HG`.=!v+Ezv@8", 0);
      assertEquals(15, stringArray1.length);
      assertEquals((-1340), pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertNotNull(stringArray1);
      assertFalse(pattern0.equals((Object)pattern1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(pattern0, pattern1);
      assertNotSame(stringArray1, stringArray0);
      
      Pattern pattern2 = Pattern.compile(";;HG`.=!v+Ezv@8");
      assertEquals(0, pattern2.flags());
      assertNotNull(pattern2);
      assertFalse(pattern2.equals((Object)pattern0));
      assertFalse(pattern2.equals((Object)pattern1));
      assertNotSame(pattern2, pattern0);
      assertNotSame(pattern2, pattern1);
      
      // Undeclared exception!
      try { 
        StringUtils.propFileToLinkedHashMap(";;HG`.=!v+Ezv@8", (Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "8n0t-3DnWl";
      stringArray0[1] = "l]*y%=L|~D%K[*YXn2(";
      stringArray0[2] = "*6 ,Pq!";
      stringArray0[3] = "";
      stringArray0[4] = "^[p{Upper}]+$";
      // Undeclared exception!
      try { 
        StringUtils.parseCommandLineArguments(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "RF|9";
      String string1 = "laquo";
      int int0 = StringUtils.longestCommonSubstring("RF|9", "laquo");
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "laquo";
      Class<WordTag> class0 = WordTag.class;
      // Undeclared exception!
      try { 
        Pattern.compile((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "adverb";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      Properties properties0 = StringUtils.argsToPropertiesWithResolve(stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      String string0 = StringUtils.getShortClassName("wordFunction");
      assertNotNull(string0);
      assertEquals("String", string0);
      
      AbstractMap.SimpleEntry<String, IndexedWord>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<String, IndexedWord>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 7);
      AbstractMap.SimpleImmutableEntry<String, IndexedWord> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, IndexedWord>("", (IndexedWord) null);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<String, IndexedWord> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, IndexedWord>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry0;
      AbstractMap.SimpleEntry<String, IndexedWord> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, IndexedWord>("wordFunction", (IndexedWord) null);
      assertNotNull(abstractMap_SimpleEntry1);
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      
      abstractMap_SimpleEntryArray0[1] = abstractMap_SimpleEntry1;
      AbstractMap.SimpleEntry<String, IndexedWord> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<String, IndexedWord>("b`FcIpw)", (IndexedWord) null);
      assertNotNull(abstractMap_SimpleEntry2);
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
      
      abstractMap_SimpleEntryArray0[2] = abstractMap_SimpleEntry2;
      AbstractMap.SimpleEntry<String, IndexedWord> abstractMap_SimpleEntry3 = new AbstractMap.SimpleEntry<String, IndexedWord>("adverb", (IndexedWord) null);
      assertNotNull(abstractMap_SimpleEntry3);
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry2));
      
      abstractMap_SimpleEntryArray0[3] = abstractMap_SimpleEntry3;
      AbstractMap.SimpleEntry<String, IndexedWord> abstractMap_SimpleEntry4 = new AbstractMap.SimpleEntry<String, IndexedWord>("adverb", (IndexedWord) null);
      assertNotNull(abstractMap_SimpleEntry4);
      assertTrue(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry2));
      
      abstractMap_SimpleEntryArray0[4] = abstractMap_SimpleEntry4;
      AbstractMap.SimpleEntry<String, IndexedWord> abstractMap_SimpleEntry5 = new AbstractMap.SimpleEntry<String, IndexedWord>("", (IndexedWord) null);
      assertNotNull(abstractMap_SimpleEntry5);
      assertTrue(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry1));
      
      abstractMap_SimpleEntryArray0[5] = abstractMap_SimpleEntry5;
      AbstractMap.SimpleEntry<String, IndexedWord> abstractMap_SimpleEntry6 = new AbstractMap.SimpleEntry<String, IndexedWord>(abstractMap_SimpleEntry2);
      assertNotNull(abstractMap_SimpleEntry6);
      assertTrue(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry5));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry5));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry4));
      
      abstractMap_SimpleEntryArray0[6] = abstractMap_SimpleEntry6;
      int int0 = StringUtils.levenshteinDistance(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray0);
      assertEquals(7, abstractMap_SimpleEntryArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "";
      String string1 = "([0-9]+):([0-9]+)";
      // Undeclared exception!
      try { 
        StringUtils.printToFile("", "([0-9]+):([0-9]+)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Exception in printToFile /home/samu/GitHub/CoreNLP
         //
         verifyException("edu.stanford.nlp.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "Encountered key without value";
      // Undeclared exception!
      try { 
        StringUtils.mapStringToArray("Encountered key without value");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ArrayList<ArrayCoreMap> arrayList0 = new ArrayList<ArrayCoreMap>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0);
      String string0 = StringUtils.joinMultipleFields((List<? extends CoreMap>) arrayList0, (Class[]) classArray0, "Icirc", "qm'1+,e5(~m", "", 65, 0);
      assertEquals(0, classArray0.length);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      boolean boolean0 = StringUtils.lookingAt("", "");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      int int0 = StringUtils.levenshteinDistance(objectArray0, objectArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(0, int0);
      
      String[][] stringArray0 = new String[1][2];
      String[] stringArray1 = new String[1];
      stringArray1[0] = "";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[8];
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "";
      stringArray2[1] = "";
      stringArray2[2] = "";
      stringArray2[3] = "";
      stringArray2[4] = "";
      stringArray2[5] = "";
      stringArray2[6] = "";
      stringArray2[7] = "";
      String string0 = StringUtils.makeHTMLTable(stringArray0, stringArray1, stringArray2);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertEquals(8, stringArray2.length);
      assertNotNull(string0);
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals("<table class=\"auto\" border=\"1\" cellspacing=\"0\">\n<tr>\n<td></td>\n<td class=\"label\"></td>\n</tr>\n<tr>\n<td class=\"label\"></td>\n<td class=\"data\"></td>\n</tr>\n</table>", string0);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray2, stringArray1);
      
      String string1 = StringUtils.padLeft("~\"S[7DW.X,", 0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("~\"S[7DW.X,", string1);
      
      List<List<String>> list0 = StringUtils.splitFieldsFast("gDM#mAU:9+@7-Z9", (String) null);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      BufferedReader bufferedReader0 = null;
      try {
        bufferedReader0 = new BufferedReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "|RbP5";
      String string1 = StringUtils.pad("|RbP5", 72);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("|RbP5                                                                   ", string1);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "|RbP5                                                                   ";
      objectArray0[1] = (Object) "|RbP5                                                                   ";
      Class<CoreLabel> class0 = CoreLabel.class;
      Pattern pattern0 = Pattern.compile("|RbP5");
      assertEquals("|RbP5", pattern0.toString());
      assertEquals("|RbP5", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertNotNull(pattern0);
      
      // Undeclared exception!
      try { 
        StringUtils.columnStringToObject((Class<?>) class0, "", pattern0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = StringUtils.toAscii("!`Q*$<ZTE}:0hru`Le");
      assertNotNull(string0);
      assertEquals("!`Q*$<ZTE}:0hru`Le", string0);
      
      String string1 = StringUtils.pad("!`Q*$<ZTE}:0hru`Le", 1139);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNullOrEmpty("Ov`p#%Xd^,$&w");
      assertFalse(boolean0);
      
      String string2 = StringUtils.trimWithEllipsis(string1, 1139);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.getBaseName("Ov`p#%Xd^,$&w", "bLpvPSDDJ~!'@|$Vv");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Ov`p#%Xd^,$&w", string3);
      
      boolean boolean1 = StringUtils.find("L*J/,Ax=", "bisequenceClassifierPropEn");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Ov`p#%Xd^,$&w";
      Redwood.RedwoodChannels redwood_RedwoodChannels0 = new Redwood.RedwoodChannels(objectArray0);
      assertEquals(1, objectArray0.length);
      assertNotNull(redwood_RedwoodChannels0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = string2;
      StringUtils.logInvocationString(redwood_RedwoodChannels0, stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.padLeftOrTrim(string1, 100);
      assertNotNull(string4);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("                                                                                                    ", string4);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = StringUtils.fileNameClean("\u00F2");
      assertNotNull(string0);
      assertEquals("x242x", string0);
      
      BasicDocument<ArrayCoreMap> basicDocument0 = new BasicDocument<ArrayCoreMap>();
      assertNull(basicDocument0.originalText());
      assertTrue(basicDocument0.isEmpty());
      assertEquals("", basicDocument0.title());
      assertEquals(0, basicDocument0.size());
      assertNotNull(basicDocument0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "\u00E9", uRLStreamHandler0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("ftp", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.toString());
      assertNotNull(uRL1);
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      // Undeclared exception!
      try { 
        basicDocument0.init(uRL1, "Could not parse ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.valueSplit("{~QHt;1?j7x%qJjs", "", "{~QHt;1?j7x%qJjs");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition
         // {~QHt;1?j7x%qJjs
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "~d2@oTpVOhMD,<";
      stringArray0[2] = "0^;''";
      // Undeclared exception!
      try { 
        StringUtils.argsToMap(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
  @Ignore
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "\u00C2";
      StringUtils.printToFile("\u00C2", "\u00C2");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "\u00C2";
      objectArray0[1] = (Object) "\u00C2";
      objectArray0[2] = (Object) "\u00C2";
      objectArray0[3] = (Object) "\u00C2";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "\u00C2";
      objectArray0[6] = (Object) "\u00C2";
      Redwood.RedwoodChannels redwood_RedwoodChannels0 = new Redwood.RedwoodChannels(objectArray0);
      assertEquals(7, objectArray0.length);
      assertNotNull(redwood_RedwoodChannels0);
      
      String string1 = "A\"Q\"mlV,_3RqD;%";
      redwood_RedwoodChannels0.log(objectArray0);
      assertEquals(7, objectArray0.length);
      
      Word word0 = new Word("A\"Q\"mlV,_3RqD;%", 0, (-3893));
      assertEquals(0, word0.beginPosition());
      assertEquals("A\"Q\"mlV,_3RqD;%", word0.value());
      assertEquals("A\"Q\"mlV,_3RqD;%", word0.word());
      assertEquals((-3893), word0.endPosition());
      assertNotNull(word0);
      
      redwood_RedwoodChannels0.prettyLog((Object) word0);
      assertEquals(7, objectArray0.length);
      assertEquals(0, word0.beginPosition());
      assertEquals("A\"Q\"mlV,_3RqD;%", word0.value());
      assertEquals("A\"Q\"mlV,_3RqD;%", word0.word());
      assertEquals((-3893), word0.endPosition());
      
      redwood_RedwoodChannels0.logf("\u00C2", objectArray0);
      assertEquals(7, objectArray0.length);
      
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        StringUtils.logInvocationString(redwood_RedwoodChannels0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      int int0 = StringUtils.longestCommonSubstring("", "");
      assertEquals(0, int0);
      
      Collection<String> collection0 = StringUtils.getCharacterNgrams("pK&bfx>0/G(q", 0, 0);
      assertNotNull(collection0);
      assertFalse(collection0.contains(""));
      
      String string2 = "$CN0X1K";
      // Undeclared exception!
      try { 
        StringUtils.printToFile((File) null, "$CN0X1K", false, false, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        StringUtils.splitOnCharWithQuoting((String) null, 's', 's', 's');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String[] stringArray0 = StringUtils.decodeArray("?ah!J<HlC@is!h`.0");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Vector<CoreLabel> vector0 = new Vector<CoreLabel>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      int int0 = 713;
      // Undeclared exception!
      try { 
        vector0.removeElementAt(713);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 713 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = StringUtils.fileNameClean("\u00A9");
      assertNotNull(string0);
      assertEquals("x169x", string0);
      
      int int0 = StringUtils.nthIndex("m<d;6g6$fQNpa8C", 'h', 1140);
      assertEquals((-1), int0);
      
      TrueCasingForNISTDocumentReaderAndWriter.LineToTrueCasesParser trueCasingForNISTDocumentReaderAndWriter_LineToTrueCasesParser0 = new TrueCasingForNISTDocumentReaderAndWriter.LineToTrueCasesParser();
      assertNotNull(trueCasingForNISTDocumentReaderAndWriter_LineToTrueCasesParser0);
      
      List<CoreLabel> list0 = trueCasingForNISTDocumentReaderAndWriter_LineToTrueCasesParser0.apply("");
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      Class<Integer> class0 = Integer.class;
      String string1 = StringUtils.joinFields(list0, class0, (String) null, "\u00A9", (-986), (-986));
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        StringUtils.argsToProperties((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Collection<String> collection0 = StringUtils.getCharacterNgrams("NO", (-3037), (-3037));
      assertNotNull(collection0);
      assertFalse(collection0.contains("NO"));
      
      // Undeclared exception!
      try { 
        StringUtils.trim("V00j{Xy9h$Cg", (-3037));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = "W]g`Cp_hv)";
      // Undeclared exception!
      try { 
        StringUtils.propFileToProperties("W]g`Cp_hv)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // propFileToProperties could not read properties file: W]g`Cp_hv)
         //
         verifyException("edu.stanford.nlp.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitOnChar("PVkwW", 'x');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.valueSplit("PVkwW", "W~", "W~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // valueSplit: W~ doesn't match PVkwW
         //
         verifyException("edu.stanford.nlp.util.StringUtils", e);
      }
  }
  @Ignore
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ObjectBank.PathToFileFunction objectBank_PathToFileFunction0 = new ObjectBank.PathToFileFunction();
      assertNotNull(objectBank_PathToFileFunction0);
      
      File file0 = objectBank_PathToFileFunction0.apply("");
      assertEquals("", file0.getName());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertNull(file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals("", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      StringUtils.printToFile(file0, "oacute", false, false, "");
      assertEquals("", file0.getName());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertNull(file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals("", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = StringUtils.padLeft(0.0, 1335);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = "";
      stringArray0[0] = "";
      stringArray0[1] = "\u6B64\u524D";
      stringArray0[2] = ".";
      stringArray0[3] = "";
      stringArray0[4] = "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure$ExtraTreeDepFilter";
      stringArray0[5] = "";
      StringUtils.splitOnChar(stringArray0, "", 'G');
      assertEquals(6, stringArray0.length);
      
      Redwood.RedwoodChannels redwood_RedwoodChannels0 = new Redwood.RedwoodChannels(stringArray0);
      assertEquals(6, stringArray0.length);
      assertNotNull(redwood_RedwoodChannels0);
      
      StringUtils.logInvocationString(redwood_RedwoodChannels0, stringArray0);
      assertEquals(6, stringArray0.length);
      
      MapFactory<String, LabeledWord> mapFactory0 = MapFactory.hashMapFactory();
      assertNotNull(mapFactory0);
      
      // Undeclared exception!
      try { 
        StringUtils.parseCommandLineArguments(stringArray0, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        StringUtils.capitalize("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.printToFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = StringUtils.truncate((-1203), (-1203), (-1203));
      assertNotNull(string0);
      assertEquals("\u0000", string0);
      
      String string1 = StringUtils.escapeJsonString("\u0000");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\\u0000", string1);
      
      String string2 = "";
      int int0 = StringUtils.nthIndex("", '\'', 65535);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isPunct(")'.kB2q`");
      assertFalse(boolean0);
      
      CoreLabel coreLabel0 = new CoreLabel(832);
      assertEquals(0, coreLabel0.size());
      assertNotNull(coreLabel0);
      
      ArrayCoreMap arrayCoreMap0 = new ArrayCoreMap((ArrayCoreMap) coreLabel0);
      assertEquals(0, coreLabel0.size());
      assertEquals(0, arrayCoreMap0.size());
      assertNotNull(arrayCoreMap0);
      
      // Undeclared exception!
      try { 
        StringUtils.toString((CoreMap) arrayCoreMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Class<ArrayCoreMap> class0 = ArrayCoreMap.class;
      String string0 = "R*^Drouf>Es(";
      int int0 = 2214;
      // Undeclared exception!
      try { 
        Pattern.compile("R*^Drouf>Es(", 2214);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 12
         // R*^Drouf>Es(
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String string0 = StringUtils.padLeft("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.longestCommonSubstring("", "");
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.longestCommonSubstring((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.StringUtils", e);
      }
  }
  @Ignore
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitOnChar("P3@Rub>jP6/,#2@,h", '8');
      Object[][] objectArray0 = new Object[4][5];
      objectArray0[0] = (Object[]) stringArray0;
      objectArray0[1] = (Object[]) stringArray0;
      objectArray0[2] = (Object[]) stringArray0;
      objectArray0[3] = (Object[]) stringArray0;
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) "P3@Rub>jP6/,#2@,h";
      objectArray1[1] = (Object) "P3@Rub>jP6/,#2@,h";
      objectArray1[2] = (Object) "P3@Rub>jP6/,#2@,h";
      objectArray1[3] = (Object) "P3@Rub>jP6/,#2@,h";
      Object object0 = new Object();
      objectArray1[4] = object0;
      objectArray1[5] = (Object) "P3@Rub>jP6/,#2@,h";
      StringUtils.makeTextTable(objectArray0, objectArray1, objectArray0[1], 764, 531, true);
      StringUtils.printToFile("p1hA.x]us3A}2n", "P3@Rub>jP6/,#2@,h");
      StringUtils.unescapeHtml3("P3@Rub>jP6/,#2@,h");
      String[][] stringArrayArray0 = null;
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        StringUtils.makeHTMLTable((String[][]) null, stringArray1, stringArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.stanford.nlp.util.StringUtils", e);
      }
  }
  @Ignore
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringUtils.split("ordm");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ordm";
      stringArray0[1] = "ordm";
      stringArray0[2] = "ordm";
      stringArray0[3] = "ordm";
      stringArray0[4] = "ordm";
      stringArray0[5] = "ordm";
      stringArray0[6] = "ordm";
      stringArray0[7] = "ysqE^sC}";
      stringArray0[8] = "ordm";
      StringUtils.argsToPropertiesWithResolve(stringArray0);
      StringUtils.printToFile("ordm", "ysqE^sC}");
      StringUtils.repeat("ordm", 712);
      StringUtils.padOrTrim("8QU)PaZ", 712);
      StringUtils.argsToMap(stringArray0);
      // Undeclared exception!
      try { 
        StringUtils.mapStringToMap("ordm");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
