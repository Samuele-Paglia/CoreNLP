/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 06 09:26:33 GMT 2018
 */

package edu.stanford.nlp.util;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.stanford.nlp.ie.AbstractSequenceClassifier;
import edu.stanford.nlp.ie.NERClassifierCombiner;
import edu.stanford.nlp.ling.BasicDocument;
import edu.stanford.nlp.ling.CategoryWordTag;
import edu.stanford.nlp.ling.CoreAnnotations;
import edu.stanford.nlp.ling.CoreLabel;
import edu.stanford.nlp.ling.HasWord;
import edu.stanford.nlp.ling.IndexedWord;
import edu.stanford.nlp.ling.Label;
import edu.stanford.nlp.ling.LabeledWord;
import edu.stanford.nlp.ling.StringLabel;
import edu.stanford.nlp.ling.TaggedWord;
import edu.stanford.nlp.ling.Word;
import edu.stanford.nlp.ling.WordFactory;
import edu.stanford.nlp.ling.WordLemmaTag;
import edu.stanford.nlp.ling.WordTag;
import edu.stanford.nlp.objectbank.ObjectBank;
import edu.stanford.nlp.process.Morphology;
import edu.stanford.nlp.semgraph.SemanticGraph;
import edu.stanford.nlp.sequences.SeqClassifierFlags;
import edu.stanford.nlp.sequences.TrueCasingForNISTDocumentReaderAndWriter;
import edu.stanford.nlp.trees.LabeledScoredTreeNode;
import edu.stanford.nlp.trees.Tree;
import edu.stanford.nlp.trees.TreeGraphNode;
import edu.stanford.nlp.trees.TypedDependency;
import edu.stanford.nlp.util.ArrayCoreMap;
import edu.stanford.nlp.util.CoreMap;
import edu.stanford.nlp.util.DeltaIndex;
import edu.stanford.nlp.util.HashIndex;
import edu.stanford.nlp.util.HashableCoreMap;
import edu.stanford.nlp.util.MapFactory;
import edu.stanford.nlp.util.RegexStringFilter;
import edu.stanford.nlp.util.StringUtils;
import edu.stanford.nlp.util.TypesafeMap;
import edu.stanford.nlp.util.logging.Redwood;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.Reader;
import java.lang.reflect.Array;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.CharBuffer;
import java.nio.file.Path;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

	@Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        StringUtils.isAlpha((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[][] objectArray0 = new Object[2][0];
      Object[] objectArray1 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray1[0] = object0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[0];
      assertFalse(objectArray2.equals((Object)objectArray1));
      
      objectArray0[1] = objectArray2;
      // Undeclared exception!
      try { 
        StringUtils.makeTextTable(objectArray0, objectArray2, objectArray2, 3777, 0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("edu.stanford.nlp.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TreeSet<StringUtils> treeSet0 = new TreeSet<StringUtils>();
      assertNotNull(treeSet0);
      
      String string0 = StringUtils.join((Iterable<StringUtils>) treeSet0, "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Map<String, String> map0 = StringUtils.decodeMap("");
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      String string1 = StringUtils.expandEnvironmentVariables("", map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.padLeft(0, 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.lookingAt(".3>C", "8KKC@L7YZ   ");
      assertFalse(boolean0);
      
      HashIndex<TypedDependency> hashIndex0 = new HashIndex<TypedDependency>(0);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertNotNull(hashIndex0);
      
      DeltaIndex<TypedDependency> deltaIndex0 = new DeltaIndex<TypedDependency>(hashIndex0);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertFalse(deltaIndex0.isLocked());
      assertEquals(0, deltaIndex0.size());
      assertTrue(deltaIndex0.isEmpty());
      assertNotNull(deltaIndex0);
      
      SemanticGraph semanticGraph0 = new SemanticGraph(deltaIndex0);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertFalse(deltaIndex0.isLocked());
      assertEquals(0, deltaIndex0.size());
      assertTrue(deltaIndex0.isEmpty());
      assertNotNull(semanticGraph0);
      assertFalse(SemanticGraph.addSRLArcs);
      
      IndexedWord indexedWord0 = new IndexedWord("", 1074, 0);
      assertEquals(0, indexedWord0.copyCount());
      assertEquals(3, indexedWord0.size());
      assertNotNull(indexedWord0);
      
      IndexedWord indexedWord1 = semanticGraph0.getCommonAncestor(indexedWord0, indexedWord0);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertFalse(deltaIndex0.isLocked());
      assertEquals(0, deltaIndex0.size());
      assertTrue(deltaIndex0.isEmpty());
      assertEquals(0, indexedWord0.copyCount());
      assertEquals(3, indexedWord0.size());
      assertEquals(0, indexedWord1.copyCount());
      assertEquals(3, indexedWord1.size());
      assertNotNull(indexedWord1);
      assertSame(indexedWord0, indexedWord1);
      assertSame(indexedWord1, indexedWord0);
      assertFalse(SemanticGraph.addSRLArcs);
      
      TypedDependency typedDependency0 = mock(TypedDependency.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = deltaIndex0.add(typedDependency0);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertFalse(deltaIndex0.isLocked());
      assertEquals(1, deltaIndex0.size());
      assertFalse(deltaIndex0.isEmpty());
      assertFalse(boolean1 == boolean0);
      assertFalse(hashIndex0.contains(typedDependency0));
      assertTrue(deltaIndex0.contains(typedDependency0));
      assertTrue(boolean1);
      
      LabeledWord labeledWord0 = new LabeledWord("quickstep", indexedWord1);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertFalse(deltaIndex0.isLocked());
      assertEquals(1, deltaIndex0.size());
      assertFalse(deltaIndex0.isEmpty());
      assertEquals(0, indexedWord0.copyCount());
      assertEquals(3, indexedWord0.size());
      assertEquals(0, indexedWord1.copyCount());
      assertEquals(3, indexedWord1.size());
      assertEquals("quickstep", labeledWord0.value());
      assertEquals("quickstep", labeledWord0.word());
      assertEquals((-1), labeledWord0.endPosition());
      assertEquals((-1), labeledWord0.beginPosition());
      assertNotNull(labeledWord0);
      assertFalse(hashIndex0.contains(typedDependency0));
      assertTrue(deltaIndex0.contains(typedDependency0));
      assertFalse(SemanticGraph.addSRLArcs);
      
      String string3 = StringUtils.trimWithEllipsis((Object) labeledWord0, 1074);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertFalse(deltaIndex0.isLocked());
      assertEquals(1, deltaIndex0.size());
      assertFalse(deltaIndex0.isEmpty());
      assertEquals(0, indexedWord0.copyCount());
      assertEquals(3, indexedWord0.size());
      assertEquals(0, indexedWord1.copyCount());
      assertEquals(3, indexedWord1.size());
      assertEquals("quickstep", labeledWord0.value());
      assertEquals("quickstep", labeledWord0.word());
      assertEquals((-1), labeledWord0.endPosition());
      assertEquals((-1), labeledWord0.beginPosition());
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(hashIndex0.contains(typedDependency0));
      assertTrue(deltaIndex0.contains(typedDependency0));
      assertSame(indexedWord0, indexedWord1);
      assertSame(indexedWord1, indexedWord0);
      assertFalse(SemanticGraph.addSRLArcs);
      
      String string4 = StringUtils.getBaseName("quickstep", ".3>C", "microprogram");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("quickstep", string4);
      
      Set<String> set0 = StringUtils.stringToSet("d-*d$W)z/3E](tY", "5lcG3+\"_LLv7^|e`");
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains(string1));
      assertTrue(set0.contains("d-*d$W)z/3E](tY"));
      
      boolean boolean2 = StringUtils.lookingAt(";Wr+,ml:UT)%%*NVD43", "picket");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = StringUtils.padLeftOrTrim("q\"&f9H_", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[][] stringArray0 = new String[8][6];
      String[] stringArray1 = new String[4];
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[2] = "q\"&f9H_";
      stringArray1[3] = "";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[9];
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "q\"&f9H_";
      stringArray2[1] = "o8N)$U$8&_CY";
      stringArray2[2] = "q\"&f9H_";
      stringArray2[3] = "";
      stringArray2[4] = "q\"&f9H_";
      stringArray2[5] = "";
      stringArray2[6] = "";
      stringArray2[7] = "";
      stringArray2[8] = "q\"&f9H_";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[8];
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      
      stringArray3[0] = "o8N)$U$8&_CY";
      stringArray3[1] = "out-general";
      stringArray3[2] = "q\"&f9H_";
      stringArray3[3] = "o8N)$U$8&_CY";
      stringArray3[4] = "";
      stringArray3[5] = "q\"&f9H_";
      stringArray3[6] = "o8N)$U$8&_CY";
      stringArray3[7] = "o8N)$U$8&_CY";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[9];
      assertFalse(stringArray4.equals((Object)stringArray3));
      assertFalse(stringArray4.equals((Object)stringArray1));
      assertFalse(stringArray4.equals((Object)stringArray2));
      
      stringArray4[0] = "";
      stringArray4[1] = "";
      stringArray4[2] = "q\"&f9H_";
      stringArray4[3] = "";
      stringArray4[4] = "";
      stringArray4[5] = "";
      stringArray4[6] = "";
      stringArray4[7] = "o8N)$U$8&_CY";
      stringArray4[8] = "q\"&f9H_";
      stringArray0[3] = stringArray4;
      String[] stringArray5 = new String[3];
      assertFalse(stringArray5.equals((Object)stringArray4));
      assertFalse(stringArray5.equals((Object)stringArray2));
      assertFalse(stringArray5.equals((Object)stringArray1));
      assertFalse(stringArray5.equals((Object)stringArray3));
      
      stringArray5[0] = "edu.stanford.nlp.ling.CoreAnnotations$SRLInstancesAnnotation";
      stringArray5[1] = "";
      stringArray5[2] = "out-general";
      stringArray0[4] = stringArray5;
      String[] stringArray6 = new String[8];
      assertFalse(stringArray6.equals((Object)stringArray2));
      assertFalse(stringArray6.equals((Object)stringArray4));
      assertFalse(stringArray6.equals((Object)stringArray3));
      assertFalse(stringArray6.equals((Object)stringArray1));
      assertFalse(stringArray6.equals((Object)stringArray5));
      
      stringArray6[0] = "q\"&f9H_";
      stringArray6[1] = "o8N)$U$8&_CY";
      stringArray6[2] = "o8N)$U$8&_CY";
      stringArray6[3] = "q\"&f9H_";
      stringArray6[4] = "o8N)$U$8&_CY";
      stringArray6[5] = "o8N)$U$8&_CY";
      stringArray6[6] = "edu.stanford.nlp.ling.CoreAnnotations$SRLInstancesAnnotation";
      stringArray6[7] = "edu.stanford.nlp.ling.CoreAnnotations$SRLInstancesAnnotation";
      stringArray0[5] = stringArray6;
      String[] stringArray7 = new String[6];
      assertFalse(stringArray7.equals((Object)stringArray1));
      assertFalse(stringArray7.equals((Object)stringArray6));
      assertFalse(stringArray7.equals((Object)stringArray5));
      assertFalse(stringArray7.equals((Object)stringArray3));
      assertFalse(stringArray7.equals((Object)stringArray2));
      assertFalse(stringArray7.equals((Object)stringArray4));
      
      stringArray7[0] = "friday";
      stringArray7[1] = "edu.stanford.nlp.ling.CoreAnnotations$SRLInstancesAnnotation";
      stringArray7[2] = "q\"&f9H_";
      stringArray7[3] = "q\"&f9H_";
      stringArray7[4] = "";
      stringArray7[5] = "edu.stanford.nlp.ling.CoreAnnotations$SRLInstancesAnnotation";
      stringArray0[6] = stringArray7;
      String[] stringArray8 = new String[4];
      assertFalse(stringArray8.equals((Object)stringArray3));
      assertFalse(stringArray8.equals((Object)stringArray7));
      assertFalse(stringArray8.equals((Object)stringArray4));
      assertFalse(stringArray8.equals((Object)stringArray6));
      assertFalse(stringArray8.equals((Object)stringArray5));
      assertFalse(stringArray8.equals((Object)stringArray1));
      assertFalse(stringArray8.equals((Object)stringArray2));
      
      stringArray8[0] = "edu.stanford.nlp.ling.CoreAnnotations$SRLInstancesAnnotation";
      stringArray8[1] = "edu.stanford.nlp.ling.CoreAnnotations$SRLInstancesAnnotation";
      stringArray8[2] = "out-general";
      stringArray8[3] = "";
      stringArray0[7] = stringArray8;
      // Undeclared exception!
      try { 
        StringUtils.makeHTMLTable(stringArray0, stringArray1, stringArray8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("edu.stanford.nlp.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "";
      int int0 = (-2621);
      // Undeclared exception!
      try { 
        StringUtils.padLeftOrTrim("", (-2621));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.getBaseName("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      Object[][] objectArray0 = new Object[2][7];
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) "";
      Class<CategoryWordTag> class0 = CategoryWordTag.class;
      String string2 = null;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String string3 = "nCB%pa %";
      stringArray0[3] = "nCB%pa %";
      stringArray0[4] = null;
      stringArray0[5] = null;
      // Undeclared exception!
      try { 
        StringUtils.columnStringToObject((Class) class0, "", (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[][] objectArray0 = new Object[8][3];
      Object[] objectArray1 = new Object[2];
      Class<Object> class0 = Object.class;
      String string0 = "";
      String string1 = "n|cBP/pZrpP.be1tk6X";
      RegexStringFilter regexStringFilter0 = new RegexStringFilter("n|cBP/pZrpP.be1tk6X");
      assertNotNull(regexStringFilter0);
      
      Pattern pattern0 = regexStringFilter0.pattern;
      assertEquals(0, pattern0.flags());
      assertEquals("n|cBP/pZrpP.be1tk6X", pattern0.pattern());
      assertEquals("n|cBP/pZrpP.be1tk6X", pattern0.toString());
      assertNotNull(pattern0);
      
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        StringUtils.columnStringToObject((Class<?>) class0, "", pattern0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("edu.stanford.nlp.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "";
      List<List<String>> list0 = StringUtils.splitFieldsFast("", "");
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      TreeSet<TypesafeMap.Key<Pattern>> treeSet0 = new TreeSet<TypesafeMap.Key<Pattern>>();
      assertNotNull(treeSet0);
      
      TypesafeMap.Key<Pattern> typesafeMap_Key0 = (TypesafeMap.Key<Pattern>) mock(TypesafeMap.Key.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        treeSet0.add(typesafeMap_Key0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
  @Ignore
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = ":e%Ekhk";
      MockFile mockFile0 = new MockFile(":e%Ekhk", ":e%Ekhk");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(":e%Ekhk", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/samu/GitHub/CoreNLP/:e%Ekhk", mockFile0.getParent());
      assertEquals("/home/samu/GitHub/CoreNLP/:e%Ekhk/:e%Ekhk", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertNotNull(path0);
      
      boolean boolean0 = mockFile0.setWritable(true);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(":e%Ekhk", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/samu/GitHub/CoreNLP/:e%Ekhk", mockFile0.getParent());
      assertEquals("/home/samu/GitHub/CoreNLP/:e%Ekhk/:e%Ekhk", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(boolean0);
      
      StringUtils.printToFile((File) mockFile0, ":e%Ekhk", false, false, ":e%Ekhk");
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(":e%Ekhk", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/home/samu/GitHub/CoreNLP/:e%Ekhk", mockFile0.getParent());
      assertEquals("/home/samu/GitHub/CoreNLP/:e%Ekhk/:e%Ekhk", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      
      String string1 = "edu.stanford.nlp.util.Interval";
      // Undeclared exception!
      try { 
        StringUtils.trimWithEllipsis("edu.stanford.nlp.util.Interval", (-318));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
  @Ignore
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CategoryWordTag categoryWordTag0 = new CategoryWordTag("");
      assertEquals("", categoryWordTag0.category());
      assertEquals((-1), categoryWordTag0.endPosition());
      assertNull(categoryWordTag0.word());
      assertEquals((-1), categoryWordTag0.beginPosition());
      assertNull(categoryWordTag0.tag());
      assertEquals("", categoryWordTag0.value());
      assertNotNull(categoryWordTag0);
      assertTrue(CategoryWordTag.printWordTag);
      assertFalse(CategoryWordTag.suppressTerminalDetails);
      
      categoryWordTag0.setCategoryWordTag("T~214E", "T~214E", "T~214E");
      assertEquals("T~214E", categoryWordTag0.category());
      assertEquals((-1), categoryWordTag0.endPosition());
      assertEquals((-1), categoryWordTag0.beginPosition());
      assertEquals("T~214E", categoryWordTag0.value());
      assertEquals("T~214E", categoryWordTag0.tag());
      assertEquals("T~214E", categoryWordTag0.word());
      assertTrue(CategoryWordTag.printWordTag);
      assertFalse(CategoryWordTag.suppressTerminalDetails);
      
      String string0 = categoryWordTag0.toString("T~214E");
      assertEquals("T~214E", categoryWordTag0.category());
      assertEquals((-1), categoryWordTag0.endPosition());
      assertEquals((-1), categoryWordTag0.beginPosition());
      assertEquals("T~214E", categoryWordTag0.value());
      assertEquals("T~214E", categoryWordTag0.tag());
      assertEquals("T~214E", categoryWordTag0.word());
      assertNotNull(string0);
      assertEquals("T~214E[T~214E/T~214E]", string0);
      assertTrue(CategoryWordTag.printWordTag);
      assertFalse(CategoryWordTag.suppressTerminalDetails);
      
      String string1 = categoryWordTag0.toString("tc+>Ztpzq");
      assertEquals("T~214E", categoryWordTag0.category());
      assertEquals((-1), categoryWordTag0.endPosition());
      assertEquals((-1), categoryWordTag0.beginPosition());
      assertEquals("T~214E", categoryWordTag0.value());
      assertEquals("T~214E", categoryWordTag0.tag());
      assertEquals("T~214E", categoryWordTag0.word());
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("T~214E[T~214E/T~214E]", string1);
      assertTrue(CategoryWordTag.printWordTag);
      assertFalse(CategoryWordTag.suppressTerminalDetails);
      
      categoryWordTag0.setCategoryWordTag("", "T~214E", "P{;Va),K{JU7");
      assertEquals("", categoryWordTag0.category());
      assertEquals((-1), categoryWordTag0.endPosition());
      assertEquals("P{;Va),K{JU7", categoryWordTag0.tag());
      assertEquals((-1), categoryWordTag0.beginPosition());
      assertEquals("", categoryWordTag0.value());
      assertEquals("T~214E", categoryWordTag0.word());
      assertTrue(CategoryWordTag.printWordTag);
      assertFalse(CategoryWordTag.suppressTerminalDetails);
      
      categoryWordTag0.setValue("tc+>Ztpzq");
      assertEquals("tc+>Ztpzq", categoryWordTag0.value());
      assertEquals((-1), categoryWordTag0.endPosition());
      assertEquals("P{;Va),K{JU7", categoryWordTag0.tag());
      assertEquals((-1), categoryWordTag0.beginPosition());
      assertEquals("tc+>Ztpzq", categoryWordTag0.category());
      assertEquals("T~214E", categoryWordTag0.word());
      assertTrue(CategoryWordTag.printWordTag);
      assertFalse(CategoryWordTag.suppressTerminalDetails);
      
      String string2 = StringUtils.padLeft((Object) categoryWordTag0, 35);
      assertEquals("tc+>Ztpzq", categoryWordTag0.value());
      assertEquals((-1), categoryWordTag0.endPosition());
      assertEquals("P{;Va),K{JU7", categoryWordTag0.tag());
      assertEquals((-1), categoryWordTag0.beginPosition());
      assertEquals("tc+>Ztpzq", categoryWordTag0.category());
      assertEquals("T~214E", categoryWordTag0.word());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(CategoryWordTag.printWordTag);
      assertFalse(CategoryWordTag.suppressTerminalDetails);
      
      String string3 = StringUtils.trimWithEllipsis((Object) categoryWordTag0, 35);
      assertEquals("tc+>Ztpzq", categoryWordTag0.value());
      assertEquals((-1), categoryWordTag0.endPosition());
      assertEquals("P{;Va),K{JU7", categoryWordTag0.tag());
      assertEquals((-1), categoryWordTag0.beginPosition());
      assertEquals("tc+>Ztpzq", categoryWordTag0.category());
      assertEquals("T~214E", categoryWordTag0.word());
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("edu.stanford.nlp.ling.CategoryWo...", string3);
      assertTrue(CategoryWordTag.printWordTag);
      assertFalse(CategoryWordTag.suppressTerminalDetails);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "tc+>Ztpzq";
      objectArray0[1] = (Object) "T~214E[T~214E/T~214E]";
      objectArray0[2] = (Object) "tc+>Ztpzq";
      objectArray0[3] = (Object) "T~214E[T~214E/T~214E]";
      objectArray0[4] = (Object) "edu.stanford.nlp.ling.CategoryWordTag@0000000001";
      objectArray0[5] = (Object) "edu.stanford.nlp.ling.CategoryWo...";
      String string4 = StringUtils.join(objectArray0, "edu.stanford.nlp.ling.CategoryWo...");
      assertEquals(6, objectArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
  }
  @Ignore
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CategoryWordTag categoryWordTag0 = new CategoryWordTag();
      assertNull(categoryWordTag0.category());
      assertEquals((-1), categoryWordTag0.beginPosition());
      assertNull(categoryWordTag0.tag());
      assertNull(categoryWordTag0.value());
      assertEquals((-1), categoryWordTag0.endPosition());
      assertNull(categoryWordTag0.word());
      assertNotNull(categoryWordTag0);
      assertFalse(CategoryWordTag.suppressTerminalDetails);
      assertTrue(CategoryWordTag.printWordTag);
      
      String string0 = categoryWordTag0.toString("");
      assertNull(categoryWordTag0.category());
      assertEquals((-1), categoryWordTag0.beginPosition());
      assertNull(categoryWordTag0.tag());
      assertNull(categoryWordTag0.value());
      assertEquals((-1), categoryWordTag0.endPosition());
      assertNull(categoryWordTag0.word());
      assertNull(string0);
      assertFalse(CategoryWordTag.suppressTerminalDetails);
      assertTrue(CategoryWordTag.printWordTag);
      
      String string1 = StringUtils.padOrTrim((Object) categoryWordTag0, 2727);
      assertNull(categoryWordTag0.category());
      assertEquals((-1), categoryWordTag0.beginPosition());
      assertNull(categoryWordTag0.tag());
      assertNull(categoryWordTag0.value());
      assertEquals((-1), categoryWordTag0.endPosition());
      assertNull(categoryWordTag0.word());
      assertNotNull(string1);
      assertFalse(CategoryWordTag.suppressTerminalDetails);
      assertTrue(CategoryWordTag.printWordTag);
      
      boolean boolean0 = StringUtils.isCapitalized(string1);
      assertNull(categoryWordTag0.category());
      assertEquals((-1), categoryWordTag0.beginPosition());
      assertNull(categoryWordTag0.tag());
      assertNull(categoryWordTag0.value());
      assertEquals((-1), categoryWordTag0.endPosition());
      assertNull(categoryWordTag0.word());
      assertFalse(boolean0);
      assertFalse(CategoryWordTag.suppressTerminalDetails);
      assertTrue(CategoryWordTag.printWordTag);
      
      String string2 = StringUtils.padOrTrim("", 2727);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      Stack<HashableCoreMap> stack0 = new Stack<HashableCoreMap>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Class<WordLemmaTag>[] classArray0 = (Class<WordLemmaTag>[]) Array.newInstance(Class.class, 9);
      Class<WordLemmaTag> class0 = WordLemmaTag.class;
      classArray0[0] = class0;
      Class<WordLemmaTag> class1 = WordLemmaTag.class;
      classArray0[1] = class1;
      Class<WordLemmaTag> class2 = WordLemmaTag.class;
      classArray0[2] = class2;
      Class<WordLemmaTag> class3 = WordLemmaTag.class;
      classArray0[3] = class3;
      Class<WordLemmaTag> class4 = WordLemmaTag.class;
      classArray0[4] = class4;
      Class<WordLemmaTag> class5 = WordLemmaTag.class;
      classArray0[5] = class5;
      Class<WordLemmaTag> class6 = WordLemmaTag.class;
      classArray0[6] = class6;
      Class<WordLemmaTag> class7 = WordLemmaTag.class;
      classArray0[7] = class7;
      Class<WordLemmaTag> class8 = WordLemmaTag.class;
      classArray0[8] = class8;
      String string3 = StringUtils.joinMultipleFields((List<? extends CoreMap>) stack0, (Class[]) classArray0, string2, "#", (String) null, 761, 2727);
      assertEquals(9, classArray0.length);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.padLeftOrTrim("", 761);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEqualsstring4);
      
      File file0 = MockFile.createTempFile("BZY^b", (String) null);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("BZY^b0.tmp", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals("/tmp/BZY^b0.tmp", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertNotNull(file0);
      
      StringUtils.printToFile(file0, "");
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("BZY^b0.tmp", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals("/tmp/BZY^b0.tmp", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
  }
  
}
